<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN"><title type="text">悠闲の小屋</title><subtitle type="html">一个极简主题的博客。</subtitle><updated>2024-01-13T13:59:16+00:00</updated><id>https://keepjolly.com/</id><link rel="alternate" type="text/html" href="https://keepjolly.com/"/><link rel="self" type="application/atom+xml" href="https://keepjolly.com/atom.xml"/><author><name>Rurouni</name><uri>https://keepjolly.com/</uri><email>1366475809@qq.com</email></author><rights>在保留本文作者及本文链接的前提下，非商业用途随意转载分享(我会高强度自搜的喔👊)。</rights><generator uri="https://gohugo.io/" version="0.121.2">Hugo</generator><entry><title type="text">面试之计算机网络-5</title><link rel="alternate" type="text/html" href="https://keepjolly.com/posts/learn/interview-network-5/"/><id>https://keepjolly.com/posts/learn/interview-network-5/</id><updated>2024-01-13T13:59:11+00:00</updated><published>2024-01-13T21:57:33+08:00</published><summary type="html">对于FIN_WAIT_2，CLOSE_WAIT状态和TIME_WAIT状态？你知道多……</summary><content type="html">&lt;h2 id="对于fin_wait_2close_wait状态和time_wait状态你知道多少">对于FIN_WAIT_2，CLOSE_WAIT状态和TIME_WAIT状态？你知道多少?&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>FIN_WAIT_2：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>半关闭状态。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>发送断开请求一方还有接收数据能力，但已经没有发送数据能力。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>CLOSE_WAIT状态：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>被动关闭连接一方接收到FIN包会立即回应ACK包表示已接收到断开请求。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>被动关闭连接一方如果还有剩余数据要发送就会进入CLOSE_WAIT状态。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>TIME_WAIT状态：&lt;/p>
&lt;ul>
&lt;li>又叫2MSL等待状态。&lt;/li>
&lt;li>为了使被动关闭的一方正确的关闭，以及防止历史数据出现在新连接中。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="你了解流量控制原理吗">你了解流量控制原理吗？&lt;/h2>
&lt;ul>
&lt;li>流量控制就是让「发送方」根据「接收方」的实际接收能力控制发送的数据量。&lt;/li>
&lt;/ul>
&lt;p>如何控制：
接收方每次收到数据包，可以在发送ACK报文时，同时告诉发送方自己的&lt;strong>接收窗口大小还剩余多少&lt;/strong>是空闲的。&lt;/p>
&lt;p>发送方收到之后，便会&lt;strong>调整发送窗口的大小&lt;/strong>，当发送方收到接收窗口的大小为0时，发送方就会停止发送数据，并且同时&lt;strong>开启一个定时器&lt;/strong>，每隔一段时间就发个探测报文询问接收方。如果可以，接收方就告诉他此时接受窗口的大小；如果接受窗口大小还是为0，则发送方再次刷新启动定时器。&lt;/p>
&lt;blockquote>
&lt;p>一般情况下接收窗口 &amp;gt;= 发送窗口。
&lt;a href="https://blog.csdn.net/weixin_43901865/article/details/113106417">https://blog.csdn.net/weixin_43901865/article/details/113106417&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h2 id="建立tcp服务器的各个系统调用过程是怎样的">建立TCP服务器的各个系统调用过程是怎样的？&lt;/h2>
&lt;p>&lt;img src="http://oss.interviewguide.cn/img/202205220023934.png" alt="">&lt;/p>
&lt;p>&lt;img src="http://oss.interviewguide.cn/img/202205220023348.png" alt="">&lt;/p>
&lt;ul>
&lt;li>
&lt;p>服务器：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>创建socket -&amp;gt; int socket(int domain, int type, int protocol);&lt;/p>
&lt;ul>
&lt;li>
&lt;p>domain：协议域，决定了socket的地址类型，IPv4为AF_INET。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>type：指定socket类型，SOCK_STREAM为TCP连接,SOCK_DGRAM为UDP连接。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>protocol：指定协议。IPPROTO_TCP表示TCP协议，为0时自动选择type默认协议。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>绑定socket和端口号 -&amp;gt; int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen);&lt;/p>
&lt;ul>
&lt;li>
&lt;p>sockfd：socket返回的套接字描述符，类似于文件描述符fd。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>addr：有个sockaddr类型数据的指针，指向的是被绑定结构变量。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>addrlen：地址长度。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// IPv4的sockaddr地址结构
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">sockaddr_in&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sa_family_t&lt;/span> &lt;span class="n">sin_family&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 协议类型，AF_INET
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">in_port_t&lt;/span> &lt;span class="n">sin_port&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 端口号
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="nc">in_addr&lt;/span> &lt;span class="n">sin_addr&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// IP地址
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">in_addr&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">uint32_t&lt;/span> &lt;span class="n">s_addr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>
&lt;p>监听端口号 -&amp;gt; int listen(int sockfd, int backlog);&lt;/p>
&lt;ul>
&lt;li>
&lt;p>sockfd：要监听的sock描述字。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>backlog：socket可以排队的最大连接数。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>接收用户请求 -&amp;gt; int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);&lt;/p>
&lt;ul>
&lt;li>
&lt;p>sockfd：服务器socket描述字。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>addr：指向客户端地址结构指针。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>addrlen：协议地址长度。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>注：一旦accept某个客户机请求成功将返回一个全新的描述符用于标识具体客户的TCP连接。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>从socket中读取字符 -&amp;gt; ssize_t read(int fd, void *buf, size_t count);&lt;/p>
&lt;ul>
&lt;li>
&lt;p>fd：连接描述字。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>buf：缓冲区buf。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>count：缓冲区长度。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>注：大于0表示读取的字节数，返回0表示文件读取结束，小于0表示发生错误。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>关闭socket -&amp;gt; int close(int fd);&lt;/p>
&lt;ul>
&lt;li>
&lt;p>fd：accept返回的连接描述字，每个连接有一个，生命周期为连接周期。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>注：sockfd是监听描述字，一个服务器只有一个，用于监听是否有连接；fd是连接描述字，用于每个连接的操作。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>客户机：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>创建socket -&amp;gt; int socket(int domain, int type, int protocol);&lt;/p>
&lt;/li>
&lt;li>
&lt;p>连接指定计算机 -&amp;gt; int connect(int sockfd, struct sockaddr* addr, socklen_t addrlen);&lt;/p>
&lt;ul>
&lt;li>
&lt;p>sockfd客户端的sock描述字。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>addr：服务器的地址。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>addrlen：socket地址长度。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>向socket写入信息 -&amp;gt; ssize_t write(int fd, const void *buf, size_t count);&lt;/p>
&lt;ul>
&lt;li>
&lt;p>fd、buf、count：同read中意义。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>大于0表示写了部分或全部数据，小于0表示出错。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>关闭socket -&amp;gt; int close(int fd);&lt;/p>
&lt;ul>
&lt;li>fd：同服务器端fd。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="tcp-协议如何保证可靠传输">TCP 协议如何保证可靠传输？&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>建立连接（标志位）：通信前确认通信实体存在。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>序号机制（序号、确认号）：确保了数据是按序、完整到达。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>数据校验（校验和）：CRC校验全部数据。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>超时重传（定时器）：保证因链路故障未能到达数据能够被多次重发。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>流量控制：发送方根据接受方的实际接受能力控制发送的数据量。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>拥塞控制：当网络拥塞时，通过拥塞窗口，减少数据的发送，防止包丢失。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="udp是什么">UDP是什么？&lt;/h2>
&lt;p>提供&lt;strong>无连接&lt;/strong>的，尽最大努力的数据传输服务（&lt;strong>不保证数据传输的可靠性&lt;/strong>）。UDP头部只有8个字节，包含源和目标端口号，包长度和校验和，各占16位。&lt;/p>
&lt;h2 id="tcp和udp的区别">TCP和UDP的区别&lt;/h2>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2024/01/20240113210155.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="Pasted image 20230909171436">
&lt;img src="https://pic.keepjolly.com/halo/blog/2024/01/20240113210158.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="Pasted image 20230909171448">&lt;/p>
&lt;ol>
&lt;li>
&lt;p>连接&lt;/p>
&lt;ul>
&lt;li>TCP 是面向连接的传输层协议，传输数据前先要建立连接。&lt;/li>
&lt;li>UDP 是面向报文的传输层协议，即刻传输数据。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>服务对象&lt;/p>
&lt;ul>
&lt;li>TCP 是一对一的两点服务，即一条连接只有两个端点。&lt;/li>
&lt;li>UDP 支持一对一、一对多、多对多的交互通信&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>可靠性&lt;/p>
&lt;ul>
&lt;li>TCP 是可靠交付数据的~~，数据可以无差错、不丢失、不重复、按序到达~~。&lt;/li>
&lt;li>UDP 是尽最大努力交付，不保证可靠交付数据。拓展：但是我们可以基于 UDP 传输协议实现一个可靠的传输协议，比如 QUIC 协议，具体可以参见这篇文章：&lt;a href="https://xiaolincoding.com/network/3_tcp/quic.html">如何基于 UDP 协议实现可靠传输？(opens new window)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>拥塞控制、流量控制&lt;/p>
&lt;ul>
&lt;li>TCP 有拥塞控制和流量控制机制，保证数据传输的安全性。&lt;/li>
&lt;li>UDP 则没有，即使网络非常拥堵了，也不会影响 UDP 的发送速率。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>首部开销&lt;/p>
&lt;ul>
&lt;li>TCP 首部长度较长，会有一定的开销，首部在没有使用「选项」字段时是 &lt;code>20&lt;/code> 个字节，如果使用了「选项」字段则会变长（最大60字节）。&lt;/li>
&lt;li>UDP 首部只有 8 个字节，并且是固定不变的，开销较小。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>传输方式&lt;/p>
&lt;ul>
&lt;li>TCP 是流式传输，没有边界&lt;/li>
&lt;li>UDP 是一个包一个包的发送，是有边界的&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>分片不同&lt;/p>
&lt;ul>
&lt;li>TCP 的数据大小如果大于 MSS 大小，则会在传输层进行分片，目标主机收到后，在传输层组装 TCP 数据包。&lt;/li>
&lt;li>UDP 的数据大小如果大于 MTU 大小，则会在网络层进行分片，目标主机收到后，在网络层组装完数据，接着再传给传输层。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="补充题封包和拆包你听说过吗它是基于tcp还是udp的">补充题：封包和拆包你听说过吗？它是基于TCP还是UDP的？&lt;/h2>
&lt;p>封包和拆包都是基于TCP的概念。因为TCP是无边界的流传输，所以需要对TCP进行封包和拆包，确保发送和接收的数据不粘连。&lt;/p>
&lt;ul>
&lt;li>封包：封包就是在发送数据报的时候为每个TCP数据包加上一个包头，包含该数据包的总长度。&lt;/li>
&lt;li>拆包：接收方接收到报文后提取包头中的长度信息进行截取。&lt;/li>
&lt;/ul>
&lt;h2 id="udp的特点有哪些附赠tcp的特点">UDP的特点有哪些（附赠TCP的特点）？&lt;/h2>
&lt;ul>
&lt;li>UDP是&lt;strong>无连接的&lt;/strong>，&lt;strong>面向报文&lt;/strong>的；&lt;/li>
&lt;li>UDP使用&lt;strong>尽最大努力交付&lt;/strong>，即不保证可靠交付，因此主机不需要维持复杂的链接状态（这里面有许多参数）；&lt;/li>
&lt;li>UDP&lt;strong>没有拥塞控制&lt;/strong>，因此网络出现拥塞不会使源主机的发送速率降低（对实时应用很有用，如IP电话，实时视频会议等）；&lt;/li>
&lt;li>UDP&lt;strong>支持一对一、一对多、多对多&lt;/strong>的交互通信；&lt;/li>
&lt;li>UDP的&lt;strong>首部开销小&lt;/strong>，只有8个字节&lt;/li>
&lt;/ul>
&lt;p>那么，再说一次TCP的特点：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>TCP是面向连接的&lt;/strong>。（就好像打电话一样，通话前需要先拨号建立连接，通话结束后要挂机释放连接）；&lt;/li>
&lt;li>每一条TCP连接只能有两个端点，每一条TCP连接只能是点对点的（&lt;strong>一对一&lt;/strong>）；&lt;/li>
&lt;li>TCP&lt;strong>提供可靠交付的服务&lt;/strong>。通过TCP连接传送的数据，无差错、不丢失、不重复、并且按序到达；&lt;/li>
&lt;li>TCP&lt;strong>提供全双工通信&lt;/strong>。TCP允许通信双方的应用进程在任何时候都能发送数据。TCP连接的两端都设有发送缓存和接收缓存，用来临时存放双方通信的数据；&lt;/li>
&lt;li>&lt;strong>面向字节流&lt;/strong>。TCP中的“流”（stream）指的是流入进程或从进程流出的字节序列。“面向字节流”的含义是：虽然应用程序和TCP的交互是一次一个数据块（大小不等），但TCP把应用程序交下来的数据仅仅看成是一连串的无结构的字节流。&lt;/li>
&lt;/ul>
&lt;h2 id="tcp对应的应用层协议">TCP对应的应用层协议&lt;/h2>
&lt;p>FTP：定义了文件传输协议，使用21端口.
Telnet：它是一种用于远程登陆的端口,23端口
SMTP：定义了简单邮件传送协议，服务器开放的是25号端口。
POP3：它是和SMTP对应，POP3用于接收邮件，110端口。&lt;/p>
&lt;h2 id="udp对应的应用层协议">UDP对应的应用层协议&lt;/h2>
&lt;p>DNS：用于域名解析服务，用的是53号端口
SNMP：简单网络管理协议，使用161号端口
TFTP(Trival File Transfer Protocal)：简单文件传输协议，69&lt;/p>
&lt;h2 id="数据链路层常见协议可以说一下吗">数据链路层常见协议？可以说一下吗？&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>协议&lt;/th>
&lt;th>名称&lt;/th>
&lt;th>作用&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>ARP&lt;/td>
&lt;td>地址解析协议&lt;/td>
&lt;td>根据IP地址获取物理地址&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>RARP&lt;/td>
&lt;td>反向地址转换协议&lt;/td>
&lt;td>根据物理地址获取IP地址&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>PPP&lt;/td>
&lt;td>点对点协议&lt;/td>
&lt;td>主要是用来通过拨号或专线方式建立点对点连接发送数据&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="ping命令基于什么协议原理是什么">Ping命令基于什么协议？原理是什么？&lt;/h2>
&lt;p>ping是基于网络层的ICMP协议实现的。通过向对方发送一个&lt;strong>ICMP回送请求报文&lt;/strong>，如果对方主机可达的话会收到该报文，并响应一个&lt;strong>ICMP回送回答报文&lt;/strong>。&lt;/p>
&lt;p>扩展：ICMP报文的介绍。ICMP报文分为两个种类：&lt;/p>
&lt;ol>
&lt;li>ICMP差错报告报文，常见的有
&lt;ol>
&lt;li>终点不可达&lt;/li>
&lt;li>时间超过&lt;/li>
&lt;li>参数问题&lt;/li>
&lt;li>改变路由&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>ICMP询问报文
&lt;ol>
&lt;li>回送请求和回答：向特定主机发出&lt;strong>回送请求报文&lt;/strong>，收到回送请求报文的主机响应&lt;strong>回送回答报文&lt;/strong>。&lt;/li>
&lt;li>时间戳请求和回答：询问对方当前的时间，返回的是一个32位的时间戳。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h2 id="在进行udp编程的时候一次发送多少bytes好">在进行UDP编程的时候，一次发送多少bytes好?&lt;/h2>
&lt;p>最好的情况下是数据链路层限制的MTU大小-IP层头部20字节-UDP包头部8字节的数据量进行发送，如以太网可以发送1472字节的数据。在进行Internet的UDP编程时，最好将UDP的数据长度控件在548字节(576-8-20)以内。因为UDP是不可靠的协议，应该尽量防止数据包在数据链路层分片。
&lt;a href="https://taifua.com/udp-512bytes-limit.html">https://taifua.com/udp-512bytes-limit.html&lt;/a>&lt;/p>
&lt;h2 id="tcp-利用滑动窗口实现流量控制的机制">TCP 利用滑动窗口实现流量控制的机制？&lt;/h2>
&lt;p>参考82
&lt;img src="https://pic.keepjolly.com/halo/blog/2024/01/20240113210144.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="Pasted image 20230910141305">
&lt;img src="https://pic.keepjolly.com/halo/blog/2024/01/20240113210148.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="Pasted image 20230910141315">
&lt;a href="https://xiaolincoding.com/network/3_tcp/tcp_feature.html#%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3">https://xiaolincoding.com/network/3_tcp/tcp_feature.html#%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3&lt;/a>&lt;/p>
&lt;h2 id="可以解释一下rtortt和超时重传分别是什么吗">可以解释一下RTO，RTT和超时重传分别是什么吗？&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>超时重传：发送端发送报文后若长时间未收到确认的报文则需要重发该报文。
&lt;del>可能有以下几种情况：发送的数据没能到达接收端，所以对方没有响应。接收端接收到数据，但是ACK报文在返回过程中丢失。接收端拒绝或丢弃数据。&lt;/del>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>RTO(Retransmission Time Out)：重传超时时间，即从数据发送时刻算起，超过这个时间便执行重传。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>通常每次重传RTO是前一次重传间隔的两倍，计量单位通常是RTT。例：1RTT，2RTT，4RTT，8RTT......&lt;/p>
&lt;/li>
&lt;li>
&lt;p>重传次数到达上限之后停止重传。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>RTT(Round Trip Time)：一个连接的往返时间，即数据发送时刻到接收到确认的时刻的差值。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="拥塞控制原理听说过吗">拥塞控制原理听说过吗？&lt;/h2>
&lt;ul>
&lt;li>拥塞控制目的是防止数据过多注入到网络中导致网络资源（路由器、交换机等）过载。&lt;/li>
&lt;li>TCP拥塞控制算法：
&lt;ul>
&lt;li>慢开始 &amp;amp; 拥塞避免：先试探网络拥塞程度再逐渐增大拥塞窗口，呈指数增加，直到达到阀值ssthresh，这部分是慢开始过程。达到阀值后每次以 1/拥塞窗口 增长拥塞窗口大小，呈线性增加，当发生拥塞，进行超时重传或者快速重传+快速恢复。&lt;/li>
&lt;li>最终拥塞窗口会收敛于稳定值。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="如何区分流量控制和拥塞控制">如何区分流量控制和拥塞控制？&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>流量控制属于通信双方协商；拥塞控制用于控制网络中的拥塞情况。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>流量控制需要通信双方各维护一个发送窗、一个接收窗，对任意一方，接收窗大小&lt;strong>由自身决定&lt;/strong>，发送窗大小由接收方响应的TCP报文段中窗口值确定；拥塞控制的拥塞窗口大小变化由试探性发送一定数据量数据探查网络状况后而&lt;strong>自适应调整&lt;/strong>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>实际最终发送窗口 = min{流控发送窗口，拥塞窗口}。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="常见的http状态码有哪些">常见的HTTP状态码有哪些？&lt;/h2>
&lt;p>&lt;img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/HTTP/6-%E4%BA%94%E5%A4%A7%E7%B1%BBHTTP%E7%8A%B6%E6%80%81%E7%A0%81.png" alt="五大类 HTTP 状态码">&lt;/p>
&lt;p>&lt;code>1xx&lt;/code> 类状态码属于&lt;strong>提示信息&lt;/strong>，是协议处理中的一种中间状态，实际用到的比较少。&lt;/p>
&lt;p>&lt;code>2xx&lt;/code> 类状态码表示服务器&lt;strong>成功&lt;/strong>处理了客户端的请求，也是我们最愿意看到的状态。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>「&lt;strong>200 OK&lt;/strong>」是最常见的成功状态码，表示一切正常。如果是非 &lt;code>HEAD&lt;/code> 请求，服务器返回的响应头都会有 body 数据。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>「&lt;strong>204 No Content&lt;/strong>」也是常见的成功状态码，与 200 OK 基本相同，但响应头没有 body 数据。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>「&lt;strong>206 Partial Content&lt;/strong>」是应用于 HTTP 分块下载或断点续传，表示响应返回的 body 数据并不是资源的全部，而是其中的一部分，也是服务器处理成功的状态。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;code>3xx&lt;/code> 类状态码表示客户端请求的资源发生了变动，需要客户端用新的 URL 重新发送请求获取资源，也就是&lt;strong>重定向&lt;/strong>。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>「&lt;strong>301 Moved Permanently&lt;/strong>」表示永久重定向，说明请求的资源已经不存在了，需改用新的 URL 再次访问。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>「&lt;strong>302 Found&lt;/strong>」表示临时重定向，说明请求的资源还在，但暂时需要用另一个 URL 来访问。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>301 和 302 都会在响应头里使用字段 &lt;code>Location&lt;/code>，指明后续要跳转的 URL，浏览器会自动重定向新的 URL。&lt;/p>
&lt;ul>
&lt;li>「&lt;strong>304 Not Modified&lt;/strong>」不具有跳转的含义，表示资源未修改，重定向已存在的缓冲文件，也称缓存重定向，也就是告诉客户端可以继续使用缓存资源，用于缓存控制。&lt;/li>
&lt;/ul>
&lt;p>&lt;code>4xx&lt;/code> 类状态码表示客户端发送的&lt;strong>报文有误&lt;/strong>，服务器无法处理，也就是错误码的含义。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>「&lt;strong>400 Bad Request&lt;/strong>」表示客户端请求的报文有错误，但只是个笼统的错误。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>「&lt;strong>403 Forbidden&lt;/strong>」表示服务器禁止访问资源，并不是客户端的请求出错。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>「&lt;strong>404 Not Found&lt;/strong>」表示请求的资源在服务器上不存在或未找到，所以无法提供给客户端。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;code>5xx&lt;/code> 类状态码表示客户端请求报文正确，但是&lt;strong>服务器处理时内部发生了错误&lt;/strong>，属于服务器端的错误码。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>「&lt;strong>500 Internal Server Error&lt;/strong>」与 400 类型，是个笼统通用的错误码，服务器发生了什么错误，我们并不知道。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>「&lt;strong>501 Not Implemented&lt;/strong>」表示客户端请求的功能还不支持，类似“即将开业，敬请期待”的意思。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>「&lt;strong>502 Bad Gateway&lt;/strong>」通常是服务器作为网关或代理时返回的错误码，表示服务器自身工作正常，访问后端服务器发生了错误。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>「&lt;strong>503 Service Unavailable&lt;/strong>」表示服务器当前很忙，暂时无法响应客户端，类似“网络服务正忙，请稍后重试”的意思。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="服务器出现大量close_wait的连接的原因是什么有什么解决方法">服务器出现大量close_wait的连接的原因是什么？有什么解决方法？&lt;/h2>
&lt;p>&lt;a href="https://xiaolincoding.com/network/3_tcp/tcp_interview.html#%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%87%BA%E7%8E%B0%E5%A4%A7%E9%87%8F-time-wait-%E7%8A%B6%E6%80%81%E7%9A%84%E5%8E%9F%E5%9B%A0%E6%9C%89%E5%93%AA%E4%BA%9B">服务器出现大量 TIME_WAIT 状态的原因有哪些？&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://xiaolincoding.com/network/3_tcp/tcp_interview.html#%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%87%BA%E7%8E%B0%E5%A4%A7%E9%87%8F-close-wait-%E7%8A%B6%E6%80%81%E7%9A%84%E5%8E%9F%E5%9B%A0%E6%9C%89%E5%93%AA%E4%BA%9B">服务器出现大量 CLOSE_WAIT 状态的原因有哪些？&lt;/a>&lt;/p>
&lt;p>close_wait状态是在TCP四次挥手的时候收到FIN但是没有发送自己的FIN时出现的，服务器出现大量close_wait状态的原因有两种：&lt;/p>
&lt;ul>
&lt;li>服务器内部业务处理占用了过多时间，都没能处理完业务；或者还有大量数据需要发送；或者服务器的业务逻辑有问题，没有执行close()方法&lt;/li>
&lt;li>客户端异常关闭连接：客户端在与服务器进行通信后，异常关闭连接，导致服务器端无法及时收到关闭连接的确认，从而进入last ack状态。&lt;/li>
&lt;/ul>
&lt;p>处理方法：&lt;/p>
&lt;ul>
&lt;li>考虑使用连接池技术&lt;/li>
&lt;li>修改程序里的bug&lt;/li>
&lt;/ul>
&lt;h2 id="一台机器能够使用的端口号上限是多少是否可以修改如果想要用的端口超过这个限制怎么办">一台机器能够使用的端口号上限是多少，是否可以修改？如果想要用的端口超过这个限制怎么办？&lt;/h2>
&lt;p>65536.因为TCP的报文头部中源端口号和目的端口号的长度是16位，也就是可以表示2^16=65536个不同端口号，因此TCP可供识别的端口号最多只有65536个。但是由于0到1023是知名服务端口，所以实际上还要少1024个端口号。&lt;/p>
&lt;p>而对于服务器来说，可以开的端口号与65536无关，其实是受限于Linux可以打开的文件数量，并且可以通过MaxUserPort来进行配置。&lt;/p></content><category scheme="https://keepjolly.com/posts/" term="posts" label="posts"/><category scheme="https://keepjolly.com/posts/learn/" term="learn" label="learn"/><category scheme="https://keepjolly.com/tags/interview/" term="Interview" label="Interview"/></entry><entry><title type="text">面试之计算机网络-4</title><link rel="alternate" type="text/html" href="https://keepjolly.com/posts/learn/interview-network-4/"/><id>https://keepjolly.com/posts/learn/interview-network-4/</id><updated>2024-01-13T13:59:11+00:00</updated><published>2024-01-13T21:57:19+08:00</published><summary type="html">四次挥手相关内容 TCP 的连接的拆除需要发送四个包，因此称为四次挥手(Four-way ha……</summary><content type="html">&lt;h2 id="四次挥手相关内容">四次挥手相关内容&lt;/h2>
&lt;p>&lt;img src="http://oss.interviewguide.cn/img/202205220036404.png" alt="">&lt;/p>
&lt;p>TCP 的连接的拆除需要发送四个包，因此称为四次挥手(Four-way handshake)，客户端或服务器均可主动发起挥手动作。&lt;/p>
&lt;ul>
&lt;li>客户端打算关闭连接，此时会发送一个 TCP 首部 &lt;code>FIN&lt;/code> 标志位被置为 &lt;code>1&lt;/code> 的报文，即 &lt;code>FIN&lt;/code> 报文，之后客户端进入 &lt;code>FIN_WAIT_1&lt;/code> 状态。&lt;/li>
&lt;li>服务端收到该报文后，就向客户端发送 &lt;code>ACK&lt;/code> 应答报文，接着服务端进入 &lt;code>CLOSE_WAIT&lt;/code> 状态。&lt;/li>
&lt;li>客户端收到服务端的 &lt;code>ACK&lt;/code> 应答报文后，之后进入 &lt;code>FIN_WAIT_2&lt;/code> 状态。&lt;/li>
&lt;li>等待服务端处理完数据后，也向客户端发送 &lt;code>FIN&lt;/code> 报文，之后服务端进入 &lt;code>LAST_ACK&lt;/code> 状态。&lt;/li>
&lt;li>客户端收到服务端的 &lt;code>FIN&lt;/code> 报文后，回一个 &lt;code>ACK&lt;/code> 应答报文，之后进入 &lt;code>TIME_WAIT&lt;/code> 状态&lt;/li>
&lt;li>服务端收到了 &lt;code>ACK&lt;/code> 应答报文后，就进入了 &lt;code>CLOSE&lt;/code> 状态，至此服务端已经完成连接的关闭。&lt;/li>
&lt;li>客户端在经过 &lt;code>2MSL&lt;/code> 时间后，自动进入 &lt;code>CLOSE&lt;/code> 状态，至此客户端也完成连接的关闭。&lt;/li>
&lt;/ul>
&lt;h2 id="挥手为什么需要四次">挥手为什么需要四次？&lt;/h2>
&lt;p>服务器收到客户端的 FIN 报文时，内核会马上回一个 ACK 应答报文，&lt;strong>但是服务端应用程序可能还有数据要发送，所以并不能马上发送 FIN 报文，而是将发送 FIN 报文的控制权交给服务端应用程序&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>如果服务端应用程序有数据要发送的话，就发完数据后，才调用关闭连接的函数；&lt;/li>
&lt;li>如果服务端应用程序没有数据要发送的话，可以直接调用关闭连接的函数，&lt;/li>
&lt;/ul>
&lt;h2 id="msl和ttl">MSL和TTL？&lt;/h2>
&lt;p>MSL（Maximum Segment Lifetime），它是任何报文在网络上存在的&lt;strong>最长时间&lt;/strong>。&lt;/p>
&lt;p>IP 头中有一个 &lt;code>TTL&lt;/code> 字段，是 IP 数据报可以经过的&lt;strong>最大路由数&lt;/strong>，每经过一个处理他的路由器此值就减 1，当此值为 0 则数据报将被丢弃，同时发送 ICMP 报文通知源主机。&lt;/p>
&lt;p>MSL 与 TTL 的区别： MSL 的单位是时间，而 TTL 是经过路由跳数。所以 &lt;strong>MSL 应该要大于等于 TTL 消耗为 0 的时间&lt;/strong>，以确保报文已被自然消亡。&lt;/p>
&lt;h2 id="四次挥手释放连接时等待2msl的意义">四次挥手释放连接时，等待2MSL的意义?&lt;/h2>
&lt;ol>
&lt;li>保证客户端发送的最后一个ACK报文段能够到达服务端。 因为这个ACK有可能丢失，如果丢失服务器会超时重传这个FIN报文，接着客户端再重传一次确认，重新启动时间等待计时器。保证服务器能正常的关闭。&lt;/li>
&lt;li>防止历史连接中的数据，出现在本连接中。经过2MSL，就可以使历史连接内所产生的所有报文段都从网络中消失。&lt;/li>
&lt;/ol>
&lt;h2 id="为什么time_wait状态需要经过2msl才能返回到close状态">为什么TIME_WAIT状态需要经过2MSL才能返回到CLOSE状态？&lt;/h2>
&lt;p>同上&lt;/p>
&lt;h2 id="tcp粘包问题是什么你会如何去解决它">TCP粘包问题是什么？你会如何去解决它？&lt;/h2>
&lt;p>&lt;strong>TCP粘包&lt;/strong>是由于TCP是面向流的协议，它只提供了数据的可靠传输，而没有明确的消息边界，用户不知道数据的边界在哪里，导致解析出错。&lt;/p>
&lt;p>&lt;strong>解决&lt;/strong>：&lt;/p>
&lt;ol>
&lt;li>通过特殊标识符表示数据包的边界，例如\n\r，\t，或者一些隐藏字符。&lt;/li>
&lt;li>在TCP报文的头部加上表示数据长度。&lt;/li>
&lt;li>发送数据时&lt;strong>定长&lt;/strong>发送。&lt;/li>
&lt;/ol>
&lt;h2 id="osi七层模型中表示层和会话层功能是什么">OSI七层模型中表示层和会话层功能是什么？&lt;/h2>
&lt;p>参考OSI七层模型。&lt;/p>
&lt;h2 id="三次握手四次挥手的变迁图">三次握手四次挥手的变迁图&lt;/h2>
&lt;p>建议不看&lt;/p>
&lt;p>《TCP/IP详解 卷1:协议》有一张TCP状态变迁图，很具有代表性，有助于大家理解三次握手和四次挥手的状态变化。如下图所示，粗的实线箭头表示正常的客户端状态变迁，粗的虚线箭头表示正常的服务器状态变迁。&lt;/p>
&lt;p>&lt;img src="http://oss.interviewguide.cn/img/202205220036408.png" alt="">&lt;/p>
&lt;h2 id="对称密钥加密的优点缺点">对称密钥加密的优点缺点？&lt;/h2>
&lt;p>对称密钥加密（Symmetric-Key Encryption），加密和解密使用同一密钥。&lt;/p>
&lt;ul>
&lt;li>优点：运算速度快&lt;/li>
&lt;li>缺点：无法安全地将密钥传输给通信方&lt;/li>
&lt;/ul>
&lt;h2 id="非对称密钥加密你了解吗优缺点">非对称密钥加密你了解吗？优缺点？&lt;/h2>
&lt;p>非对称密钥加密，加密和解密使用不同的密钥。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>公钥加密，私钥解密&lt;/strong>。这个目的是为了&lt;strong>保证内容传输的安全&lt;/strong>，因为被公钥加密的内容，其他人是无法解密的，只有持有私钥的人，才能解密出实际的内容；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>私钥加密，公钥解密&lt;/strong>。这个目的是为了&lt;strong>保证消息不会被冒充&lt;/strong>，因为私钥是不可泄露的，如果公钥能正常解密出私钥加密的内容，就能证明这个消息是来源于持有私钥身份的人发送的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>优点：可以更安全地将公开密钥传输给通信发送方；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>缺点：运算速度慢。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="https是什么">HTTPS是什么？&lt;/h2>
&lt;p>HTTPS 并不是新协议，而是让 &lt;strong>HTTP 先和 SSL（Secure Sockets Layer）通信，再由 SSL 和 TCP 通信&lt;/strong>。通过使用 SSL，HTTPS 具有了加密（防窃听）、认证（防伪装）和完整性保护（防篡改）。&lt;/p>
&lt;h2 id="http的缺点有哪些">HTTP的缺点有哪些？&lt;/h2>
&lt;ul>
&lt;li>使用明文进行通信，内容可能会被窃听；&lt;/li>
&lt;li>不验证通信方的身份，通信方的身份有可能遭遇伪装；&lt;/li>
&lt;li>无法证明报文的完整性，报文有可能遭篡改。&lt;/li>
&lt;/ul>
&lt;h2 id="https采用的加密方式有哪些是对称还是非对称">HTTPS采用的加密方式有哪些？是对称还是非对称？&lt;/h2>
&lt;p>HTTPS 采用混合的加密机制，使用&lt;strong>非对称密钥加密用于传输会话密钥来保证传输过程的安全性&lt;/strong>，之后使用&lt;strong>对称密钥加密通信来保证通信过程的效率&lt;/strong>。&lt;/p>
&lt;p>可以说一下ECDHE的过程。&lt;/p>
&lt;h2 id="为什么有的时候刷新页面不需要重新建立-ssl-连接">为什么有的时候刷新页面不需要重新建立 SSL 连接？&lt;/h2>
&lt;p>由于浏览器和服务器之间的持久连接机制。当客户端发送新的请求时，提供了之前建立 SSL 连接时的会话标识符或会话票据，服务器就可以使用这些信息恢复之前的 SSL 会话状态，从而避免重新进行完整的 SSL 握手过程。&lt;/p>
&lt;h2 id="ssl中的认证中的证书是什么了解过吗">SSL中的认证中的证书是什么？了解过吗？&lt;/h2>
&lt;p>一个数字证书通常包含了：&lt;/p>
&lt;ul>
&lt;li>公钥；&lt;/li>
&lt;li>持有者&lt;strong>信息&lt;/strong>；&lt;/li>
&lt;li>证书认证机构（CA）的&lt;strong>信息&lt;/strong>；&lt;/li>
&lt;li>CA 对这份文件的&lt;strong>数字签名&lt;/strong>及使用的&lt;strong>算法&lt;/strong>；&lt;/li>
&lt;li>证书有效期；&lt;/li>
&lt;li>还有一些其他额外信息；&lt;/li>
&lt;/ul>
&lt;p>数字证书的作用，是用来认证公钥持有者的身份，以防止第三方进行冒充。&lt;/p>
&lt;p>扩展
&lt;img src="https://pic.keepjolly.com/halo/blog/2024/01/20240113210112.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="Pasted image 20230908141615">
CA 签发证书的过程，如上图左边部分：&lt;/p>
&lt;ul>
&lt;li>首先 CA 会把持有者的公钥、用途、颁发者、有效时间等信息打成一个包，然后对这些信息进行 Hash 计算，得到一个 Hash 值；&lt;/li>
&lt;li>然后 CA 会使用自己的私钥将该 Hash 值加密，生成 Certificate Signature，也就是 CA 对证书做了签名；&lt;/li>
&lt;li>最后将 Certificate Signature 添加在文件证书上，形成数字证书；&lt;/li>
&lt;/ul>
&lt;p>客户端校验服务端的数字证书的过程，如上图右边部分：&lt;/p>
&lt;ul>
&lt;li>首先客户端会使用同样的 Hash 算法获取该证书的 Hash 值 H1；&lt;/li>
&lt;li>通常浏览器和操作系统中集成了 CA 的公钥信息，浏览器收到证书后可以使用 CA 的公钥解密 Certificate Signature 内容，得到一个 Hash 值 H2 ；&lt;/li>
&lt;li>最后比较 H1 和 H2，如果值相同，则为可信赖的证书，否则则认为证书不可信。&lt;/li>
&lt;/ul>
&lt;h2 id="http如何禁用缓存如何确认缓存">HTTP如何禁用缓存？如何确认缓存？&lt;/h2>
&lt;p>可以通过 Cache-Control 首部字段来控制缓存：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Cache-Control: no-store&lt;/strong>：指示客户端不缓存任何响应，每次请求都要向服务器发送。&lt;/li>
&lt;li>Cache-Control: no-cache：指示客户端在使用缓存前必须先向服务器进行重新验证。&lt;/li>
&lt;/ul>
&lt;p>要确认缓存是否生效，可以使用以下方法之一：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>查看响应头：在HTTP响应中，可以查看响应头中的缓存控制指令和其他相关字段。其中，常见的字段包括：&lt;/p>
&lt;ul>
&lt;li>Cache-Control：指示缓存行为的指令。&lt;/li>
&lt;li>Expires：指示响应的过期时间。&lt;/li>
&lt;li>ETag：用于标识响应内容的唯一标识符。&lt;/li>
&lt;li>Last-Modified：指示响应内容的最后修改时间。&lt;/li>
&lt;/ul>
&lt;p>通过查看这些响应头字段的值，可以了解缓存是否被启用，并确定缓存的相关信息。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="get与post传递数据的最大长度能够达到多少呢">GET与POST传递数据的最大长度能够达到多少呢？&lt;/h2>
&lt;p>HTTP 协议没有GET(URL)和POST(Body)的长度限制，对 URL 限制的大多是浏览器和服务器的原因。&lt;/p>
&lt;p>为了浏览器的兼容性，需要限制url长度，一般情况下最大应为2083字节；服务器是为了性能和安全考虑，会给get、post长度加限制。&lt;/p>
&lt;p>了解：&lt;/p>
&lt;blockquote>
&lt;p>这个限制是特定的浏览器及服务器对它的限制，比如IE对URL长度的限制是2083字节(2K+35字节)。对于其他浏览器，如FireFox，Netscape等，则没有长度限制，这个时候其限制取决于服务器的操作系统；即如果url太长，服务器可能会因为安全方面的设置从而拒绝请求或者发生不完整的数据请求。&lt;/p>
&lt;p>post 理论上讲是没有大小限制的，HTTP协议规范也没有进行大小限制，但实际上post所能传递的数据量大小取决于服务器的设置和内存大小。&lt;/p>
&lt;p>因为我们一般post的数据量很少超过MB的，所以我们很少能感觉的到post的数据量限制，但实际中如果你上传文件的过程中可能会发现这样一个问题，即上传个头比较大的文件到服务器时候，可能上传不上去。&lt;/p>
&lt;p>以php语言来说，查原因的时候你也许会看到有说PHP上传文件涉及到的参数PHP默认的上传有限定，一般这个值是2MB，更改这个值需要更改php.conf的post_max_size这个值。这就很明白的说明了这个问题了。&lt;/p>
&lt;/blockquote>
&lt;h2 id="网络层常见协议可以说一下吗">网络层常见协议？可以说一下吗？&lt;/h2>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2024/01/20240113210118.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="Pasted image 20230908152424">&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Internet Protocol (IP)：IP是互联网的基础协议，负责在网络中传输数据包。&lt;del>它使用IP地址来标识网络上的设备，并提供数据包的路由功能。&lt;/del>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Internet Control Message Protocol (ICMP)：ICMP用于在IP网络中传输控制消息。&lt;del>它主要用于网络故障排除、错误报告和网络状态查询等。&lt;/del>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Internet Group Management Protocol (IGMP)：IGMP是用于在IP网络中管理多播组的协议。&lt;del>它允许主机加入或离开多播组，并与路由器通信以确定多播数据的传输&lt;/del>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Address Resolution Protocol (ARP)：ARP用于将IP地址解析为物理（MAC）地址。&lt;del>当主机需要与目标设备通信时，它可以使用ARP协议来获取目标设备的物理地址。&lt;/del>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Reverse Address Resolution Protocol (RARP)：RARP与ARP相反，它将物理地址解析为IP地址。&lt;del>它可以帮助没有硬盘和操作系统配置的设备（如磁盘less工作站）获取其IP地址。&lt;/del>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Internet Protocol version 6 (IPv6)：IPv6是IP协议的下一代版本，旨在解决IPv4地址耗尽和其他一些限制。它使用128位的地址空间，提供更大的地址容量和其他改进。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="tcp四大拥塞控制算法总结极其重要">TCP四大拥塞控制算法总结？（极其重要）&lt;/h2>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2024/01/20240113210122.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="Pasted image 20230908162813">&lt;/p>
&lt;h3 id="慢启动算法--slow-start">慢启动算法 – Slow Start&lt;/h3>
&lt;p>慢启动是TCP连接刚开始时的拥塞控制算法。
慢启动的算法的规则就是：**每收到一个 ACK，拥塞窗口 cwnd 的大小就会加 1。**呈指数增加。
 &lt;/p>
&lt;blockquote>
&lt;p>慢启动算法：&lt;/p>
&lt;ul>
&lt;li>连接建立完成后，一开始初始化 &lt;code>cwnd = 1&lt;/code>，表示可以传一个 &lt;code>MSS&lt;/code> 大小的数据。&lt;/li>
&lt;li>当收到一个 ACK 确认应答后，cwnd 增加 1，于是一次能够发送 2 个&lt;/li>
&lt;li>当收到 2 个的 ACK 确认应答后， cwnd 增加 2，于是就可以比之前多发2 个，所以这一次能够发送 4 个，呈指数增长。&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>慢启动算法还有一个慢启动门限 &lt;code>ssthresh&lt;/code> （slow start threshold）状态变量。&lt;/p>
&lt;ul>
&lt;li>当 &lt;code>cwnd&lt;/code> &amp;lt; &lt;code>ssthresh&lt;/code> 时，使用慢启动算法。&lt;/li>
&lt;li>当 &lt;code>cwnd&lt;/code> &amp;gt;= &lt;code>ssthresh&lt;/code> 时，就会使用「拥塞避免算法」。&lt;/li>
&lt;/ul>
&lt;p>&lt;del>一般来说 &lt;code>ssthresh&lt;/code> 的大小是 &lt;code>65535&lt;/code> 字节。&lt;/del>&lt;/p>
&lt;h3 id="拥塞避免算法--congestion-avoidance">拥塞避免算法 – Congestion Avoidance&lt;/h3>
&lt;p>当拥塞窗口 &lt;code>cwnd&lt;/code> 「超过」慢启动门限 &lt;code>ssthresh&lt;/code> 就会进入拥塞避免算法。&lt;/p>
&lt;p>进入拥塞避免算法后，它的规则是：&lt;strong>每当收到一个 ACK 时，cwnd 增加 1/cwnd。&lt;/strong>，呈线性增长。&lt;/p>
&lt;blockquote>
&lt;p>接上前面的慢启动的例子，现假定 &lt;code>ssthresh&lt;/code> 为 &lt;code>8&lt;/code>：&lt;/p>
&lt;ul>
&lt;li>当 8 个 ACK 应答确认到来时，每个确认增加 1/8，8 个 ACK 确认 cwnd 一共增加 1，于是这一次能够发送 9 个 &lt;code>MSS&lt;/code> 大小的数据，变成了&lt;strong>线性增长。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>过了慢启动阈值后，拥塞避免算法可以避免窗口增长过快导致窗口拥塞，而是缓慢的增加调整到网络的最佳值，直到出现丢包现象，触发拥塞发生的算法。&lt;/p>
&lt;h3 id="拥塞发生算法">拥塞发生算法&lt;/h3>
&lt;p>当网络出现拥塞，也就是会发生数据包重传，重传机制主要有两种：&lt;/p>
&lt;ul>
&lt;li>超时重传&lt;/li>
&lt;li>快速重传&lt;/li>
&lt;/ul>
&lt;p>超时重传是在发送一个数据以后就开启一个计时器，在指定时间内如果没有收到ACK报文，说明网络拥塞严重，就触发该算法：
将慢启动门限&lt;code>ssthresh&lt;/code> 设为 &lt;code>cwnd/2&lt;/code>，拥塞窗口&lt;code>cwnd&lt;/code> 重置为 cwnd 初始化值(Linux 是10)，进入慢启动算法。
&lt;img src="https://pic.keepjolly.com/halo/blog/2024/01/20240113210129.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="Pasted image 20230908164038">&lt;/p>
&lt;p>快速重传是当发送方连续三次收到前一个包的 ACK，于是发送端就会快速地重传，不必等待超时再重传。
它将拥塞窗口设置为原来的一半，慢启动门限设置为拥塞窗口大小。&lt;/p>
&lt;ul>
&lt;li>&lt;code>cwnd = cwnd/2&lt;/code> ，也就是设置为原来的一半;&lt;/li>
&lt;li>&lt;code>ssthresh = cwnd&lt;/code>;&lt;/li>
&lt;li>进入快速恢复算法&lt;/li>
&lt;/ul>
&lt;h3 id="快速恢复算法--fast-recovery">快速恢复算法 – Fast Recovery&lt;/h3>
&lt;p>快速恢复算法是认为，还能收到 3 个重复 ACK 说明网络也不那么糟糕，他将：&lt;/p>
&lt;ul>
&lt;li>拥塞窗口 &lt;code>cwnd = ssthresh + 3&lt;/code> （ 3 的意思是确认有 3 个重复数据包被收到了）；&lt;/li>
&lt;li>重传丢失的数据包；&lt;/li>
&lt;li>如果再收到重复的 ACK，那么 cwnd 增加 1；&lt;/li>
&lt;li>如果收到新数据的 ACK 后，把 cwnd 设置为 ssthresh 的值，重新进入拥塞避免算法；&lt;/li>
&lt;/ul>
&lt;h2 id="为何快速重传是选择3次ack">为何快速重传是选择3次ACK？&lt;/h2>
&lt;p>主要的考虑还是要区分包的丢失是由于链路故障还是乱序等其他因素引发。&lt;/p></content><category scheme="https://keepjolly.com/posts/" term="posts" label="posts"/><category scheme="https://keepjolly.com/posts/learn/" term="learn" label="learn"/><category scheme="https://keepjolly.com/tags/interview/" term="Interview" label="Interview"/></entry><entry><title type="text">面试之计算机网络-3</title><link rel="alternate" type="text/html" href="https://keepjolly.com/posts/learn/interview-network-3/"/><id>https://keepjolly.com/posts/learn/interview-network-3/</id><updated>2024-01-13T13:59:11+00:00</updated><published>2024-01-13T21:57:09+08:00</published><summary type="html">使用 Session 的过程是怎样的？ 用户进行登录时，提交包含用户名和密码的表单，放入 HTTP 请求报文中；……</summary><content type="html">&lt;h2 id="使用-session-的过程是怎样的">使用 Session 的过程是怎样的？&lt;/h2>
&lt;ol>
&lt;li>用户进行登录时，提交包含用户名和密码的表单，放入 HTTP 请求报文中；&lt;/li>
&lt;li>服务器验证该用户名和密码，如果正确则把用户信息存储到本地中，生成一个 Session ID；&lt;/li>
&lt;li>服务器返回的响应报文的 Set-Cookie 首部字段包含了这个 Session ID，客户端收到响应报文之后将该 Cookie 值存入浏览器中；&lt;/li>
&lt;li>客户端之后对同一个服务器进行请求时会包含该 Cookie 值，服务器收到之后提取出 Session ID，从本地中取出用户信息，继续之前的业务操作。&lt;/li>
&lt;/ol>
&lt;h2 id="session和cookie应该如何去选择适用场景">Session和cookie应该如何去选择（适用场景）？&lt;/h2>
&lt;ul>
&lt;li>Cookie 只能存储 ASCII 码字符串，而 Session 则可以存储任何类型的数据，因此在考虑数据复杂性时首选 Session；&lt;/li>
&lt;li>对于用户状态和敏感数据，应优先使用Session，因为数据存储在服务器端，更安全可靠。&lt;/li>
&lt;li>对于用户偏好设置和非敏感数据，可以使用Cookie，便于在客户端存储和传递，减轻服务器压力。&lt;/li>
&lt;li>需要注意的是，Session和Cookie可以结合使用，例如将Session ID存储在Cookie中，以便在客户端和服务器之间建立关联。&lt;/li>
&lt;/ul>
&lt;h2 id="ddos-攻击了解吗">DDos 攻击了解吗？&lt;/h2>
&lt;p>DDoS (Distributed Denial of Service) 攻击是一种恶意行为，旨在通过&lt;del>超过目标系统处理能力的&lt;/del>大量请求或恶意流量来使目标系统无法正常运行。&lt;/p>
&lt;p>DDos 预防：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>流量分析和监测：实施流量分析和监测系统，以便及时检测和识别异常的网络流量模式。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>防火墙和过滤器：配置防火墙和过滤器以过滤恶意流量并屏蔽来自已知攻击源的访问。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>负载均衡：使用负载均衡设备将流量分散到多个服务器上，减轻单个服务器的负载压力。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>反向代理：使用反向代理服务器来&lt;strong>隐藏真实服务器的IP地址&lt;/strong>，使其更难受到直接的攻击。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>限制连接和频率：防止单个IP地址或用户对系统进行过多的连接或请求&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="mtu和mss分别是什么">MTU和MSS分别是什么？&lt;/h2>
&lt;p>MTU（Maximum Transmission Unit）是指数据链路层所能承载的最大数据包大小，以太网的MTU为1500字节。&lt;/p>
&lt;p>MSS（Maximum Segment Size）表示在TCP传输数据的最大大小。是在建立TCP连接时通过协商确定的。MSS值为MTU值减去IPv4 Header（20 Byte）和TCP header（20 Byte）得到。&lt;/p>
&lt;h2 id="msl和ttl">MSL和TTL？&lt;/h2>
&lt;p>MSL（Maximum Segment Lifetime），它是任何报文在网络上存在的&lt;strong>最长时间&lt;/strong>。&lt;/p>
&lt;p>IP 头中有一个 &lt;code>TTL&lt;/code> 字段，是 IP 数据报可以经过的&lt;strong>最大路由数&lt;/strong>，每经过一个处理他的路由器此值就减 1，当此值为 0 则数据报将被丢弃，同时发送 ICMP 报文通知源主机。&lt;/p>
&lt;p>MSL 与 TTL 的区别： MSL 的单位是时间，而 TTL 是经过路由跳数。所以 &lt;strong>MSL 应该要大于等于 TTL 消耗为 0 的时间&lt;/strong>，以确保报文已被自然消亡。&lt;/p>
&lt;h2 id="http中有个缓存机制但如何保证缓存是最新的呢">HTTP中有个缓存机制，但如何保证缓存是最新的呢？&lt;/h2>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2024/01/20240113205956.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="Pasted image 20230906151203">&lt;/p>
&lt;p>HTTP 缓存有两种实现方式，分别是&lt;strong>强制缓存和协商缓存&lt;/strong>。&lt;/p>
&lt;p>强制缓存：&lt;/p>
&lt;ul>
&lt;li>当浏览器第一次请求访问服务器资源时，服务器会在 Response 头部加上 Cache-Control，表示资源过期时间；&lt;/li>
&lt;li>浏览器再次请求访问服务器中的该资源时，会先比较请求时间与资源过期时间，如果没有过期，则直接使用该缓存，否则重新请求服务器；&lt;/li>
&lt;li>服务器再次收到请求后，会再次更新 Response 头部的 Cache-Control。&lt;/li>
&lt;/ul>
&lt;p>使用 ETag 字段实现的协商缓存的过程：&lt;/p>
&lt;ul>
&lt;li>当浏览器第一次请求访问服务器资源时，服务器在 Response 头部加上 ETag 唯一标识，这个唯一标识的值是根据当前请求的资源生成的；&lt;/li>
&lt;li>当浏览器再次请求访问服务器中的该资源时，首先会先检查强制缓存是否过期：
&lt;ul>
&lt;li>如果没有过期，则直接使用本地缓存；&lt;/li>
&lt;li>如果缓存过期了，会在 Request 头部加上 If-None-Match 字段，该字段的值就是 ETag；&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>服务器再次收到请求后，&lt;strong>会根据请求中的 If-None-Match 值与当前请求的资源生成的唯一标识进行比较&lt;/strong>：
&lt;ul>
&lt;li>&lt;strong>如果值相等，则返回 304 Not Modified，不会返回资源&lt;/strong>；&lt;/li>
&lt;li>如果不相等，则返回 200 状态码和返回资源，并在 Response 头部加上新的 ETag 唯一标识；&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>如果浏览器收到 304 的请求响应状态码，则会从本地缓存中加载资源，否则更新资源。&lt;/li>
&lt;/ul>
&lt;h2 id="tcp头部中有哪些信息">TCP头部中有哪些信息？&lt;/h2>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2024/01/20240113210010.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="Pasted image 20230906161202">&lt;/p>
&lt;ul>
&lt;li>
&lt;p>源端口号、目的端口号&lt;/p>
&lt;/li>
&lt;li>
&lt;p>序号（32bit）：在建立连接时由计算机生成的随机数作为其初始值，每发送一次数据，就「累加」一次该「数据字节数」的大小。用于解决网络包乱序问题。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>确认号（32bit）：指下一次「期望」收到的数据的序列号，&lt;del>发送端收到这个确认应答以后可以认为在这个序号以前的数据都已经被正常接收&lt;/del>。&lt;strong>用来解决丢包的问题。&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>首部长（4bit）：32位系统中一个字等于4个字节，首部长度的单位是字，首部长度字段有4位，所以TCP首部最长为 $2^4 -1 = 15(字) = 60(字节)$。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>标志位（6bit）：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>URG：标志紧急指针是否有效。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ACK：标志确认号是否有效（确认报文段）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>PSH：提示接收端立即从缓冲读走数据。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>RST：表示要求对方重新建立连接（复位报文段）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>SYN：表示请求建立一个连接（连接报文段）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>FIN：表示关闭连接（断开报文段）。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>窗口（16bit）：接收窗口。用于告知对方（发送方）本方的缓冲还能接收多少字节数据。用于解决流量控制。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>校验和（16bit）：接收端用CRC检验整个报文段的完整性。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="常见tcp的连接状态有哪些">常见TCP的连接状态有哪些？&lt;/h2>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2024/01/20240113210046.jpg?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="1">&lt;/p>
&lt;p>&lt;a href="https://blog.csdn.net/chenxiyuehh/article/details/100146419">https://blog.csdn.net/chenxiyuehh/article/details/100146419&lt;/a>&lt;/p>
&lt;ul>
&lt;li>CLOSED：初始关闭状态。&lt;/li>
&lt;li>LISTEN：服务器处于监听状态。&lt;/li>
&lt;li>SYN_SEND：客户端socket执行CONNECT连接，发送SYN包，进入此状态。&lt;/li>
&lt;li>SYN_RECV：服务端收到SYN包并发送服务端SYN包，进入此状态。&lt;/li>
&lt;li>ESTABLISH：表示连接建立。客户端发送了最后一个ACK包后进入此状态，服务端接收到ACK包后进入此状态。&lt;/li>
&lt;li>FIN_WAIT_1：终止连接的一方（通常是客户机）发送了FIN报文后进入。等待对方FIN。&lt;/li>
&lt;li>CLOSE_WAIT：（假设服务器）接收到客户机FIN包之后等待关闭的阶段，发送ACK包给客户机。&lt;del>在接收到对方的FIN包之后，自然是需要立即回复ACK包的，表示已经知道断开请求。但是本方是否立即断开连接（发送FIN包）取决于是否还有数据需要发送给客户端，若有，则在发送FIN包之前均为此状态。&lt;/del>&lt;/li>
&lt;li>FIN_WAIT_2：客户端接收到服务器的ACK包，但并没有立即接收到服务端的FIN包，进入FIN_WAIT_2状态。&lt;/li>
&lt;li>LAST_ACK：服务端发送最后的FIN包，进入此状态，等待最后的客户端ACK响应，进入CLOSE状态。&lt;/li>
&lt;li>TIME_WAIT：客户端收到服务端的FIN包，并立即发出ACK包做最后的确认，在此之后的2MSL时间称为TIME_WAIT状态，之后进入CLOSE状态。&lt;/li>
&lt;/ul>
&lt;h2 id="tcp是什么">TCP是什么？&lt;/h2>
&lt;p>TCP（Transmission Control Protocol 传输控制协议）是一种面向连接的、可靠的、基于字节流的传输层通信协议。&lt;/p>
&lt;h2 id="osi-的七层模型的主要功能">OSI 的七层模型的主要功能？&lt;/h2>
&lt;p>&lt;img src="http://oss.interviewguide.cn/img/202205072300329.png" alt="">&lt;/p>
&lt;ol>
&lt;li>物理层：负责传输比特流，处理物理介质和电信号。&lt;/li>
&lt;li>数据链路层：提供可靠的点对点数据传输，处理帧和物理地址。&lt;/li>
&lt;li>网络层：将数据包从源主机传输到目标主机，处理路由和寻址。&lt;/li>
&lt;li>传输层：提供端到端的可靠数据传输，处理连接和流控制。&lt;/li>
&lt;li>会话层：管理应用程序之间的会话。&lt;/li>
&lt;li>表示层：处理数据的表示和格式转换，提供加密和压缩功能。&lt;/li>
&lt;li>应用层：给用户提供网络应用服务，如HTTP、FTP等。&lt;/li>
&lt;/ol>
&lt;p>**物理层：**利用传输介质为数据链路层提供物理连接，实现比特流的透明传输。
**数据链路层：**接收来自物理层的位流形式的数据，并封装成帧，传送到上一层
**网络层：**将网络地址翻译成对应的物理地址，并通过路由选择算法为分组通过通信子网选择最适当的路径。
**传输层：**在源端与目的端之间提供可靠的透明数据传输
**会话层：**负责在网络中的两节点之间建立、维持和终止通信
**表示层：**处理用户信息的表示问题，数据的编码，压缩和解压缩，数据的加密和解密
**应用层：**为用户的应用进程提供网络通信服务&lt;/p>
&lt;h2 id="应用层常见协议知道多少了解几个">应用层常见协议知道多少？了解几个？&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>协议&lt;/th>
&lt;th>名称&lt;/th>
&lt;th>默认端口&lt;/th>
&lt;th>底层协议&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>HTTP&lt;/td>
&lt;td>超文本传输协议&lt;/td>
&lt;td>80&lt;/td>
&lt;td>TCP&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>HTTPS&lt;/td>
&lt;td>超文本传输安全协议&lt;/td>
&lt;td>443&lt;/td>
&lt;td>TCP&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Telnet&lt;/td>
&lt;td>Teletype远程登录服务的标准协议&lt;/td>
&lt;td>23&lt;/td>
&lt;td>TCP&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>FTP&lt;/td>
&lt;td>文件传输协议&lt;/td>
&lt;td>20传输和21连接&lt;/td>
&lt;td>TCP&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>TFTP&lt;/td>
&lt;td>Trivial File简单文件传输协议&lt;/td>
&lt;td>69&lt;/td>
&lt;td>UDP&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>SMTP&lt;/td>
&lt;td>简单邮件传输协议（发送用）&lt;/td>
&lt;td>25&lt;/td>
&lt;td>TCP&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>POP&lt;/td>
&lt;td>邮局协议（接收用）&lt;/td>
&lt;td>110&lt;/td>
&lt;td>TCP&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>DNS&lt;/td>
&lt;td>域名解析服务&lt;/td>
&lt;td>53&lt;/td>
&lt;td>服务器间进行区域传输的时候用TCP&lt;br/>客户端查询DNS服务器时用 UDP&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="浏览器在与服务器建立了一个-tcp-连接后是否会在一个-http-请求完成后断开什么情况下会断开">浏览器在与服务器建立了一个 TCP 连接后是否会在一个 HTTP 请求完成后断开？什么情况下会断开？&lt;/h2>
&lt;p>如果采取短连接，则在HTTP请求完成后断开。如果采取长连接，则会一直保持TCP连接。当遇到以下情况就会断开：&lt;/p>
&lt;ol>
&lt;li>服务器或浏览器主动关闭连接。&lt;/li>
&lt;li>连接超时或故障。&lt;/li>
&lt;/ol>
&lt;h2 id="三次握手相关内容">三次握手相关内容&lt;/h2>
&lt;p>&lt;img src="http://oss.interviewguide.cn/img/202205072301822.png" alt="">&lt;/p>
&lt;ul>
&lt;li>一开始，客户端和服务端都处于 &lt;code>CLOSE&lt;/code> 状态。先是服务端主动监听某个端口，处于 &lt;code>LISTEN&lt;/code> 状态&lt;/li>
&lt;li>客户端发送SYN包给服务器，其中&lt;code>序列号&lt;/code>字段中填入随机初始化序号(ISN)，把 &lt;code>SYN&lt;/code> 标志位置为 &lt;code>1&lt;/code>。客户端处于 &lt;code>SYN-SENT&lt;/code> 状态。&lt;/li>
&lt;li>服务端收到客户端的 &lt;code>SYN&lt;/code> 报文后，服务端发送SYN+ACK包给客户端。其中&lt;code>序列号&lt;/code>字段中填入随机初始化序号，其次把 &lt;code>确认应答号&lt;/code>字段填入客户端序列号+1，接着把 &lt;code>SYN&lt;/code> 和 &lt;code>ACK&lt;/code> 标志位置为 &lt;code>1&lt;/code>。服务端处于 &lt;code>SYN-RCVD&lt;/code> 状态。&lt;/li>
&lt;li>客户端收到服务端报文后，发送ACK包给服务器将，其中序列号为客户端序列号+1 ，其次&lt;code>确认应答号&lt;/code>字段填入 服务端序列号+1 ， &lt;code>ACK&lt;/code> 标志位置为 &lt;code>1&lt;/code>。这次报文可以携带客户到服务端的数据，之后客户端处于 &lt;code>ESTABLISHED&lt;/code> 状态。&lt;/li>
&lt;li>服务端收到客户端的应答报文后，也进入 &lt;code>ESTABLISHED&lt;/code> 状态。&lt;/li>
&lt;/ul>
&lt;h2 id="为什么需要三次握手两次不行吗">为什么需要三次握手，两次不行吗？&lt;/h2>
&lt;p>通过这个三次握手的过程，双方确保了彼此的接受和发送能力和彼此的初始序列号的确认。这种双向确认可以防止已失效的连接请求被错误地接受，确保了连接建立的可靠性，避免了资源浪费。&lt;/p>
&lt;h2 id="什么是半连接队列">什么是半连接队列？&lt;/h2>
&lt;p>服务器第一次收到客户端的 SYN 之后，此时双方还没有完全建立其连接，服务器会把此种状态下请求连接放在&lt;strong>半连接队列&lt;/strong>。&lt;/p>
&lt;p>扩展：
当然还有一个&lt;strong>全连接队列&lt;/strong>，就是已经完成三次握手，建立起连接的就会放在全连接队列中。如果队列满了就有可能会出现丢包现象。&lt;/p>
&lt;p>这里在补充一点关于&lt;strong>SYN-ACK 重传次数&lt;/strong>的问题： 服务器发送完SYN-ACK包，如果未收到客户确认包，服务器进行首次重传，等待一段时间仍未收到客户确认包，进行第二次重传。如果重传次数超过系统规定的最大重传次数，系统将该连接信息从半连接队列中删除。 注意，每次重传等待的时间不一定相同，一般会是指数增长，例如间隔时间为 1s，2s，4s，8s......&lt;/p>
&lt;h2 id="isninitial-sequence-number是固定的吗">ISN(Initial Sequence Number)是固定的吗？&lt;/h2>
&lt;p>初始化序列号 ISN 由 M + F(localhost, localport, remotehost, remoteport)生成。&lt;/p>
&lt;ul>
&lt;li>&lt;code>M&lt;/code> 是一个计时器，这个计时器每隔 4 微秒加 1。&lt;/li>
&lt;li>&lt;code>F&lt;/code> 是一个 Hash 算法，根据源 IP、目的 IP、源端口、目的端口生成一个随机数值。&lt;/li>
&lt;/ul>
&lt;p>用于防止已失效的连接请求被错误地接受，以及被攻击者得到初始序列号。&lt;/p>
&lt;h2 id="三次握手过程中可以携带数据吗">三次握手过程中可以携带数据吗？&lt;/h2>
&lt;p>其实第三次握手的时候，是可以携带数据的。但是，&lt;strong>第一次、第二次握手不可以携带数据&lt;/strong>&lt;/p>
&lt;p>也就是说，第一次握手不可以放数据，其中一个简单的原因就是&lt;strong>会让服务器更加容易受到攻击了&lt;/strong>。而对于第三次的话，此时客户端已经处于 ESTABLISHED 状态。对于客户端来说，他已经建立起连接了，并且也已经知道服务器的接收、发送能力是正常的了，所以能携带数据。&lt;/p>
&lt;h2 id="syn攻击是什么">SYN攻击是什么？&lt;/h2>
&lt;p>服务器端的资源分配是在二次握手时分配的，而客户端的资源是在完成三次握手时分配的，所以服务器容易受到SYN洪泛攻击。&lt;strong>SYN攻击就是客户端在短时间内伪造大量不存在的IP地址，并向服务器不断地发送SYN包，而服务器将其不断放入半连接队列，直至填满也无法得到客户端ACK响应导致正常请求丢包&lt;/strong>，从而引起网络拥塞甚至系统瘫痪。SYN 攻击是一种典型的 DoS/DDoS 攻击。&lt;/p>
&lt;p>检测 SYN 攻击非常的方便，当你在服务器上看到大量的半连接状态时，特别是源IP地址是随机的，基本上可以断定这是一次SYN攻击。在 Linux/Unix 上可以使用系统自带的 netstat 命令来检测 SYN 攻击。&lt;/p>
&lt;pre tabindex="0">&lt;code>netstat -n -p TCP | grep SYN_RECV
&lt;/code>&lt;/pre>&lt;p>常见的防御 SYN 攻击的方法有如下几种：&lt;/p>
&lt;ul>
&lt;li>缩短超时（SYN Timeout）时间&lt;/li>
&lt;li>过滤网关防护&lt;/li>
&lt;li>SYN cookies技术&lt;/li>
&lt;/ul></content><category scheme="https://keepjolly.com/posts/" term="posts" label="posts"/><category scheme="https://keepjolly.com/posts/learn/" term="learn" label="learn"/><category scheme="https://keepjolly.com/tags/interview/" term="Interview" label="Interview"/></entry><entry><title type="text">面试之计算机网络-2</title><link rel="alternate" type="text/html" href="https://keepjolly.com/posts/learn/interview-network-2/"/><id>https://keepjolly.com/posts/learn/interview-network-2/</id><updated>2024-01-13T13:59:11+00:00</updated><published>2024-01-13T21:56:59+08:00</published><summary type="html">HTTPS是如何保证数据传输的安全，整体的流程是什么？ （SSL是怎么工作保证安全的）……</summary><content type="html">&lt;h2 id="https是如何保证数据传输的安全整体的流程是什么">HTTPS是如何保证数据传输的安全，整体的流程是什么？&lt;/h2>
&lt;p>（SSL是怎么工作保证安全的）&lt;/p>
&lt;p>&lt;a href="https://www.cnblogs.com/fangdada/p/15686204.html">https://www.cnblogs.com/fangdada/p/15686204.html&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2024/01/20240113205804.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="Pasted image 20230906104853">&lt;/p>
&lt;p>ECDHE过程：&lt;/p>
&lt;ol>
&lt;li>客户端首先会发送使用的 &lt;strong>TLS 版本号、支持的密码套件列表，以及生成的随机数&lt;/strong>（&lt;em>Client Random&lt;/em>）&lt;/li>
&lt;li>当服务端收到客户端的消息后，会&lt;strong>确认 TLS 版本号，选择ECDHE密码套件，以及生成随机数&lt;/strong>（&lt;em>Server Random&lt;/em>），并会&lt;strong>发送数字证书给客户端&lt;/strong>。&lt;/li>
&lt;li>然后服务端会选择一个&lt;strong>椭圆曲线&lt;/strong>，如x25519曲线，生成&lt;strong>随机数作为私钥&lt;/strong>，再根据椭圆曲线和私钥计算出服务端的公钥，利用签名算法签名，并将&lt;strong>曲线、公钥和签名&lt;/strong>发送给客户端。&lt;/li>
&lt;li>客户端验证证书是否合法，合法则生成随机数作为客户端私钥，利用私钥和椭圆曲线计算出客户端公钥后发送给服务端。&lt;/li>
&lt;li>双方利用客户端随机数和服务端随机数和ECDHE算出的共享密钥计算出会话密钥来加密通话。互相验证加密和解密是否成功，并且验证消息是否被篡改。&lt;/li>
&lt;li>最后进行HTTP通信。&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2024/01/20240113205816.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="Pasted image 20230906105003">
RSA过程：&lt;/p>
&lt;ol>
&lt;li>客户端首先会发送使用的 TLS 版本号、支持的密码套件列表，以及生成的&lt;strong>随机数（&lt;em>Client Random&lt;/em>）&lt;/strong>&lt;/li>
&lt;li>当服务端收到客户端的消息后，会确认 TLS 版本号，选择RSA密码套件，以及生成&lt;strong>随机数（&lt;em>Server Random&lt;/em>）&lt;/strong>，并会发送数字证书给客户端。&lt;/li>
&lt;li>客户端验证证书是否合法，判断服务器是否真实，取出服务端公钥。&lt;/li>
&lt;li>接着，客户端就会生成一个新的&lt;strong>随机数 (&lt;em>pre-master&lt;/em>)&lt;/strong>，用服务器的公钥加密该随机数，传给服务端。&lt;/li>
&lt;li>然后，利用前面的3个随机数生成「会话密钥」，把之前所有发送的数据做个&lt;strong>摘要&lt;/strong>，用会话密钥（master secret）加密。&lt;/li>
&lt;li>服务器也是同样的操作，如果双方都验证加密和解密没问题，那么握手正式完成。&lt;/li>
&lt;li>最后，就用「会话密钥」加解密 HTTP 请求和响应了。
RSA是缺点是不支持前向保密，一旦服务器的私钥泄漏了，则之前的通信内容就被破解。&lt;/li>
&lt;/ol>
&lt;p>SSL/TLS协议的基本思路是采用公钥加密法，也就是说，客户端先向服务器端索要公钥，然后用公钥加密信息，服务器收到密文后，用自己的私钥解密。&lt;/p>
&lt;h2 id="22如何保证公钥不被篡改">22、如何保证公钥不被篡改？&lt;/h2>
&lt;p>将公钥放在数字证书中。只要证书是可信的，公钥就是可信的。&lt;/p>
&lt;ul>
&lt;li>首先 CA 会把持有者的公钥、用途、颁发者、有效时间等信息打成一个包，然后对这些信息进行 Hash 计算，得到一个 Hash 值；&lt;/li>
&lt;li>然后 CA 会使用自己的私钥将该 Hash 值加密，生成证书签名；&lt;/li>
&lt;li>最后将证书签名添加在文件证书上，形成数字证书；&lt;/li>
&lt;/ul>
&lt;h2 id="公钥加密计算量太大如何减少耗用的时间">公钥加密计算量太大，如何减少耗用的时间？&lt;/h2>
&lt;p>&lt;a href="https://stardust567.github.io/post/84d.html">https://stardust567.github.io/post/84d.html&lt;/a>
解决方法：握手阶段使用非对称加密，通信采取对称加密的方式(使用对话密钥)并且使用ECDHE作为加密套件。&lt;/p>
&lt;h2 id="http请求和响应报文有哪些主要字段">HTTP请求和响应报文有哪些主要字段？&lt;/h2>
&lt;p>请求报文
&lt;a href="https://www.cnblogs.com/biyeymyhjob/archive/2012/07/28/2612910.html">HTTP请求报文和HTTP响应报文&lt;/a>&lt;/p>
&lt;ul>
&lt;li>请求行：Request Line （请求方法、url、协议版本）&lt;/li>
&lt;li>请求头：Request Headers（键值对组成，如host、user-agent、accept）&lt;/li>
&lt;li>请求体：Request Body&lt;/li>
&lt;/ul>
&lt;p>响应报文&lt;/p>
&lt;ul>
&lt;li>状态行：Status Line （协议版本；响应状态代码；状态代码的文本描述）&lt;/li>
&lt;li>响应头：Response Headers（content-type、content-length、server、connection）&lt;/li>
&lt;li>响应体：Response Body&lt;/li>
&lt;/ul>
&lt;h2 id="cookie是什么">Cookie是什么？&lt;/h2>
&lt;p>HTTP 协议是&lt;strong>无状态&lt;/strong>的，HTTP/1.1 引入 Cookie 来保存状态信息。&lt;/p>
&lt;p>Cookie 是&lt;strong>服务器发送到用户浏览器并保存在本地的一小块数据&lt;/strong>，它会在浏览器之后向同一服务器再次发起请求时被携带上，用于告知服务端是否来自同一浏览器。由于之后每次请求都会需要携带 Cookie 数据，因此会带来额外的性能开销（尤其是在移动环境下）。&lt;/p>
&lt;h2 id="cookie有什么用途">Cookie有什么用途？&lt;/h2>
&lt;ul>
&lt;li>会话状态管理（如用户登录状态）&lt;/li>
&lt;li>喜好设置（存储用户偏好等设置，向用户显示喜好内容）&lt;/li>
&lt;li>浏览器行为跟踪（如跟踪分析用户行为等）&lt;/li>
&lt;/ul>
&lt;h2 id="session知识大总结">Session知识大总结&lt;/h2>
&lt;p>除了可以将用户信息通过 Cookie 存储在用户浏览器中，也可以利用 Session 存储在服务器端，存储在服务器端的信息更加安全。&lt;/p>
&lt;p>&lt;del>Session 可以存储在服务器上的文件、数据库或者内存中。也可以将 Session 存储在 Redis 这种内存型数据库中，效率会更高。&lt;/del>&lt;/p>
&lt;p>使用 Session 维护用户登录状态的过程如下：&lt;/p>
&lt;ol>
&lt;li>用户进行登录时，提交包含用户名和密码的表单，放入 HTTP 请求报文中；&lt;/li>
&lt;li>服务器验证该用户名和密码，如果正确则把用户信息存储到本地中，生成一个 Session ID；&lt;/li>
&lt;li>服务器返回的响应报文的 Set-Cookie 首部字段包含了这个 Session ID，客户端收到响应报文之后将该 Cookie 值存入浏览器中；&lt;/li>
&lt;li>客户端之后对同一个服务器进行请求时会包含该 Cookie 值，服务器收到之后提取出 Session ID，从本地中取出用户信息，继续之前的业务操作。&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>注意：Session ID 的安全性问题，不能让它被恶意攻击者轻易获取，那么就不能产生一个容易被猜到的 Session ID 值。此外，还需要经常重新生成 Session ID。在对安全性要求极高的场景下，例如转账等操作，除了使用 Session 管理用户状态之外，还需要对用户进行重新验证，比如重新输入密码，或者使用短信验证码等方式。&lt;/p>
&lt;/blockquote>
&lt;h2 id="session-的工作原理是什么">Session 的工作原理是什么？&lt;/h2>
&lt;p>session 的工作原理是客户端登录完成之后，服务器会创建对应的 session，然后把 session 的 id 发送给客户端，客户端再存储到浏览器中。这样客户端每次访问服务器时，都会带着 session id，服务器拿到 session id 之后，在内存找到与之对应的 session 这样就可以正常工作了。&lt;/p>
&lt;h2 id="cookie与session的对比">Cookie与Session的对比&lt;/h2>
&lt;p>&lt;a href="https://mp.weixin.qq.com/s/cuTmhjnzdngE0EEb5RlbxQ">https://mp.weixin.qq.com/s/cuTmhjnzdngE0EEb5RlbxQ&lt;/a>&lt;/p>
&lt;ul>
&lt;li>存储范围不同，Cookie 保存在客户端(浏览器)，Session 保存在服务器端。&lt;/li>
&lt;li>存储方式的不同，Cookie只能保存 ASCII，Session可以存任意数据类型，比如UserId等。（跟get/post一样）&lt;/li>
&lt;li>存储时限不同，Cookie可设置为长时间保持，比如默认登录功能，Session一般有效时间较短，客户端关闭或者Session超时都会失效。&lt;/li>
&lt;li>存储大小不同， 单个Cookie 保存的数据不能超过 4K，Session可存储数据远高于Cookie。&lt;/li>
&lt;li>隐私策略不同，Cookie存储在客户端，信息容易被窃取;Session存储在服务端，相对安全一些。&lt;/li>
&lt;/ul>
&lt;h2 id="sql注入攻击了解吗">SQL注入攻击了解吗？&lt;/h2>
&lt;p>&lt;a href="https://www.jianshu.com/p/078df7a35671">https://www.jianshu.com/p/078df7a35671&lt;/a>&lt;/p>
&lt;p>攻击者在HTTP请求中注入恶意的SQL代码，服务器使用请求中的参数拼接数据库SQL命令时，恶意SQL被一起拼接，并在数据库中执行。&lt;/p>
&lt;blockquote>
&lt;p>用户登录，输入用户名 123' or 1=1 # ，密码 any ，如果此时使用参数构造的方式，就会出现&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-mysql" data-lang="mysql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">users&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;123&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">or&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">#&amp;#39; and password=&amp;#39;123&amp;#39; or 1=1 #&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>按照 Mysql 语法，# 后面的内容会被忽略。由于判断语句 or 1=1 恒成立，所以结果当然返回真，成功登录。&lt;/p>
&lt;/blockquote>
&lt;h2 id="如何防范sql注入攻击">如何防范SQL注入攻击&lt;/h2>
&lt;p>Web端&lt;/p>
&lt;ul>
&lt;li>有效性检验。&lt;/li>
&lt;li>限制字符串输入的长度。&lt;/li>
&lt;/ul>
&lt;p>服务端&lt;/p>
&lt;ul>
&lt;li>避免使用动态SQL。&lt;/li>
&lt;li>使用预编译的PreparedStatement。&lt;/li>
&lt;li>有效性检验。(为什么服务端还要做有效性检验？第一准则，外部都是不可信的，防止攻击者绕过Web端请求)&lt;/li>
&lt;li>过滤SQL需要的参数中的特殊字符。比如单引号、双引号。&lt;/li>
&lt;/ul>
&lt;h2 id="什么是rarp工作原理">什么是RARP？工作原理&lt;/h2>
&lt;p>概括： 反向地址转换协议，是网络层协议，RARP与ARP工作方式相反。 RARP使只知道自己硬件地址的主机能够知道其IP地址。&lt;/p>
&lt;p>原理：&lt;/p>
&lt;ol>
&lt;li>~~网络上的每台设备都会有一个独一无二的硬件地址。~~主机从网卡上读取MAC地址，然后在网络上发送一个RARP请求的广播数据包。&lt;/li>
&lt;li>RARP服务器响应该RARP请求，为其分配IP地址，并将IP地址发送给主机。&lt;/li>
&lt;li>主机收到RARP回应后，就可以使用得到的IP地址进行通讯。&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>无非就是发包，响应包，得到内容&lt;/p>
&lt;/blockquote>
&lt;h2 id="端口有效范围是多少到多少">端口有效范围是多少到多少？&lt;/h2>
&lt;p>0-1023为知名端口号，比如其中HTTP是80，FTP是20（数据端口）、21（控制端口）&lt;/p>
&lt;p>UDP和TCP报头使用两个字节存放端口号，所以端口号的有效范围是从0到65535。动态端口的范围是从1024到65535&lt;/p>
&lt;h2 id="为何把-tcpip-协议栈分成-5-层或7层开放式回答">为何把 TCP/IP 协议栈分成 5 层（或7层）？开放式回答。&lt;/h2>
&lt;p>分层的好处：&lt;/p>
&lt;ol>
&lt;li>易维护与实现，将一个难以处理的复杂问题分解为若干个较容易处理的更小的问题。&lt;/li>
&lt;li>灵活性好，各层之间是独立的。任何一层发生变化时，只要层间接口关系保持不变，则在这层以上或以下各层均不影响。&lt;/li>
&lt;li>结构上可分割，各层都可以采用最合适的技术实现。&lt;/li>
&lt;li>能促进标准化工作，每一层的功能及其所提供的服务都已有了明确的说明。&lt;/li>
&lt;/ol>
&lt;p>&lt;a href="https://blog.csdn.net/qq_32798897/article/details/121879151">https://blog.csdn.net/qq_32798897/article/details/121879151&lt;/a>&lt;/p>
&lt;h2 id="dns查询方式有哪些">DNS查询方式有哪些？&lt;/h2>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2024/01/20240113205825.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="Pasted image 20230906111735">&lt;/p>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/423222573">https://zhuanlan.zhihu.com/p/423222573&lt;/a>&lt;/p>
&lt;p>递归查询&lt;/p>
&lt;p>递归查询一般发生在 Client 请求 DNS Server。Client 发出一个域名解析的请求，DNS Server 必须返回对应的 IP 地址，或者返回找不到的错误。&lt;/p>
&lt;p>迭代查询&lt;/p>
&lt;p>迭代查询一般发生在 DNS Server 之间，当 Client 发出域名解析的请求后，DNS Server 需要经过多次查询，才能得到相应的结果。比如先找到根服务器、根据根服务器的信息找到顶级域名服务器，再根据顶级域名服务器找到权威服务器，最后根据权威服务器返回结果，或提示错误。&lt;/p>
&lt;p>非递归查询&lt;/p>
&lt;p>非递归查询发生在 Client 和 DNS Server 之间，指的是，请求的 DNS Server 已经知道答案，直接返回。&lt;/p>
&lt;p>&lt;a href="https://juejin.cn/post/6844903900982558734">https://juejin.cn/post/6844903900982558734&lt;/a>&lt;/p>
&lt;h2 id="http中缓存的私有和共有字段知道吗">HTTP中缓存的私有和共有字段？知道吗？&lt;/h2>
&lt;p>响应头中的Cache-Control: private 指令规定了将资源作为私有缓存，只能被&lt;strong>单独用户&lt;/strong>使用，一般存储在&lt;strong>用户浏览器&lt;/strong>中。&lt;/p>
&lt;p>响应头中的Cache-Control:public 指令规定了将资源作为公共缓存，可以被&lt;strong>多个用户&lt;/strong>使用，一般存储在&lt;strong>代理服务器&lt;/strong>中。&lt;/p>
&lt;h2 id="get-方法参数写法是固定的吗">GET 方法参数写法是固定的吗？&lt;/h2>
&lt;p>不固定，只要服务端能够解释出来就行，但一般来说，参数写在url的？后面，键值对用&amp;amp;分离。&lt;/p>
&lt;h2 id="get-方法的长度限制是怎么回事">GET 方法的长度限制是怎么回事？&lt;/h2>
&lt;p>HTTP 协议没有 Body 和 URL 的长度限制，对 URL 限制的大多是浏览器和服务器的原因。&lt;/p>
&lt;p>为了浏览器的兼容性，需要限制url长度；服务器是为了性能和安全考虑，会给 URL 长度加限制。&lt;/p>
&lt;h2 id="post-方法比-get-方法安全">POST 方法比 GET 方法安全？&lt;/h2>
&lt;p>&lt;a href="https://github.com/sisterAn/blog/issues/107">https://github.com/sisterAn/blog/issues/107&lt;/a>&lt;/p>
&lt;p>在 HTTP 协议里，所谓的“安全”是指请求方法不会对服务器上的资源进行修改，“破坏”服务器上的资源。&lt;/p>
&lt;p>按照这种定义，GET 请求方法是安全的，它对服务器资源执行的仅仅是只读操作，也是幂等的&lt;/p>
&lt;blockquote>
&lt;p>幂等指多次执行相同的操作，结果也都是相同的，即多次“幂”后结果“相等”&lt;/p>
&lt;/blockquote>
&lt;p>POST 请求方法是不安全的，它会修改服务器上的资源，“新增或提交数据”，多次提交数据会创建多个资源，所以不是幂等的&lt;/p>
&lt;p>总结：&lt;/p>
&lt;ul>
&lt;li>GET：安全，幂等&lt;/li>
&lt;li>POST：不安全，不幂等&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>对于传输来说，GET 和 POST 报文在传输上都是不安全的，因为 HTTP 在网络上是明文传输的，想要安全传输就得加密，也就是 HTTPS&lt;/p>
&lt;/blockquote>
&lt;h2 id="post-方法会产生两个-tcp-数据包你了解吗">POST 方法会产生两个 TCP 数据包？你了解吗？&lt;/h2>
&lt;p>大多数框架都是尽量在一个 TCP 包里面把 HTTP 请求发出去的，但是也确实存在先发 HTTP 头，然后发 body 的框架。但是具体发多少个TCP包，这个 &lt;strong>不是 HTTP 协议的事情是操作系统 TCP 协议栈与代码的问题，跟 HTTP 没关系&lt;/strong>&lt;/p></content><category scheme="https://keepjolly.com/posts/" term="posts" label="posts"/><category scheme="https://keepjolly.com/posts/learn/" term="learn" label="learn"/><category scheme="https://keepjolly.com/tags/interview/" term="Interview" label="Interview"/></entry><entry><title type="text">面试之计算机网络-1</title><link rel="alternate" type="text/html" href="https://keepjolly.com/posts/learn/interview-network-1/"/><id>https://keepjolly.com/posts/learn/interview-network-1/</id><updated>2024-01-13T13:59:11+00:00</updated><published>2024-01-13T21:56:32+08:00</published><summary type="html">未标明出处的，均来自小林coding、阿秀的学习笔记、GPT3.5 OSI 的七层模型分别是……</summary><content type="html">&lt;p>未标明出处的，均来自&lt;a href="https://xiaolincoding.com/">小林coding&lt;/a>、&lt;a href="https://interviewguide.cn/">阿秀的学习笔记&lt;/a>、&lt;a href="https://poe.com/">GPT3.5&lt;/a>&lt;/p>
&lt;h2 id="osi-的七层模型分别是各自的功能是什么">OSI 的七层模型分别是？各自的功能是什么？&lt;/h2>
&lt;ol>
&lt;li>物理层：负责传输比特流，处理物理介质和电信号。&lt;/li>
&lt;li>数据链路层：提供可靠的点对点数据传输，处理帧和物理地址。&lt;/li>
&lt;li>网络层：将数据包从源主机传输到目标主机，处理路由和寻址。&lt;/li>
&lt;li>传输层：提供端口到端口的可靠数据传输，处理连接和流控制。&lt;/li>
&lt;li>会话层：管理应用程序之间的会话。&lt;/li>
&lt;li>表示层：处理数据的表示和格式转换，提供加密和压缩功能。&lt;/li>
&lt;li>应用层：给用户提供网络应用服务，如HTTP、FTP等。&lt;/li>
&lt;/ol>
&lt;p>说明&lt;/p>
&lt;ul>
&lt;li>传输层数据被称作&lt;strong>tcp报文段或udp用户数据报&lt;/strong>（Segments）；&lt;/li>
&lt;li>网络层数据被称做&lt;strong>包&lt;/strong>（Packages）；&lt;/li>
&lt;li>数据链路层数据被称为&lt;strong>帧&lt;/strong>（Frames）；&lt;/li>
&lt;li>物理层数据被称为&lt;strong>比特流&lt;/strong>（Bits）。&lt;/li>
&lt;/ul>
&lt;p>总结&lt;/p>
&lt;ul>
&lt;li>网络七层模型是一个标准，而非实现。&lt;/li>
&lt;li>网络四层模型是一个实现的应用模型。&lt;/li>
&lt;li>网络四层模型由七层模型简化合并而来。&lt;/li>
&lt;/ul>
&lt;h2 id="一次完整的http请求过程">一次完整的HTTP请求过程？&lt;/h2>
&lt;blockquote>
&lt;ul>
&lt;li>根据域名，进行DNS域名解析；&lt;/li>
&lt;li>拿到解析的IP地址，建立TCP连接；&lt;/li>
&lt;li>向IP地址发送HTTP请求；&lt;/li>
&lt;li>服务器处理请求，返回响应结果；&lt;/li>
&lt;li>浏览器解析HTML；&lt;/li>
&lt;li>浏览器渲染页面；&lt;/li>
&lt;li>关闭TCP连接；&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="dns是">DNS是？&lt;/h2>
&lt;p>DNS（Domain Name System，域名系统），是因特网上作为&lt;strong>域名和IP地址相互映射&lt;/strong>的一个&lt;strong>分布式数据库&lt;/strong>，能够使用户更方便的访问互联网。&lt;/p>
&lt;h2 id="dns的工作原理">DNS的工作原理？&lt;/h2>
&lt;p>将主机域名转换为ip地址，属于应用层协议，使用UDP传输。（DNS应用层协议，以前有个考官问过）&lt;/p>
&lt;p>&lt;img src="http://oss.interviewguide.cn/img/202205220036790.png" alt="">
过程：
总结： 浏览器缓存，系统缓存，路由器缓存，IPS服务器缓存，根域名服务器缓存，顶级域名服务器缓存，主域名服务器缓存。
&lt;del>一、主机向本地域名服务器的查询一般都是采用递归查询。
二、本地域名服务器向根域名服务器的查询的迭代查询。&lt;/del>&lt;/p>
&lt;ol>
&lt;li>当用户输入域名时，浏览器先检查自己的缓存中是否包含这个域名映射的ip地址，有解析结束。&lt;/li>
&lt;li>若没命中，则检查操作系统缓存（如Windows的hosts）中有没有解析过的结果，有解析结束。&lt;/li>
&lt;li>若无命中，则请求本地域名服务器递归解析（LDNS）。&lt;/li>
&lt;li>若LDNS没有命中就进行迭代解析。请求根域名服务器，根域名服务器返回给LDNS一个顶级域名服务器地址。&lt;/li>
&lt;li>此时LDNS再发送请求给顶级域名服务器， 接受请求的顶级域名服务器查找并返回这个域名对应的权威服务器的地址&lt;/li>
&lt;li>LDNS再请求权威服务器，接受的权威服务器根据映射关系表找到目标ip，返回给LDNS&lt;/li>
&lt;li>LDNS缓存这个域名和对应的ip， 把解析的结果返回给用户，用户再缓存到本地系统缓存中。&lt;/li>
&lt;/ol>
&lt;h2 id="为什么域名解析用udp协议">为什么域名解析用UDP协议？&lt;/h2>
&lt;p>客户端向DNS服务器查询域名，一般返回的内容都&lt;a href="https://taifua.com/udp-512bytes-limit.html">不超过512字节&lt;/a>，用UDP传输即可。不用经过TCP三次握手，这样DNS服务器负载更低，响应更快。在某些情况下，域名解析可能会使用TCP来处理较为复杂的查询或处理大型响应。&lt;/p>
&lt;h2 id="为什么区域传送用tcp协议">为什么区域传送用TCP协议？&lt;/h2>
&lt;p>区域传送（Zone Transfer）是指将一个DNS域的完整副本从一个DNS服务器传输到另一个DNS服务器的过程。需要确保可靠性和完整性，并且这个副本往往包含大量数据，适合用TCP传输。&lt;/p>
&lt;h2 id="http长连接和短连接的区别">HTTP长连接和短连接的区别&lt;/h2>
&lt;p>长连接：长连接，指在一个连接上可以处理多个请求，在连接保持期间，如果没有数据包发送，需要双方发链路检测包。&lt;/p>
&lt;p>短连接：指的是一个连接上只能处理一个请求，之后断开此连接，即每次连接只完成一项业务的发送。&lt;/p>
&lt;p>长连接的优点是减少了连接的建立和关闭的开销，节省了时间和资源。它可以提高性能和效率，特别是在需要频繁通信的场景下。然而，长连接也需要维护连接的状态和资源，可能会导致服务器负担增加。&lt;/p>
&lt;h2 id="什么是tcp粘包拆包发生的原因">什么是TCP粘包/拆包？发生的原因？&lt;/h2>
&lt;p>一个完整的业务可能会被TCP拆分成多个包进行发送，也有可能把多个小的包封装成一个大的数据包发送，这个就是TCP的拆包和粘包问题。&lt;/p>
&lt;p>原因&lt;/p>
&lt;p>1、应用程序写入数据的字节大小大于套接字发送缓冲区的大小.&lt;/p>
&lt;p>2、进行MSS大小的TCP分段。( MSS=TCP报文段长度-TCP首部长度)&lt;/p>
&lt;p>3、进行MTU大小的IP分片。&lt;/p>
&lt;p>解决方案&lt;/p>
&lt;p>1、消息定长。&lt;/p>
&lt;p>2、在包尾部增加回车或者空格符等特殊字符进行分割&lt;/p>
&lt;p>3、将消息分为消息头和消息尾&lt;/p>
&lt;h2 id="为什么服务器会缓存如何实现的">为什么服务器会缓存?如何实现的？&lt;/h2>
&lt;p>&lt;strong>原因&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>缓解服务器压力；&lt;/li>
&lt;li>降低客户端获取资源的延迟~~：缓存通常位于内存中，读取缓存的速度更快。并且缓存服务器在地理位置上也有可能比源服务器来得近，例如浏览器缓存。~~&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>实现方法&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>让代理服务器进行缓存；&lt;/li>
&lt;li>让客户端浏览器进行缓存。&lt;/li>
&lt;/ul>
&lt;h2 id="http请求方法你知道多少">HTTP请求方法你知道多少？&lt;/h2>
&lt;p>客户端发送的 &lt;strong>请求报文&lt;/strong> 第一行为请求行，包含了请求方法字段。&lt;/p>
&lt;p>HTTP1.0 定义了三种请求方法： GET, POST 和 HEAD方法。&lt;/p>
&lt;p>HTTP1.1 新增了六种请求方法：OPTIONS、PUT、PATCH、DELETE、TRACE 和 CONNECT 方法。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">序 号&lt;/th>
&lt;th style="text-align:left">方法&lt;/th>
&lt;th style="text-align:left">描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">1&lt;/td>
&lt;td style="text-align:left">GET&lt;/td>
&lt;td style="text-align:left">【&lt;strong>获取资源&lt;/strong>】请求指定的页面信息，并返回实体主体。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">2&lt;/td>
&lt;td style="text-align:left">HEAD&lt;/td>
&lt;td style="text-align:left">【&lt;strong>获得报文首部&lt;/strong>】类似于 GET 请求，只不过返回的响应中没有具体的内容，用于获取报头&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">3&lt;/td>
&lt;td style="text-align:left">POST&lt;/td>
&lt;td style="text-align:left">【&lt;strong>传输实体文本&lt;/strong>】向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。&lt;strong>POST 请求可能会导致新的资源的建立和/或已有资源的修改&lt;/strong>。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">4&lt;/td>
&lt;td style="text-align:left">PUT&lt;/td>
&lt;td style="text-align:left">【&lt;strong>传输文件&lt;/strong>】从客户端向服务器传送的数据取代指定的文档的内容。PUT通常指定了资源的存放位置，而POST则没有&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">5&lt;/td>
&lt;td style="text-align:left">DELETE&lt;/td>
&lt;td style="text-align:left">【&lt;strong>删除文件&lt;/strong>】请求服务器删除指定的页面。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">6&lt;/td>
&lt;td style="text-align:left">CONNECT&lt;/td>
&lt;td style="text-align:left">【&lt;strong>要求用管道协议连接代理服务器&lt;/strong>】HTTP/1.1 协议中预留给能够将连接改为管道方式的代理服务器。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">7&lt;/td>
&lt;td style="text-align:left">OPTIONS&lt;/td>
&lt;td style="text-align:left">【&lt;strong>询问支持的方法&lt;/strong>】客户端询问服务器可以提交哪些请求方法。这个方法很有趣，它用于获取当前URL所支持的方法。若请求成功，则它会在HTTP头中包含一个名为“Allow”的头，值是所支持的方法，如“GET, POST”。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">8&lt;/td>
&lt;td style="text-align:left">TRACE&lt;/td>
&lt;td style="text-align:left">【&lt;strong>追踪路径&lt;/strong>】回显服务器收到的请求，主要用于测试或诊断。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">9&lt;/td>
&lt;td style="text-align:left">PATCH&lt;/td>
&lt;td style="text-align:left">【&lt;strong>局部更新文件&lt;/strong>】是对 PUT 方法的补充，用来对已知资源进行局部更新 。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;a href="https://blog.csdn.net/demo_yo/article/details/123596028">https://blog.csdn.net/demo_yo/article/details/123596028&lt;/a>&lt;/p>
&lt;h2 id="get-和-post-的区别你知道哪些">GET 和 POST 的区别，你知道哪些？&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>get是请求数据，post是传输实体文本，可能导致新资源的建立或者已有资源的修改&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;del>get提交的数据有限制最大是2k（ 限制实际上取决于浏览器）， post理论上没有限制。&lt;/del>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>GET请求会被浏览器主动缓存，而POST不会，除非手动设置。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>本质区别：GET是幂等的，而POST不是幂等的&lt;/p>
&lt;/li>
&lt;li>
&lt;p>GET只允许ASCII字符，POST没有限制。&lt;/p>
&lt;blockquote>
&lt;p>这里的幂等性：幂等性是指一次和多次请求某一个资源应该具有同样的副作用。简单来说意味着对同一URL的多个请求应该返回同样的结果。
正因为它们有这样的区别，所以不应该且&lt;strong>不能用get请求做数据的增删改这些有副作用的操作&lt;/strong>。因为get请求是幂等的，&lt;strong>在网络不好的隧道中会尝试重试&lt;/strong>。如果用get请求增数据，会有&lt;strong>重复操作&lt;/strong>的风险，而这种重复操作可能会导致副作用（浏览器和操作系统并不知道你会用get请求去做增操作）。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ol>
&lt;h2 id="一个tcp连接可以对应几个http请求">一个TCP连接可以对应几个HTTP请求？&lt;/h2>
&lt;p>如果是长连接，一个 TCP 连接是可以发送多个 HTTP 请求的。如果关闭长连接，则只能一对一。&lt;/p>
&lt;h2 id="一个-tcp-连接中-http-请求发送可以一起发送么">一个 TCP 连接中 HTTP 请求发送可以一起发送么？&lt;/h2>
&lt;p>（比如一起发三个请求，再三个响应一起接收）&lt;/p>
&lt;p>如果采用的是HTTP1.1,是不可行的，单个TCP连接在同一时刻只能处理一个请求，如果开启管道（pipelining）技术则可以实现多个http请求。&lt;/p>
&lt;p>如果采用的是http2则是可行的，因为http2具备多路复用（multiplexing）的功能，多个 HTTP 请求可以在同一个 TCP 连接中并行处理。&lt;/p>
&lt;blockquote>
&lt;p>那么在 HTTP/1.1 时代，浏览器是如何提高页面加载效率的呢？主要有下面两点：&lt;/p>
&lt;ul>
&lt;li>维持和服务器已经建立的 TCP 连接，在同一连接上顺序处理多个请求。&lt;/li>
&lt;li>和服务器建立多个 TCP 连接。&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="浏览器对同一-host-建立-tcp-连接的数量有没有限制">浏览器对同一 Host 建立 TCP 连接的数量有没有限制？&lt;/h2>
&lt;p>&lt;strong>有。Chrome 最多允许对同一个 Host 建立六个 TCP 连接。不同的浏览器有一些区别。&lt;/strong>&lt;/p>
&lt;p>拓展：
如果图片都是 HTTPS 连接并且在同一个域名下，那么浏览器在 SSL 握手之后会和服务器商量能不能用 HTTP2，如果能的话就使用 Multiplexing 功能在这个连接上进行多路传输。不过也未必会所有挂在这个域名的资源都会使用一个 TCP 连接去获取，但是可以确定的是 Multiplexing 很可能会被用到。&lt;/p>
&lt;p>如果发现用不了 HTTP2 呢？或者用不了 HTTPS（现实中的 HTTP2 都是在 HTTPS 上实现的，所以也就是只能使用 HTTP/1.1）。那浏览器就会在一个 HOST 上建立多个 TCP 连接，连接数量的最大限制取决于浏览器设置，这些连接会在空闲的时候被浏览器用来发送新的请求，如果所有的连接都正在发送请求呢？那其他的请求就只能等等了。&lt;/p>
&lt;h2 id="在浏览器中输入url地址后显示主页的过程">在浏览器中输入url地址后显示主页的过程?&lt;/h2>
&lt;blockquote>
&lt;ul>
&lt;li>根据域名，进行DNS域名解析；&lt;/li>
&lt;li>拿到解析的IP地址，建立TCP连接；&lt;/li>
&lt;li>向IP地址发送HTTP请求；&lt;/li>
&lt;li>服务器处理请求，返回响应结果；&lt;/li>
&lt;li>浏览器解析HTML；&lt;/li>
&lt;li>浏览器渲染页面；&lt;/li>
&lt;li>关闭TCP连接；&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="在浏览器地址栏输入一个url后回车背后会进行哪些技术步骤">在浏览器地址栏输入一个URL后回车，背后会进行哪些技术步骤？&lt;/h2>
&lt;p>&lt;a href="https://mp.weixin.qq.com/s/9vGRSkUNgRQWO6tVmUisOw">https://mp.weixin.qq.com/s/9vGRSkUNgRQWO6tVmUisOw&lt;/a>&lt;/p>
&lt;p>应用层：&lt;/p>
&lt;ul>
&lt;li>浏览器封装 HTTP 请求报文&lt;/li>
&lt;li>DNS 解析域名获得目标服务器地址&lt;/li>
&lt;/ul>
&lt;p>传输层：&lt;/p>
&lt;ul>
&lt;li>建立连接&lt;/li>
&lt;li>将HTTP请求封装成TCP或UDP包（将HTTP 请求报文进行分割，并在各个报文上加入标记序号及端口号）&lt;/li>
&lt;/ul>
&lt;p>网络层：&lt;/p>
&lt;ul>
&lt;li>利用 ARP 协议根据 IP 地址获取目的地的 MAC 地址后将数据包转发给链路层进行传输&lt;/li>
&lt;/ul>
&lt;p>服务端在链路层收到数据，按序往上层发送拆包，一直到应用层接收到浏览器发送来的 HTTP 请求报文，然后处理该请求并返回 HTTP 响应报文，浏览器接收到响应报文之后解析渲染界面。最后 TCP 断开连接。&lt;/p>
&lt;h2 id="dns负载均衡是什么策略">DNS负载均衡是什么策略？&lt;/h2>
&lt;p>当一个网站有足够多的用户的时候，假如每次请求的资源都位于同一台机器上面，那么这台机器随时可能会崩掉。处理办法就是用DNS负载均衡技术，它的原理是在&lt;strong>DNS服务器中为同一个主机名配置多个IP地址,在应答对该主机的DNS查询时,DNS服务器利用这些IP地址引导到不同的机器上去,使得不同的客户端访问不同的服务器&lt;/strong>,从而达到负载均衡的目的｡例如可以根据每台机器的负载量，该机器离用户地理位置的距离等等。&lt;/p>
&lt;h2 id="https和http的区别">HTTPS和HTTP的区别&lt;/h2>
&lt;ul>
&lt;li>HTTP 是超文本传输协议，信息是明文传输，存在安全风险的问题。HTTPS 则解决 HTTP 不安全的缺陷，在 TCP 和 HTTP 网络层之间加入了 SSL/TLS 安全协议，使得报文能够加密传输。&lt;/li>
&lt;li>HTTP 连接建立相对简单。而 HTTPS 在 TCP 三次握手之后，还需进行 SSL/TLS 的握手过程，才可进入加密报文传输。&lt;/li>
&lt;li>两者的默认端口不一样，HTTP 默认端口号是 80，HTTPS 默认端口号是 443。&lt;/li>
&lt;li>&lt;del>HTTPS 协议需要向 CA（证书权威机构）申请数字证书，来保证服务器的身份是可信的。&lt;/del>&lt;/li>
&lt;/ul>
&lt;h2 id="什么是ssltls-">什么是SSL/TLS ？&lt;/h2>
&lt;p>TLS协议采用&lt;a href="https://zh.wikipedia.org/wiki/%E4%B8%BB%E5%BE%9E%E5%BC%8F%E6%9E%B6%E6%A7%8B" title="主从式架构">主从式架构&lt;/a>模型，用于防止两个应用程序在交换数据时受到窃听及篡改。&lt;/p>
&lt;p>TLS协议的优势是与高层的&lt;a href="https://zh.wikipedia.org/wiki/%E5%BA%94%E7%94%A8%E5%B1%82" title="应用层">应用层&lt;/a>协议（如&lt;a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE" title="超文本传输协议">HTTP&lt;/a>、&lt;a href="https://zh.wikipedia.org/wiki/%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE" title="文件传输协议">FTP&lt;/a>、&lt;a href="https://zh.wikipedia.org/wiki/Telnet" title="Telnet">Telnet&lt;/a>等）无耦合。应用层协议传输的数据在通过TLS协议时都会被加密，从而保证通信的私密性。&lt;/p>
&lt;p>SSL/TLS协议作用：认证用户和服务，加密数据，维护数据的完整性。&lt;/p></content><category scheme="https://keepjolly.com/posts/" term="posts" label="posts"/><category scheme="https://keepjolly.com/posts/learn/" term="learn" label="learn"/><category scheme="https://keepjolly.com/tags/interview/" term="Interview" label="Interview"/></entry><entry><title type="text">面试之CPP基础知识-8</title><link rel="alternate" type="text/html" href="https://keepjolly.com/posts/learn/interview-basic-cpp-8/"/><id>https://keepjolly.com/posts/learn/interview-basic-cpp-8/</id><updated>2024-01-13T13:59:11+00:00</updated><published>2024-01-13T21:56:13+08:00</published><summary type="html">类的对象存储空间？ 类的非静态成员变量大小，静态成员不占据类的空间，成员函数也不占据类……</summary><content type="html">&lt;h2 id="类的对象存储空间">类的对象存储空间？&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>类的非静态成员变量大小，静态成员不占据类的空间，成员函数也不占据类的空间大小；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>内存对齐另外分配的空间大小；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>虚函数会在类对象插入vptr指针，加上指针大小；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>基类的数据成员也会存在派生类中的空间。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="简要说明c的内存分区">简要说明C++的内存分区&lt;/h2>
&lt;p>C++中的内存分区，分别是堆、栈、全局/静态存储区、常量存储区和代码区。如下图所示&lt;/p>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2024/01/20240113210303.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="Pasted image 20230927121914">&lt;/p>
&lt;p>&lt;strong>栈&lt;/strong>：在执行函数时，函数内局部变量的存储单元都可以在栈上创建，函数执行结束时这些存储单元自动被释放。栈内存分配运算内置于处理器的指令集中，效率很高，但是分配的内存容量有限&lt;/p>
&lt;p>&lt;strong>堆&lt;/strong>：由 &lt;code>new&lt;/code>分配的内存块，需要应用程序去控制，&lt;code>new&lt;/code>和 &lt;code>delete&lt;/code>要对应。如果程序员没有释放掉，那么在程序结束后，操作系统会自动回收&lt;/p>
&lt;p>&lt;strong>全局/静态存储区&lt;/strong>：全局变量和静态变量被分配到同一块内存中，~~在以前的C语言中，全局变量和静态变量又分为初始化的和未初始化的，在C++里面没有这个区分了，~~在该区定义的变量若没有初始化，则会被自动初始化，例如int型变量自动初始为0&lt;/p>
&lt;p>&lt;strong>常量存储区&lt;/strong>：这是一块比较特殊的存储区，这里面存放的是常量，不允许修改&lt;/p>
&lt;p>&lt;strong>代码区&lt;/strong>：存放函数体的二进制代码&lt;/p>
&lt;h2 id="什么是内存池如何实现">什么是内存池，如何实现&lt;/h2>
&lt;ul>
&lt;li>内存池（Memory Pool）是一种动态内存分配与管理技术，通常情况下，程序员习惯直接使用new，delete，malloc,free等API申请和释放内存，这样导致的后果就是：当程序运行的时间很长的时候，由于所申请的内存块的大小不定，频繁使用时会造成大量的内存碎片从而降低程序和操作系统的性能。&lt;/li>
&lt;li>内存池则是在真正使用内存之前，先申请分配一大块内存（内存池）留作备用。当程序员申请内存时，从池中取出一块动态分配，当程序员释放时，将释放的内存放回到池内，再次申请，就可以从池里取出来使用，并尽量与周边的空闲内存块合并。若内存池不够时，则自动扩大内存池，从操作系统中申请更大的内存池。&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/523216209">https://zhuanlan.zhihu.com/p/523216209&lt;/a>&lt;/p>
&lt;h2 id="可以说一下你了解的c得内存管理吗">可以说一下你了解的C++得内存管理吗？&lt;/h2>
&lt;p>在C++中，内存分成5个区，他们分别是堆、栈、全局/静态存储区和常量存储区和代码区。&lt;/p>
&lt;p>&lt;strong>栈&lt;/strong>：在执行函数时，函数内局部变量的存储单元都可以在栈上创建，函数执行结束时这些存储单元自动被释放。栈内存分配运算内置于处理器的指令集中，效率很高，但是分配的内存容量有限&lt;/p>
&lt;p>&lt;strong>堆&lt;/strong>：由 &lt;code>new&lt;/code>分配的内存块，需要应用程序去控制，&lt;code>new&lt;/code>和 &lt;code>delete&lt;/code>要对应。如果程序员没有释放掉，那么在程序结束后，操作系统会自动回收&lt;/p>
&lt;p>&lt;strong>全局/静态存储区&lt;/strong>：全局变量和静态变量被分配到同一块内存中，~~在以前的C语言中，全局变量和静态变量又分为初始化的和未初始化的，在C++里面没有这个区分了，~~在该区定义的变量若没有初始化，则会被自动初始化，例如int型变量自动初始为0&lt;/p>
&lt;p>&lt;strong>常量存储区&lt;/strong>：这是一块比较特殊的存储区，这里面存放的是常量，不允许修改&lt;/p>
&lt;p>&lt;strong>代码区&lt;/strong>：存放函数体的二进制代码&lt;/p>
&lt;h2 id="c中类的数据成员和成员函数内存分布情况">C++中类的数据成员和成员函数内存分布情况&lt;/h2>
&lt;p>类的首地址为声明的第一个成员变量的地址。成员变量保存在栈或堆中，成员函数保存在&lt;strong>代码段&lt;/strong>。&lt;/p>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/512762755">https://zhuanlan.zhihu.com/p/512762755&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Person&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Person&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">age&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">23&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">printAge&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">age&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">~&lt;/span>&lt;span class="n">Person&lt;/span>&lt;span class="p">(){}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">age&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Person&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;对象地址：&amp;#34;&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">p&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;age地址：&amp;#34;&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">age&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;对象大小：&amp;#34;&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//输出结果
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//对象地址：0x7fffec0f15a8
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//age地址：0x7fffec0f15a8
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//对象大小：8
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>所有函数&lt;/strong>都存放在代码区，静态函数也不例外。一看到 static 这个单词就主观的认为是存放在全局数据区，那是不对的。&lt;/p>
&lt;h2 id="关于this指针你知道什么">关于this指针你知道什么？&lt;/h2>
&lt;ol>
&lt;li>&lt;code>this&lt;/code> 指针是一个隐含于每一个非静态成员函数中的特殊指针。它指向调用该成员函数的那个对象。&lt;/li>
&lt;li>&lt;code>this&lt;/code> 指针被隐含地声明为: &lt;code>ClassName *const this&lt;/code>，这意味着&lt;strong>不能给 &lt;code>this&lt;/code>指针赋值&lt;/strong>&lt;/li>
&lt;li>&lt;code>this&lt;/code> 并不是一个常规变量，而&lt;strong>是个右值&lt;/strong>，所以&lt;strong>不能取得 &lt;code>this&lt;/code>的地址&lt;/strong>。&lt;/li>
&lt;li>this在成员函数的开始执行前构造，在成员函数的执行结束后清除。&lt;/li>
&lt;li>A a; a.fun(); // aka a.fun(this)&lt;/li>
&lt;li>在以下场景中，经常需要使用 &lt;code>this&lt;/code> 指针：
&lt;ol>
&lt;li>为实现对象的&lt;a href="https://juejin.cn/post/6991016494561755173">链式引用&lt;/a>；&lt;/li>
&lt;li>为避免对同一对象进行赋值操作；&lt;/li>
&lt;li>在实现一些数据结构时，如 &lt;code>list&lt;/code>。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h2 id="内存泄漏的后果如何监测解决方法">内存泄漏的后果？如何监测？解决方法？&lt;/h2>
&lt;p>你觉得会问吗&lt;/p>
&lt;p>&lt;strong>1) 内存泄漏&lt;/strong>&lt;/p>
&lt;p>内存泄漏是指由于疏忽或错误造成了程序未能释放掉不再使用的内存的情况，导致程序无法再次利用这段内存。&lt;/p>
&lt;p>&lt;strong>2) 后果&lt;/strong>&lt;/p>
&lt;p>只发生一次小的内存泄漏可能不被注意，但泄漏大量内存的程序将会出现各种症状：性能下降到内存逐渐用完，导致另一个程序失败；&lt;/p>
&lt;p>&lt;strong>3) 如何排除&lt;/strong>&lt;/p>
&lt;p>使用工具软件BoundsChecker，BoundsChecker是一个运行时错误检测工具，它主要定位程序运行时期发生的各种错误；&lt;/p>
&lt;p>调试运行DEBUG版程序，运用以下技术：CRT(C run-time libraries)、运行时函数调用堆栈、内存泄漏时提示的内存分配序号(集成开发环境OUTPUT窗口)，综合分析内存泄漏的原因，排除内存泄漏。&lt;/p>
&lt;p>&lt;strong>4) 解决方法&lt;/strong>&lt;/p>
&lt;p>智能指针。&lt;/p>
&lt;p>&lt;strong>5) 检查、定位内存泄漏&lt;/strong>&lt;/p>
&lt;p>检查方法：在main函数最后面一行，加上一句_CrtDumpMemoryLeaks()。调试程序，自然关闭程序让其退出，查看输出：&lt;/p>
&lt;p>输出这样的格式{453}normal block at 0x02432CA8,868 bytes long&lt;/p>
&lt;p>被{}包围的453就是我们需要的内存泄漏定位值，868 bytes long就是说这个地方有868比特内存没有释放。&lt;/p>
&lt;p>定位代码位置&lt;/p>
&lt;p>在main函数第一行加上_CrtSetBreakAlloc(453);意思就是在申请453这块内存的位置中断。然后调试程序，程序中断了，查看调用堆栈。加上头文件#include &amp;lt;crtdbg.h&amp;gt;&lt;/p>
&lt;h2 id="在成员函数中调用delete-this会出现什么问题对象还可以使用吗">在成员函数中调用delete this会出现什么问题？对象还可以使用吗？&lt;/h2>
&lt;p>当 调用delete this时，类对象的内存空间被释放。在delete this之后进行的其他任何函数调用，只要不涉及到this指针的内容，都能够正常运行。一旦涉及到this指针，如&lt;strong>操作数据成员，调用虚函数&lt;/strong>等，就会出现&lt;strong>不可预期&lt;/strong>的问题。&lt;/p>
&lt;p>为什么是不可预期的问题？&lt;/p>
&lt;p>这个问题牵涉到操作系统的内存管理策略。delete this释放了类对象的内存空间，但是内存空间却并&lt;strong>不是马上被回收到系统中&lt;/strong>，可能是缓冲或者其他什么原因，导致这段内存空间暂时并没有被系统收回。此时这段内存是可以访问的，你可以加上100，加上200，但是其中的值却是不确定的。当你获取数据成员，可能得到的是一串很长的未初始化的随机数；访问虚函数表，指针无效的可能性非常高，造成系统崩溃。&lt;/p>
&lt;p>在析构函数中调用delete this 会导致堆栈溢出，因为delete调用析构，而析构再次调用delete。&lt;/p>
&lt;p>&lt;a href="https://blog.csdn.net/qq_39661275/article/details/106373853">https://blog.csdn.net/qq_39661275/article/details/106373853&lt;/a>&lt;/p>
&lt;h2 id="你知道空类的大小是多少吗">你知道空类的大小是多少吗？&lt;/h2>
&lt;p>笔试做到过&lt;/p>
&lt;ol>
&lt;li>空类(没有非静态数据成员)的对象的&lt;a href="https://www.zhihu.com/question/266041176">size为1&lt;/a>, 当作为基类时, size为0。因为标准规定是0，因为每个类需要独一无二的地址，防止出现除0错误。&lt;/li>
&lt;li>带有虚函数的C++类大小不为1，因为每一个对象会有一个vptr指向虚函数表，具体大小根据指针大小确定；&lt;/li>
&lt;/ol>
&lt;h2 id="这几个类的大小是多少">这几个类的大小是多少？&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">A&lt;/span> &lt;span class="p">{};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">B&lt;/span>&lt;span class="p">{&lt;/span> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">func&lt;/span>&lt;span class="p">(){}&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">C&lt;/span>&lt;span class="p">{&lt;/span> &lt;span class="k">static&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">// 输出 1;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">cout&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">// 输出 8;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">cout&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">C&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">// 输出 1;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="this指针调用成员变量时堆栈会发生什么变化">this指针调用成员变量时，堆栈会发生什么变化？&lt;/h2>
&lt;p>this指针首先入栈，然后成员函数的参数从右向左进行入栈，最后函数返回地址入栈。&lt;/p>
&lt;h2 id="类对象的大小受哪些因素影响">类对象的大小受哪些因素影响？&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>类的非静态成员变量大小，静态成员不占据类的空间，成员函数也不占据类的空间大小；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>内存对齐另外分配的空间大小；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>虚函数会在类对象插入vptr指针，加上指针大小；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>基类的数据成员也会存在派生类中的空间。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://baiy.cn/doc/cpp/inside_rtti.htm">http://baiy.cn/doc/cpp/inside_rtti.htm&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol></content><category scheme="https://keepjolly.com/posts/" term="posts" label="posts"/><category scheme="https://keepjolly.com/posts/learn/" term="learn" label="learn"/><category scheme="https://keepjolly.com/tags/interview/" term="Interview" label="Interview"/></entry><entry><title type="text">面试之CPP基础知识-7</title><link rel="alternate" type="text/html" href="https://keepjolly.com/posts/learn/interview-basic-cpp-7/"/><id>https://keepjolly.com/posts/learn/interview-basic-cpp-7/</id><updated>2024-01-13T13:59:11+00:00</updated><published>2024-01-13T21:55:47+08:00</published><summary type="html">static_cast比C语言中的转换强在哪里？ 在编译期间就能发现转换错误 更容易检索……</summary><content type="html">&lt;h2 id="static_cast比c语言中的转换强在哪里">static_cast比C语言中的转换强在哪里？&lt;/h2>
&lt;ul>
&lt;li>在编译期间就能发现转换错误&lt;/li>
&lt;li>更容易检索到何处强制转换&lt;/li>
&lt;li>不同的转换类型体现程序员的意图&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://blog.csdn.net/liji_digital/article/details/123148607">https://blog.csdn.net/liji_digital/article/details/123148607&lt;/a>&lt;/p>
&lt;h2 id="成员函数里memsetthis0sizeofthis会发生什么">成员函数里memset(this,0,sizeof(*this))会发生什么&lt;/h2>
&lt;p>有时候类里面定义了很多int,char,struct等c语言里的那些类型的变量，但是一句句的写太麻烦，在构造函数用memset(this, 0, sizeof *this);中&lt;strong>将基本类型成员变量一次性初始化为0&lt;/strong>，但是下面几种情形是不可以这么使用的：&lt;/p>
&lt;ul>
&lt;li>类含有虚函数表：这么做会破坏虚函数表，后续对虚函数的调用都将出现异常；&lt;/li>
&lt;li>类中含有C++类型的对象：例如，类中定义了一个list的对象，由于在构造函数体的代码执行之前就对list对象完成了初始化，假设list在它的构造函数里分配了内存，那么我们这么一做就破坏了list对象的内存。&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://www.nowcoder.com/search/all?query=memset%28this,%200,%20sizeof%28%2athis%29%29&amp;amp;type=all">https://www.nowcoder.com/search/all?query=memset%28this,%200,%20sizeof%28%2athis%29%29&amp;amp;type=all&lt;/a>&lt;/p>
&lt;h2 id="回调函数是作用">回调函数是？作用？&lt;/h2>
&lt;p>&lt;strong>回调函数是做为参数传递的一种函数&lt;/strong>&lt;/p>
&lt;p>回调函数的创建步骤大概为：&lt;/p>
&lt;p>1，声明一个函数指针类型。&lt;/p>
&lt;p>2，实现一个使用回调函数的函数，将函数指针作为参数传递。&lt;/p>
&lt;p>3，实现一个符合函数指针类型的函数，将该函数的指针作为参数传递给使用它的函数。&lt;/p>
&lt;p>或者使用C++标准库的function和bind。std::funtion定义函数类型(输入、输出)，std::bind绑定特定的函数（具体的要调用的函数）（对于普通函数直接将函数名给function即可）。&lt;/p>
&lt;p>作用：把调用者与被调用者分开。调用者不关心谁是被调用者，它只需知道存在一个满足其需求的被调用函数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// std::function&amp;lt;returnType(argType, argType，...)&amp;gt; func;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// std::bind(&amp;amp;funcName, std::placeholders::_1, ...);
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 类：std::bind(&amp;amp;className::funcName, classPtr, std::placeholders::_1, ...);
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">BrainToolBox&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">Add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">bool&lt;/span> &lt;span class="nf">CompareInt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">function&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">bool&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">compareFunc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">CompareInt&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">BrainToolBox&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">brain&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">make_shared&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">BrainToolBox&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">function&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">addFunc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">bind&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">BrainToolBox&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Add&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">brain&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">placeholders&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">_1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">placeholders&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">_2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">　　 &lt;span class="kt">int&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">addFunc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;c Value: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">EXIT_SUCCESS&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;a href="https://www.airchip.org.cn/index.php/2022/03/05/cpp-example-callback/">https://www.airchip.org.cn/index.php/2022/03/05/cpp-example-callback/&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://blog.csdn.net/zhoupian/article/details/119495949">https://blog.csdn.net/zhoupian/article/details/119495949&lt;/a>&lt;/p>
&lt;h2 id="什么是一致性哈希">什么是一致性哈希？&lt;/h2>
&lt;p>大厂双非硕简历过不了，不看。小厂就说不知道。&lt;/p>
&lt;h2 id="c从代码到可执行程序经历了什么">C++从代码到可执行程序经历了什么？&lt;/h2>
&lt;p>（1）预编译&lt;/p>
&lt;p>&lt;strong>对源代码文件中的头文件、预编译语句（宏定义）进行分析和替换，生成预编译.ii文件。&lt;/strong> 处理规则见下：&lt;/p>
&lt;ol>
&lt;li>删除所有的#define，展开所有的宏定义。&lt;/li>
&lt;li>处理所有的条件预编译指令，如“#if”、“#endif”、“#ifdef”、“#elif”和“#else”。&lt;/li>
&lt;li>处理“#include”预编译指令，将文件内容替换到它的位置，这个过程是递归进行的，文件中包含其他文件。&lt;/li>
&lt;li>删除所有的注释，“//”和“/**/”。&lt;/li>
&lt;li>保留所有的#pragma 编译器指令，编译器需要用到他们，如：#pragma once 是为了防止有文件被重复引用。&lt;/li>
&lt;li>添加行号和文件标识，便于编译时编译器产生调试用的行号信息，和编译时产生编译错误或警告是能够显示行号。&lt;/li>
&lt;/ol>
&lt;p>（2）编译&lt;/p>
&lt;p>&lt;strong>把预编译生成的文件，进行一系列词法分析、语法分析、语义分析及优化后，生成相应的汇编代码.s文件。&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>词法分析：利用类似于“有限状态机”的算法，将源代码程序输入到扫描机中，将其中的字符序列分割成一系列的记号。&lt;/li>
&lt;li>语法分析：语法分析器对由扫描器产生的记号，进行语法分析，产生语法树。由语法分析器输出的语法树是一种以表达式为节点的树。&lt;/li>
&lt;li>语义分析：语法分析器只是完成了对表达式语法层面的分析，语义分析器则对表达式是否有意义进行判断，其分析的语义是静态语义——在编译期能分期的语义，相对应的动态语义是在运行期才能确定的语义。&lt;/li>
&lt;li>优化：源代码级别的一个优化过程。&lt;/li>
&lt;li>目标代码生成：由代码生成器将中间代码转换成目标机器代码，生成一系列的代码序列——汇编语言表示。&lt;/li>
&lt;li>目标代码优化：目标代码优化器对上述的目标机器代码进行优化：寻找合适的寻址方式、使用位移来替代乘法运算、删除多余的指令等。&lt;/li>
&lt;/ol>
&lt;p>（3）汇编&lt;/p>
&lt;p>&lt;strong>将汇编文件转化成机器码，生成可重定位目标文件&lt;/strong>xxx.o(Linux下)、xxx.obj(Window下)。只是根据汇编指令和机器指令的对照表一一翻译过来，汇编过程有汇编器as完成。&lt;/p>
&lt;p>（4）链接&lt;/p>
&lt;p>&lt;strong>将多个目标文件及所需要的库链接成最终的可执行目标文件(.out或.exe文件)。&lt;/strong> 又分为静态链接和动态链接&lt;/p>
&lt;ul>
&lt;li>
&lt;p>目标文件&lt;/p>
&lt;ul>
&lt;li>可执行目标文件：可以直接在内存中执行；&lt;/li>
&lt;li>可重定位目标文件：可与其它可重定位目标文件在链接阶段合并，创建一个可执行目标文件；&lt;/li>
&lt;li>共享目标文件：这是一种特殊的可重定位目标文件，可以在运行时被动态加载进内存并链接；&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>静态链接&lt;/p>
&lt;ul>
&lt;li>函数和数据被编译进一个二进制文件。在使用静态库的情况下，在链接可执行文件时，链接器从库中复制这些函数和数据并把它们和应用程序的其它模块组合起来创建最终的可执行文件。&lt;/li>
&lt;li>空间浪费：因为每个可执行程序中对所有需要的目标文件都要有一份副本，所以如果多个程序对同一个目标文件都有依赖，会出现同一个目标文件都在内存存在多个副本；&lt;/li>
&lt;li>更新困难：每当库函数的代码修改了，这个时候就需要重新进行编译链接形成可执行程序。&lt;/li>
&lt;li>运行速度快：但是静态链接的优点就是，在可执行程序中已经具备了所有执行程序所需要的任何东西，在执行的时候运行速度快。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>动态链接&lt;/p>
&lt;ul>
&lt;li>动态链接的基本思想是把程序按照模块拆分成各个相对独立部分，在程序运行时才将它们链接在一起形成一个完整的程序，而不是像静态链接一样把所有程序模块都链接成一个单独的可执行文件。&lt;/li>
&lt;li>共享库：每个程序都依赖同一个库，但是该库不会像静态链接那样在内存中存在多份副本，而是这多个程序在执行时共享同一份副本；&lt;/li>
&lt;li>更新方便：更新时只需要替换原来的目标文件，而无需将所有的程序再重新链接一遍。当程序下一次运行时，新版本的目标文件会被自动加载到内存并且链接起来，程序就成了升级的目标。&lt;/li>
&lt;li>性能损耗：因为把链接推迟到了程序运行时，所以每次执行程序都需要进行链接，所以性能会有一定损失。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="为什么友元函数必须在类内部声明">为什么友元函数必须在类内部声明？&lt;/h2>
&lt;p>因为这样友元函数才能知道访问的是哪个类的私有成员。&lt;/p>
&lt;h2 id="友元函数和友元类的基本情况">友元函数和友元类的基本情况&lt;/h2>
&lt;p>通过友元可以&lt;strong>访问类中的私有成员和保护成员&lt;/strong>。友元的正确使用能提高程序的运行效率（即减少了类型检查和安全性检查等需要的时间开销），但同时也破坏了类的封装性和隐藏性，导致程序可维护性变差。&lt;/p>
&lt;p>&lt;strong>友元关系是单向的&lt;/strong>（若要互为友元，必须显式地互相声明为友元）&lt;strong>，不可继承、不可相互推导&lt;/strong>。&lt;/p>
&lt;p>1）友元函数&lt;/p>
&lt;p>友元函数分为普通函数和类成员函数。普通函数只需要在类内声明友元函数，并在类外实现函数即可。类成员函数需要先实现一个需要访问另一个类的私有成员的类，然后再使用friend关键字在另一个类中声明这些成员函数。&lt;/p>
&lt;p>具体过程如下：&lt;/p>
&lt;ol>
&lt;li>声明一个Me对象&lt;/li>
&lt;li>在MyFriend类中定义一个使用Me的私有成员的成员函数&lt;/li>
&lt;li>在Me类中声明MyFriend类中某些函数为友元函数&lt;/li>
&lt;li>这是在h，cpp分别实现的过程&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;span class="lnt">74
&lt;/span>&lt;span class="lnt">75
&lt;/span>&lt;span class="lnt">76
&lt;/span>&lt;span class="lnt">77
&lt;/span>&lt;span class="lnt">78
&lt;/span>&lt;span class="lnt">79
&lt;/span>&lt;span class="lnt">80
&lt;/span>&lt;span class="lnt">81
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//MyFriend.h 声明 包含类成员函数作为友元函数 的类
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#pragma once
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Me&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//声明包含类成员友元函数的类
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">MyFriend&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">MyFriend&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">){};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">printMe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Me&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">pt&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">double&lt;/span> &lt;span class="nf">calcDist&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Me&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">Me&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// ----------------------------------
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//Me.h 声明原始类Me
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#pragma once
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;MyFriend.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Me&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//若此处不声明友元函数，则MyFriend类里对应的函数报错：不能访问Me私有变量
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">friend&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">MyFriend&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">printMe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Me&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">pt&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">friend&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">MyFriend&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">calcDist&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Me&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">Me&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">friend&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">globalFunc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Me&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Me&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">double&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">double&lt;/span> &lt;span class="n">mX&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">double&lt;/span> &lt;span class="n">mY&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// ----------------------------------
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//Me.cpp 定义原始类
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;Me.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="n">Me&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Me&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">double&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mX&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mY&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// ----------------------------------
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//MyFriend.cpp
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;MyFriend.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;cmath&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//在cpp中包含 原始类 头文件
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;Me.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="n">MyFriend&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">printMe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Me&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">pt&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;(&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">pt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">mX&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;, &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">pt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">mY&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;)&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">double&lt;/span> &lt;span class="n">MyFriend&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">calcDist&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Me&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">Me&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">double&lt;/span> &lt;span class="n">deltX&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">mX&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">mX&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">double&lt;/span> &lt;span class="n">deltY&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">mY&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">mY&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nf">sqrt&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="n">deltX&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">deltX&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">deltY&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">deltY&lt;/span> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// ----------------------------------
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//main.cpp
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;Me.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">globalFunc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Me&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;friend Global Func &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">mX&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34; &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">mY&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Me&lt;/span> &lt;span class="n">p1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">1.0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">4.0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Me&lt;/span> &lt;span class="n">p2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">6.0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">8.0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">MyFriend&lt;/span> &lt;span class="n">pc&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">printMe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">printMe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">double&lt;/span> &lt;span class="n">dist&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">calcDist&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">p1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="s">&amp;#34;Distance between p1 and p2 is &amp;#34;&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">dist&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">globalFunc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>一个函数可以是多个类的友元函数，但是每个类中都要声明这个函数。&lt;/p>
&lt;p>2）友元类&lt;/p>
&lt;p>当在某类中声明一个友元类，则该类中的所有成员均可以被友元类访问。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">A&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">friend&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">C&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 这是友元类的声明
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">C&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// 友元类定义，为了访问类A中的成员
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">set_show&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">A&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">data&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">class&lt;/span> &lt;span class="nc">A&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">class&lt;/span> &lt;span class="nc">C&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">set_show&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;a href="https://blog.csdn.net/softworlds/article/details/101053577">https://blog.csdn.net/softworlds/article/details/101053577&lt;/a>&lt;/p>
&lt;h2 id="c实现c的三大特性">C实现C++的三大特性&lt;/h2>
&lt;ul>
&lt;li>封装：使用函数指针把属性与方法封装到结构体中&lt;/li>
&lt;li>继承：结构体嵌套&lt;/li>
&lt;li>多态：子类使用函数指针绑定父类同名函数&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;a href="https://blog.csdn.net/shanshangyouzhiyangM/article/details/79622480">C语言实现C++的三大特性&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h2 id="动态编译与静态编译">动态编译与静态编译&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>静态编译：所有代码和库函数的实现都被复制到最终的可执行文件中，使可执行文件在运行时不需要依赖于外部库和环境。优点是运行速度快，缺点是空间浪费大，更新代码不方便，每次需要重新编译。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>动态编译：可执行文件在运行时，需要调用对应动态链接库的命令。优点是缩小了执行文件的体积，以及加快了编译速度，节省了系统资源。缺点是必须有对应动态库才能运行。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;a href="https://www.cnblogs.com/lisuyun/p/3953589.html">https://www.cnblogs.com/lisuyun/p/3953589.html&lt;/a>&lt;/p>
&lt;hr>
&lt;p>静态链接器以一组可重定位目标文件为输入，生成一个完全链接的可执行目标文件作为输出。链接器主要完成以下两个任务：&lt;/p>
&lt;ul>
&lt;li>符号解析：每个符号对应于一个函数、一个全局变量或一个静态变量，符号解析的目的是将每个符号引用与一个符号定义关联起来。&lt;/li>
&lt;li>重定位：链接器通过把每个符号定义与一个内存位置关联起来，然后修改所有对这些符号的引用，使得它们指向这个内存位置。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="http://oss.interviewguide.cn/img/202205212343130.png" alt="">&lt;/p>
&lt;p>静态库有以下两个问题：&lt;/p>
&lt;ul>
&lt;li>当静态库更新时那么整个程序都要重新进行链接；&lt;/li>
&lt;li>对于 printf 这种标准函数库，如果每个程序都要有代码，这会极大浪费资源。&lt;/li>
&lt;/ul>
&lt;p>共享库是为了解决静态库的这两个问题而设计的，在 Linux 系统中通常用 .so 后缀来表示，Windows 系统上它们被称为 DLL。它具有以下特点：&lt;/p>
&lt;ul>
&lt;li>在给定的文件系统中一个库只有一个文件，所有引用该库的可执行目标文件都共享这个文件，它不会被复制到引用它的可执行文件中；&lt;/li>
&lt;li>在内存中，一个共享库的 .text 节（已编译程序的机器代码）的一个副本可以被不同的正在运行的进程共享。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="http://oss.interviewguide.cn/img/202205212343182.png" alt="">&lt;/p>
&lt;h2 id="helloc-程序的编译过程">hello.c 程序的编译过程&lt;/h2>
&lt;p>这个过程大致如下：&lt;/p>
&lt;p>&lt;img src="http://oss.interviewguide.cn/img/202205212343505.png" alt="">&lt;/p>
&lt;ul>
&lt;li>预编译阶段：对源代码文件中的头文件、预编译语句（宏定义）进行分析和替换，生成预编译.ii文件；&lt;/li>
&lt;li>编译阶段：把预编译生成的文件，进行一系列词法分析、语法分析、语义分析及优化后，生成相应的汇编代码.s文件；&lt;/li>
&lt;li>汇编阶段：将编译阶段生成的汇编文件转化成机器码，生成可重定位目标文件；&lt;/li>
&lt;li>链接阶段：将多个目标文件及所需要的库链接成最终的可执行目标文件(.out或.exe文件)。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>源代码－－&amp;gt;预处理－－&amp;gt;编译－－&amp;gt;优化－－&amp;gt;汇编－－&amp;gt;链接--&amp;gt;可执行文件&lt;/strong>&lt;/p>
&lt;p>&lt;a href="https://www.cnblogs.com/fuhang/p/8917395.html">g++ 编译单个文件和多个文件&lt;/a>&lt;/p>
&lt;h2 id="介绍一下几种典型的锁">介绍一下几种典型的锁&lt;/h2>
&lt;p>&lt;strong>读写锁&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>多个读者可以同时进行读&lt;/li>
&lt;li>写者必须互斥（只允许一个写者写，也不能读者写者同时进行）&lt;/li>
&lt;li>写者优先于读者（一旦有写者，则后续读者必须等待，唤醒时优先考虑写者）&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>互斥锁&lt;/strong>&lt;/p>
&lt;p>一次只能一个线程拥有互斥锁，其他线程只能休眠等待&lt;/p>
&lt;p>&lt;strong>条件变量&lt;/strong>&lt;/p>
&lt;p>条件变量用于阻塞线程，当条件满足就会唤醒一个被阻塞线程。（使用while判断条件，防止线程被虚假唤醒）&lt;/p>
&lt;p>&lt;a href="https://blog.csdn.net/yizhiniu_xuyw/article/details/109635912">https://blog.csdn.net/yizhiniu_xuyw/article/details/109635912&lt;/a>&lt;/p>
&lt;p>&lt;strong>自旋锁&lt;/strong>&lt;/p>
&lt;p>如果线程无法取得锁，线程不会立刻放弃CPU时间片，而是一直循环尝试获取锁，直到获取为止。如果别的线程长时期占有锁那么自旋就是在浪费CPU做无用功。但是自旋锁一般应用于加锁时间很短的场景，这个时候效率比较高。&lt;/p>
&lt;h2 id="delete和delete区别">delete和delete[]区别？&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>delete只会调用一次析构函数。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>delete[]会调用数组中每个元素的析构函数。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="为什么不能把所有的函数写成内联函数">为什么不能把所有的函数写成内联函数?&lt;/h2>
&lt;p>内联函数以代码复杂为代价，省去函数调用的开销来提高执行效率。所以一方面如果内联函数体内代码执行时间相比&lt;strong>函数调用&lt;/strong>开销较大，则没有太大的意义；另一方面每一处内联函数的调用都要复制代码，消耗更多的内存空间，因此以下情况不宜使用内联函数：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>函数体内的代码比较长，将导致内存消耗代价&lt;/p>
&lt;/li>
&lt;li>
&lt;p>函数体内有循环，函数执行时间要比函数调用开销大&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="为什么c没有垃圾回收机制这点跟java不太一样">为什么C++没有垃圾回收机制？这点跟Java不太一样。&lt;/h2>
&lt;ol>
&lt;li>性能：垃圾回收机制需要额外的内存和计算资源，这会引入一定的开销。&lt;del>C++的设计目标之一是提供高效的性能，垃圾回收机制可能会对程序的性能产生负面影响。因此，C++没有内置的垃圾回收机制，以便程序员自行管理内存等资源。&lt;/del>&lt;/li>
&lt;li>控制：C++强调程序的可预测性和确定性。垃圾回收机制会增加程序的复杂性和不确定性。&lt;/li>
&lt;li>生命周期管理：C++注重对资源的显式管理，可以精确地控制资源的生命周期，避免资源的浪费。&lt;/li>
&lt;/ol>
&lt;p>&lt;a href="https://www.cnblogs.com/codemagiciant/p/17601843.html">https://www.cnblogs.com/codemagiciant/p/17601843.html&lt;/a>&lt;/p></content><category scheme="https://keepjolly.com/posts/" term="posts" label="posts"/><category scheme="https://keepjolly.com/posts/learn/" term="learn" label="learn"/><category scheme="https://keepjolly.com/tags/interview/" term="Interview" label="Interview"/></entry><entry><title type="text">面试之CPP基础知识-6</title><link rel="alternate" type="text/html" href="https://keepjolly.com/posts/learn/interview-basic-cpp-6/"/><id>https://keepjolly.com/posts/learn/interview-basic-cpp-6/</id><updated>2024-01-13T13:59:11+00:00</updated><published>2024-01-13T21:55:29+08:00</published><summary type="html">int main(int argc, char *argv[])里的参数，你了解吗？ 参数的含义是程序在命令行下运行的时候，输……</summary><content type="html">&lt;h2 id="int-mainint-argc-char-argv里的参数你了解吗">int main(int argc, char *argv[])里的参数，你了解吗？&lt;/h2>
&lt;p>参数的含义是程序在命令行下运行的时候，输入了argc 个参数，每个参数以char*类型存入 argv[]，第一个参数为程序的名称。&lt;/p>
&lt;h2 id="volatile关键字的作用">volatile关键字的作用？&lt;/h2>
&lt;p>volatile 关键字是一种类型修饰符，用它声明的类型变量表示可以被某些编译器未知的因素更改，系统总是重新从它所在的内存读取数据。可以用在多线程中，每次读取到修改后的值。&lt;/p>
&lt;h2 id="103如果有一个空类它会默认添加哪些函数">103、如果有一个空类，它会默认添加哪些函数？&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Empty&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 缺省构造函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">Empty&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">Empty&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="p">);&lt;/span> &lt;span class="c1">// 拷贝构造函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="o">~&lt;/span>&lt;span class="n">Empty&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 析构函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">Empty&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">Empty&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="p">);&lt;/span> &lt;span class="c1">// 赋值运算符
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">Empty&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 取址运算符
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Empty&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 取址运算符 const
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>只有你需要用到这些函数并且你又没有显示的声明这些函数的时候，编译器才会贴心的自动声明相应的函数。&lt;/p>
&lt;p>&lt;a href="https://developer.aliyun.com/article/3763">https://developer.aliyun.com/article/3763&lt;/a>&lt;/p>
&lt;h2 id="c中标准库是什么">C++中标准库是什么？&lt;/h2>
&lt;p>C++ 标准库可以分为两部分：&lt;/p>
&lt;p>标准函数库： 这个库是由通用的、独立的、不属于任何类的函数组成的。函数库继承自 C 语言。&lt;/p>
&lt;ul>
&lt;li>输入/输出 I/O、字符串和字符处理、数学、时间、日期和本地化、动态分配、其他、宽字符函数&lt;/li>
&lt;/ul>
&lt;p>面向对象类库： 这个库是类及其相关函数的集合。&lt;/p>
&lt;ul>
&lt;li>标准的 C++ I/O 类、String 类、数值类、STL 容器类、STL 算法、STL 函数对象、STL 迭代器、STL 分配器、本地化库、异常处理类、杂项支持库&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://www.runoob.com/cplusplus/cpp-standard-library.html">https://www.runoob.com/cplusplus/cpp-standard-library.html&lt;/a>&lt;/p>
&lt;h2 id="const-char-与string之间的关系">const char* 与string之间的关系？&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>string 是c++标准库提供的字符串类，封装了对字符串的操作&lt;/p>
&lt;/li>
&lt;li>
&lt;p>const char *是指向一个常量字符串的指针&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可以用const char*给string类初始化，用string.c_str()给const char *初始化。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>三者的转化关系如下所示：&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// a) string转const char*
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;abc&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">c_s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">c_str&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// b) const char* 转string，直接赋值即可
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">c_s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;abc&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">string&lt;/span> &lt;span class="nf">s&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c_s&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// c) string 转char*
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;abc&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">len&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">length&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">len&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">strcpy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">c_str&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// d) char* 转string
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;abc&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">string&lt;/span> &lt;span class="nf">s&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// e) const char* 转char*
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">cpc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;abc&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">pc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">strlen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cpc&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">strcpy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pc&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">cpc&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// f) char* 转const char*，直接赋值即可
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;abc&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">cpc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="你什么情况用指针当参数什么时候用引用为什么">你什么情况用指针当参数，什么时候用引用，为什么？&lt;/h2>
&lt;p>用指针的情况一是你考虑到存在不指向任何对象的可能（在这种情况下，你能够设置指针为空），二是你需要能够在不同的时刻指向不同的对象（在这种情况下，你能改变指针的指向），其他情况一般都使用引用，它可以避免判断是否为空提高效率，并且不会像普通的值传递还需要拷贝实参。&lt;/p>
&lt;p>&lt;a href="https://blog.csdn.net/wyg1065395142">https://blog.csdn.net/wyg1065395142&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://blog.csdn.net/lyd_253261362">https://blog.csdn.net/lyd_253261362&lt;/a>&lt;/p>
&lt;h2 id="静态绑定和动态绑定">静态绑定和动态绑定？&lt;/h2>
&lt;ul>
&lt;li>静态类型：对象在声明时采用的类型，在编译期既已确定；&lt;/li>
&lt;li>动态类型：通常是指一个指针或引用，目前所指对象的类型，是在&lt;a href="https://blog.csdn.net/m0_37264397/article/details/76697237">运行期&lt;/a>决定的；&lt;/li>
&lt;li>静态绑定：绑定的是静态类型，所对应的函数或属性依赖于对象的静态类型，发生在编译期；&lt;/li>
&lt;li>动态绑定：绑定的是动态类型，所对应的函数或属性依赖于对象的动态类型，发生在运行期；
&lt;ul>
&lt;li>在继承体系中只有虚函数使用的是动态绑定，其他的全部是静态绑定；&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="如何设计一个计算仅单个子类的对象个数">如何设计一个计算仅单个子类的对象个数？&lt;/h2>
&lt;p>1、为类设计一个static静态变量count作为计数器；&lt;/p>
&lt;p>2、类外初始化count;&lt;/p>
&lt;p>3、在构造函数~~、拷贝构造函数、赋值构造函数~~中对count进行+1;&lt;/p>
&lt;p>4、在析构函数中对count进行-1；&lt;/p>
&lt;h2 id="怎么快速定位错误出现的地方">怎么快速定位错误出现的地方?&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>查看错误信息和日志：首先，仔细阅读错误信息和日志，它们通常会提供关于错误类型、发生位置和相关调用栈的信息。错误信息可能包含文件名、行号、函数名等，这些信息可以帮助你快速定位到错误的源代码位置。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用调试器：调试器是一种强大的工具，可以逐行跟踪代码的执行过程，查看变量的值、调用堆栈等信息。通过在出现错误的地方设置断点，你可以在运行时停止程序并检查当前的状态，帮助你找到问题所在。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>日志输出和断言：在代码中适当地添加日志输出和断言语句，可以帮助你追踪程序的执行过程，并在特定条件下中断程序执行。通过在关键位置输出日志信息，你可以了解程序的执行流程和变量的值，从而更容易定位错误。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>缩小搜索范围：如果你已经确定错误发生在某个函数或代码块内部，可以采用二分法或逐步注释法来缩小搜索范围。通过逐渐注释掉代码段或只保留关键部分，可以确定错误发生的具体位置。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用工具和技术：利用各种可用的工具和技术来辅助定位错误，如代码静态分析工具、内存泄漏检测工具、性能分析器等。这些工具可以提供更详细的分析和报告，帮助你找出潜在的问题所在。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>与他人讨论和协作：如果你遇到困难或无法确定错误的来源，寻求他人的帮助是一个明智的选择。与其他开发者或论坛社区交流，描述你的问题和尝试过的解决方法，他们可能会提供新的思路和建议。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://zhiruili.github.io/posts/cpp-error-handling/">mark&lt;/a>&lt;/p>
&lt;h2 id="成员初始化列表会在什么时候用到它的调用过程是什么">成员初始化列表会在什么时候用到？它的调用过程是什么？&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>当初始化一个引用成员变量时；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>初始化一个const成员变量时；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>初始化没有默认构造函数的成员对象或者基类对象；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>考虑性能的时候，列表初始化减少一次拷贝&lt;/p>
&lt;/li>
&lt;li>
&lt;p>调用过程？不知道，初始化参数过程：按照类中定义变量的顺序进行初始化
&lt;a href="https://blog.csdn.net/wy1550365215/article/details/77930637">代码&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="在进行函数参数以及返回值传递时可以使用引用或者值传递其中使用引用的好处有哪些">在进行函数参数以及返回值传递时，可以使用引用或者值传递，其中使用引用的好处有哪些？&lt;/h2>
&lt;p>对比值传递，引用传参的好处：&lt;/p>
&lt;ul>
&lt;li>在函数内部可以直接对实参修改&lt;/li>
&lt;li>提高函数调用和运行的效率（因为没有了传值和生成副本的时间和空间消耗）&lt;/li>
&lt;/ul>
&lt;p>用引用作为返回值最大的好处就是在内存中不产生被返回值的副本。&lt;/p>
&lt;p>但是不能返回局部变量的引用。因为函数返回以后局部变量就会被销毁。&lt;/p>
&lt;h2 id="说一说strcpysprintf与memcpy这三个函数的不同之处">说一说strcpy、sprintf与memcpy这三个函数的不同之处&lt;/h2>
&lt;ol>
&lt;li>操作对象不同&lt;/li>
&lt;/ol>
&lt;p>① strcpy的两个操作对象均为字符串&lt;/p>
&lt;p>② sprintf的操作源对象可以是多种数据类型，目的操作对象是字符串&lt;/p>
&lt;p>③ memcpy的两个对象就是两个任意可操作的内存地址，并不限于何种数据类型。&lt;/p>
&lt;ol start="2">
&lt;li>执行效率不同&lt;/li>
&lt;/ol>
&lt;p>memcpy最高，strcpy次之，sprintf的效率最低。&lt;/p>
&lt;ol start="3">
&lt;li>实现功能不同&lt;/li>
&lt;/ol>
&lt;p>① strcpy主要实现字符串变量间的拷贝&lt;/p>
&lt;p>② sprintf主要实现其他数据类型格式到字符串的转化&lt;/p>
&lt;p>③ memcpy主要是内存块间的拷贝。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">char&lt;/span> &lt;span class="n">str&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">50&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">n&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">sprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">str&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;%d plus %d is %d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">char&lt;/span> &lt;span class="n">cpy&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">80&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">strcpy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cpy&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">str&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">memcpy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cpy&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">str&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">80&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="将引用作为函数参数有哪些好处">将引用作为函数参数有哪些好处？&lt;/h2>
&lt;ul>
&lt;li>在函数内部可以对此参数进行修改&lt;/li>
&lt;li>提高函数调用和运行的效率（因为没有了传值和生成副本的时间和空间消耗）&lt;/li>
&lt;li>用指针的情况
&lt;ul>
&lt;li>一是你考虑到存在不指向任何对象的可能（在这种情况下，你能够设置指针为空），&lt;/li>
&lt;li>二是你需要能够在不同的时刻指向不同的对象（在这种情况下，你能改变指针的指向），&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="你知道数组和指针的区别吗">你知道数组和指针的区别吗？&lt;/h2>
&lt;ul>
&lt;li>用运算符sizeof 可以计算出数组的容量（字节数）。sizeof(p)，p 为指针得到的是一个指针变量的字节数。&lt;/li>
&lt;li>在向函数传递参数的时候，如果实参是一个数组，数组会退化成指针，指向数组的首地址。&lt;/li>
&lt;li>对数组取地址操作后，必须用pointer to array来接受。&lt;/li>
&lt;/ul>
&lt;h2 id="如何阻止一个类被实例化有哪些方法">如何阻止一个类被实例化？有哪些方法？&lt;/h2>
&lt;ol>
&lt;li>将类定义为抽象基类（抽象类含有纯虚函数）&lt;/li>
&lt;li>构造函数声明为private&lt;/li>
&lt;/ol>
&lt;h2 id="如何禁止程序自动生成拷贝构造函数">如何禁止程序自动生成拷贝构造函数？&lt;/h2>
&lt;ul>
&lt;li>手动去&lt;strong>重写&lt;/strong>这两个函数，并将他们&lt;strong>设置成&lt;a href="https://stackoverflow.com/questions/5513881/meaning-of-delete-after-function-declaration">delete&lt;/a>&lt;/strong>。&lt;/li>
&lt;li>&lt;a href="https://blog.csdn.net/qq_29422251/article/details/77850312">声明&lt;/a>这两个函数，并加上private访问权限，一旦使用在编译阶段就报错。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Uncopyable&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">protected&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Uncopyable&lt;/span>&lt;span class="p">(){}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">~&lt;/span>&lt;span class="n">Uncopyable&lt;/span>&lt;span class="p">(){}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Uncopyable&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Uncopyable&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Uncopyable&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Uncopyable&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Uncopyable&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Uncopyable&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Uncopyable&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Uncopyable&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="拓展a-a-和-a-a的区别">拓展：A a() 和 A a的区别&lt;/h2>
&lt;p>不要想当然的认为a()会调用默认构造函数，实际上它只是声明，而a才是会调用那个默认构造函数，即定义。&lt;/p>
&lt;p>&lt;a href="https://blog.csdn.net/m0_37166947/article/details/72856841">https://blog.csdn.net/m0_37166947/article/details/72856841&lt;/a>&lt;/p>
&lt;hr>
&lt;p>在C++中，&lt;code>A a()&lt;/code>和&lt;code>A a&lt;/code>有不同的含义和行为。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;code>A a()&lt;/code>：&lt;/p>
&lt;ul>
&lt;li>这是一个函数声明的语法，而不是对象的定义或创建。&lt;/li>
&lt;li>它声明了一个名为&lt;code>a&lt;/code>的函数，该函数没有参数并返回类型为&lt;code>A&lt;/code>的值。&lt;/li>
&lt;li>这种语法在某些情况下可能会引起误解，因为它看起来像是在创建一个名为&lt;code>a&lt;/code>的对象，但实际上它是一个函数声明。&lt;/li>
&lt;li>要创建一个对象，应该使用&lt;code>A a;&lt;/code>或&lt;code>A a{};&lt;/code>的形式。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>A a&lt;/code>：&lt;/p>
&lt;ul>
&lt;li>这是一个对象的定义和创建。&lt;/li>
&lt;li>它声明了一个名为&lt;code>a&lt;/code>的对象，类型为&lt;code>A&lt;/code>。&lt;/li>
&lt;li>如果&lt;code>A&lt;/code>是一个类类型，则会调用默认构造函数来初始化对象&lt;code>a&lt;/code>。&lt;/li>
&lt;li>对象&lt;code>a&lt;/code>的生命周期将根据其定义的作用域和存储位置进行管理。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>from GPT3.5&lt;/p>
&lt;h2 id="debug和release的区别">Debug和Release的区别？&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>调试版本，&lt;strong>包含调试信息&lt;/strong>，所以容量比Release大很多，并且&lt;strong>不进行任何优化&lt;/strong>（优化会使调试复杂化，因为源代码和生成的指令间关系会更复杂），便于程序员调试。Debug模式下生成两个文件，除了.exe或.dll文件外，还有一个.pdb文件，该文件记录了代码中断点等调试信息；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>发布版本，不对源代码进行调试，&lt;strong>编译时对应用程序的速度进行优化&lt;/strong>，使得程序在代码大小和运行速度上都是最优的。（调试信息可在单独的PDB文件中生成）。Release模式下生成一个文件.exe或.dll文件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>实际上，Debug 和 Release 并没有本质的界限，他们只是一组编译选项的集合，编译器只是按照预定的选项行动。事实上，我们甚至可以修改这些选项，从而得到优化过的调试版本或是带跟踪语句的发布版本。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="main函数的返回值">main函数的返回值？&lt;/h2>
&lt;p>程序运行过程入口是main函数，main()函数返回值类型必须是int，这样返回值才能传递给程序激活者（如操作系统）表示程序正常退出。&lt;/p>
&lt;p>&lt;del>main（int args, char **argv） 参数的传递。参数的处理，一般会调用getopt（）函数处理，但实践中，这仅仅是一部分，不会经常用到的技能点。&lt;/del>&lt;/p>
&lt;h2 id="写一个比较大小的模板函数">写一个比较大小的模板函数&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">T&lt;/span> &lt;span class="n">Max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="nl">a&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="strcpy函数和strncpy函数的区别哪个函数更安全">strcpy函数和strncpy函数的区别？哪个函数更安全？&lt;/h2>
&lt;ol>
&lt;li>函数原型&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">strcpy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">strDest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">strSrc&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">strncpy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">dest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">src&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>strcpy函数: 如果参数 dest 所指的内存空间不够大，可能会造成缓冲溢出(buffer Overflow)的错误情况。&lt;/li>
&lt;li>strncpy函数：用来复制源字符串的前n个字符，但是它不会在目标字符串&lt;strong>追加结束符&lt;/strong>，容易出现意想不到的输出结果。如果n比较大，会一直填充结束符直到n，效率不太好。
&lt;a href="https://blog.csdn.net/qq_26093511/article/details/73338036">https://blog.csdn.net/qq_26093511/article/details/73338036&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>因此推荐使用strdup，在堆上开辟，或者strdupa，在栈上开辟，或者用string&lt;/p></content><category scheme="https://keepjolly.com/posts/" term="posts" label="posts"/><category scheme="https://keepjolly.com/posts/learn/" term="learn" label="learn"/><category scheme="https://keepjolly.com/tags/interview/" term="Interview" label="Interview"/></entry><entry><title type="text">面试之CPP基础知识-5</title><link rel="alternate" type="text/html" href="https://keepjolly.com/posts/learn/interview-basic-cpp-5/"/><id>https://keepjolly.com/posts/learn/interview-basic-cpp-5/</id><updated>2024-01-13T13:59:11+00:00</updated><published>2024-01-13T21:52:56+08:00</published><summary type="html">知道C++中的组合吗？它与继承相比有什么优缺点吗？ 一：继承 继承是Is a 的关系。继承的……</summary><content type="html">&lt;h2 id="知道c中的组合吗它与继承相比有什么优缺点吗">知道C++中的组合吗？它与继承相比有什么优缺点吗？&lt;/h2>
&lt;p>&lt;strong>一：继承&lt;/strong>&lt;/p>
&lt;p>继承是Is a 的关系。继承的优点是子类可以重写父类的方法来方便地实现对父类的扩展。&lt;/p>
&lt;p>继承的缺点：&lt;/p>
&lt;ul>
&lt;li>把父类的内部实现细节暴露给了子类， 子类的实现会和父类的实现紧密的绑定在一起， 结果是父类实现的改动，会导致子类也必须得改变。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>二：组合&lt;/strong>&lt;/p>
&lt;p>组合是has A的关系。也就是设计类的时候把要组合的类的对象加入到该类中作为自己的成员变量。&lt;/p>
&lt;p>组合的优点：&lt;/p>
&lt;ul>
&lt;li>组合的类的内部细节是不可见。&lt;/li>
&lt;li>相互依赖较小，低耦合。
&lt;ul>
&lt;li>&lt;a href="https://www.zhihu.com/question/21862257/answer/181179184">例子&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>组合的缺点：&lt;/p>
&lt;ul>
&lt;li>容易产生过多的对象。&lt;/li>
&lt;li>为了能组合多个对象，必须仔细对接口进行定义。&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://blog.csdn.net/K346K346/article/details/55045295">https://blog.csdn.net/K346K346/article/details/55045295&lt;/a>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>组合&lt;/th>
&lt;th>继承&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>has-a关系&lt;/td>
&lt;td>is-a关系&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>运行期决定&lt;/td>
&lt;td>编译期决定&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>不破坏封装，低耦合&lt;/td>
&lt;td>破坏，子类依赖父类&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>支持扩展&lt;/td>
&lt;td>扩展必须实现父类方法&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>动态选择组合类方法&lt;/td>
&lt;td>复用父类方法&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="函数指针">函数指针？&lt;/h2>
&lt;p>&lt;strong>1) 什么是函数指针?&lt;/strong>&lt;/p>
&lt;p>函数指针就是一个指针指向某个函数，因为在程序中如果定义了一个函数，那么在编译时系统就会为这个函数代码分配一段存储空间，函数名表示的就是这个存储空间的首地址。&lt;/p>
&lt;p>&lt;strong>2) 函数指针的声明方法&lt;/strong>&lt;/p>
&lt;p>函数返回值类型 (* 指针变量名) (函数参数列表);&lt;/p>
&lt;p>&lt;strong>3) 两种方法赋值：&lt;/strong>&lt;/p>
&lt;p>指针名 = 函数名； 指针名 = &amp;amp;函数名&lt;/p>
&lt;blockquote>
&lt;p>可以用于回调函数&lt;/p>
&lt;/blockquote>
&lt;h2 id="说一说你理解的内存对齐以及原因">说一说你理解的内存对齐以及原因&lt;/h2>
&lt;ol>
&lt;li>&lt;strong>分配内存的顺序是按照声明的顺序&lt;/strong>，不满对齐数则翻倍。&lt;/li>
&lt;li>Linux默认以4字节对齐，可通过#pragma pack(n) 修改对齐字节数。&lt;/li>
&lt;li>字节对齐后可以&lt;strong>方便系统读取&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>对齐规则:&lt;/p>
&lt;ol>
&lt;li>基本类型的对齐值就是其sizeof值;&lt;/li>
&lt;li>结构体的对齐值是其成员的最大对齐值;&lt;/li>
&lt;li>编译器可以设置一个最大对齐值，类型的实际对齐值是该类型的对齐值与设置的对齐值取最小值得来。&lt;/li>
&lt;/ol>
&lt;h2 id="结构体变量比较是否相等">结构体变量比较是否相等&lt;/h2>
&lt;ol>
&lt;li>重载==操作符&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">foo&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">foo&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">rhs&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">const&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">rhs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">rhs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>
&lt;p>元素的话，一个个比；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>指针直接比较，如果保存的是同一个实例地址，则(p1==p2)为真；&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="函数调用过程栈的变化返回值和参数变量哪个先入栈">函数调用过程栈的变化，返回值和参数变量哪个先入栈？&lt;/h2>
&lt;ol>
&lt;li>调用方将函数的参数按照从右到左的顺序压入栈中。再将函数的返回地址压入栈中。&lt;/li>
&lt;li>调用方执行函数调用指令，将控制权转移到被调用函数。&lt;/li>
&lt;li>被调用函数为局部变量分配内存，并将它们按照定义顺序压入栈中。&lt;/li>
&lt;li>被调用函数执行完毕后，将返回值存储在约定的位置。&lt;/li>
&lt;li>被调用函数弹出栈中数据，直到弹出返回地址，然后跳回调用方的代码处。&lt;/li>
&lt;li>调用方从约定处取回返回值（如果有的话）。&lt;/li>
&lt;/ol>
&lt;p>from GPT&lt;/p>
&lt;h2 id="defineconsttypedefinline的使用方法他们之间有什么区别">define、const、typedef、inline的使用方法？他们之间有什么区别？&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>宏定义&lt;/th>
&lt;th>typedef&lt;/th>
&lt;th>const&lt;/th>
&lt;th>inline&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>宏定义，相当于字符替换&lt;/td>
&lt;td>定义类型别名&lt;/td>
&lt;td>变量不能修改&lt;/td>
&lt;td>调用处字符替换&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>预处理阶段&lt;/td>
&lt;td>编译阶段&lt;/td>
&lt;td>编译阶段&lt;/td>
&lt;td>编译阶段&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>无类型安全检查&lt;/td>
&lt;td>有类型安全检查&lt;/td>
&lt;td>有&lt;/td>
&lt;td>有&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>不是语句&lt;/td>
&lt;td>是语句加分号&lt;/td>
&lt;td>分配内存&lt;/td>
&lt;td>分配内存&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>无&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>有返回值&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>#define p_int int * 显示 int*&lt;br>
typedef int *p_int; 显示p_int&lt;/p>
&lt;h2 id="你知道printf函数的实现原理是什么吗">你知道printf函数的实现原理是什么吗？&lt;/h2>
&lt;p>C/C++的函数参数是通过压入栈的方式来给函数传参数的，并且从右到左入栈。printf第一个被找到的参数就是那个字符串指针，函数通过判断字符串里控制参数的个数来判断参数个数及数据类型，通过这些算出数据需要的堆栈指针的偏移量，然后依次弹出数据进行填充。&lt;/p>
&lt;h2 id="为什么模板类一般都是放在一个h文件中">为什么模板类一般都是放在一个h文件中&lt;/h2>
&lt;p>将模板类的声明和定义放在头文件中是为了支持模板的编译和实例化，并提供更好的可读性和可维护性。&lt;/p>
&lt;p>from GPT&lt;/p>
&lt;hr>
&lt;ol>
&lt;li>模板定义很特殊。由template&amp;lt;…&amp;gt;处理的任何东西都意味着编译器在当时不为它分配存储空间，它一直处于等待状态直到被一个模板实例告知。在编译器和连接器的某一处，有一机制能去掉指定模板的多重定义。&lt;/li>
&lt;/ol>
&lt;p>所以为了容易使用，几乎总是在头文件中放置全部的模板声明和定义。&lt;/p>
&lt;ol start="2">
&lt;li>在分离式编译的环境下，编译器编译某一个.cpp文件时并不知道另一个.cpp文件的存在，也不会去查找（当遇到未决符号时它会寄希望于连接器）。这种模式在没有模板的情况下运行良好，但遇到模板时就傻眼了，因为模板仅在需要的时候才会实例化出来。&lt;/li>
&lt;/ol>
&lt;p>所以，当编译器只看到模板的声明时，它不能实例化该模板，只能创建一个具有外部连接的符号并期待连接器能够将符号的地址决议出来。&lt;/p>
&lt;p>然而当实现该模板的.cpp文件中没有用到模板的实例时，编译器懒得去实例化，所以，整个工程的.obj中就找不到一行模板实例的二进制代码，于是连接器也黔驴技穷了。&lt;/p>
&lt;h2 id="cout和printf有什么区别">cout和printf有什么区别？&lt;/h2>
&lt;ol>
&lt;li>语法和用法：
&lt;ul>
&lt;li>&lt;code>cout&lt;/code> 是 C++ 中的&lt;strong>输出流对象&lt;/strong>，可以使用流操作符 &lt;code>&amp;lt;&amp;lt;&lt;/code> 来输出各种类型的数据。例如：&lt;code>cout &amp;lt;&amp;lt; &amp;quot;Hello, World!&amp;quot;&lt;/code>。&lt;/li>
&lt;li>&lt;code>printf&lt;/code> 是 C语言中的&lt;strong>函数&lt;/strong>，它使用格式化字符串来输出数据。例如：&lt;code>printf(&amp;quot;Hello, World!&amp;quot;)&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>处理数据类型的方式：
&lt;ul>
&lt;li>&lt;code>cout&lt;/code> 能够&lt;strong>自动推断输出对象的数据类型&lt;/strong>，并自动调用适当的输出运算符来进行输出。因此，它可以直接输出各种类型的数据，包括整数、浮点数、字符、字符串等。&lt;/li>
&lt;li>&lt;code>printf&lt;/code> 需要使用&lt;strong>格式化字符串来指定输出的数据类型和格式&lt;/strong>，如 &lt;code>%d&lt;/code> 表示整数，&lt;code>%f&lt;/code> 表示浮点数，&lt;code>%c&lt;/code> 表示字符等。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>错误处理和安全：
&lt;ul>
&lt;li>&lt;code>cout&lt;/code> 具有&lt;strong>更好的错误处理机制&lt;/strong>，它提供了许多重载的输出运算符，可以检查输出操作是否成功，并能够自动刷新输出缓冲区。&lt;/li>
&lt;li>&lt;code>printf&lt;/code> 通常直接将数据写入输出缓冲区，如果需要手动刷新缓冲区，或者在输出过程中进行错误处理，可以使用相关的库函数来实现。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>标准库支持：
&lt;ul>
&lt;li>&lt;code>cout&lt;/code> 是 C++ 标准库的一部分，它提供了丰富的功能和灵活性，可以与其他标准库函数和类一起使用。&lt;/li>
&lt;li>&lt;code>printf&lt;/code> 是 C语言的标准库函数，它提供了一定的灵活性和功能，但相对于 &lt;code>cout&lt;/code> 而言，它的功能相对较简单，且通常不与其他标准库函数和类一起使用。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="你知道重载运算符吗">你知道重载运算符吗？&lt;/h2>
&lt;p>重载运算符是指在类中重新定义标准运算符的行为。通过重载运算符，可以使得类对象可以像内置类型一样进行运算操作，使得代码更加直观和易于理解。&lt;/p>
&lt;ul>
&lt;li>只能重载已有的运算符；并且符合其运算含义。如+-/*，&amp;gt;&amp;lt;=，++/--&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-cn/cpp/cpp/general-rules-for-operator-overloading?view=msvc-170">balabala&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="当程序中有函数重载时函数的匹配原则和顺序是什么">当程序中有函数重载时，函数的匹配原则和顺序是什么？&lt;/h2>
&lt;p>&lt;a href="https://www.cnblogs.com/codemagiciant/p/17544859.html">匹配原则&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://en.cppreference.com/w/cpp/language/overload_resolution#Best_viable_function">Best_viable_function&lt;/a>&lt;/p>
&lt;ol>
&lt;li>根据函数名选定候选函数
&lt;ol>
&lt;li>其声明在调用处可见&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>根据实参选定可行函数
&lt;ol>
&lt;li>形参数量和实参一致&lt;/li>
&lt;li>形参和实参类型相同，或能转换&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>根据匹配规则寻找最佳匹配
&lt;ol>
&lt;li>参数类型和个数完全一致&lt;/li>
&lt;li>底层const转化&lt;/li>
&lt;li>类型提升&lt;/li>
&lt;li>算数类型转换&lt;/li>
&lt;li>类类型转换&lt;/li>
&lt;li>按顺序进行依次匹配&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;const1&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// redefinition of ‘void f(int*)’
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 形参只是临时量，调用结束就被销毁，所以是否是常量不会影响实参，可以搜索形参为什么忽略顶层const
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// void f(int *const a) { cout &amp;lt;&amp;lt; &amp;#34;const2&amp;#34; &amp;lt;&amp;lt; endl; }
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;const3&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">a1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">a2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">a3&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a1&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a2&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a3&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 3
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="定义和声明的区别">定义和声明的区别&lt;/h2>
&lt;p>&lt;strong>如果是指变量的声明和定义：&lt;/strong>
从编译原理上来说，声明是仅仅告诉编译器，有个某类型的变量会被使用，但是编译器并不会为它分配任何内存。而定义就是分配了内存。&lt;/p>
&lt;p>&lt;strong>如果是指函数的声明和定义：&lt;/strong>
声明：一般在头文件里，只是让编译器知道这个函数的存在。
定义：一般在源文件里，存放函数的具体实现。&lt;/p>
&lt;h2 id="全局变量和static变量的区别">全局变量和static变量的区别&lt;/h2>
&lt;p>按存储区域分，全局变量、静态全局变量和静态局部变量都存放在内存的&lt;strong>静态存储区域&lt;/strong>，局部变量存放在内存的栈区。&lt;/p>
&lt;p>主要区别：&lt;/p>
&lt;p>按作用域分，全局变量在&lt;strong>整个工程文件&lt;/strong>内都有效；静态全局变量只在&lt;strong>定义它的文件&lt;/strong>内有效；静态局部变量只在&lt;strong>定义它的函数&lt;/strong>内有效。&lt;del>并且程序仅分配一次内存，函数返回后，该变量不会消失；局部变量在定义它的函数内有效，但是函数返回后失效。&lt;/del>&lt;/p>
&lt;p>&lt;a href="https://blog.csdn.net/mm_hh/article/details/77126878">https://blog.csdn.net/mm_hh/article/details/77126878&lt;/a>&lt;/p>
&lt;p>static函数与普通函数有什么区别？&lt;/p>
&lt;ul>
&lt;li>
&lt;p>static函数与普通的函数作用域不同。静态函数只在本文件内可使用，普通函数可以被其他文件共享&lt;/p>
&lt;/li>
&lt;li>
&lt;p>static函数在内存中只有一份，普通函数在每个被调用中维持一份拷贝。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="静态成员与普通成员的区别是什么">静态成员与普通成员的区别是什么？&lt;/h2>
&lt;ol>
&lt;li>生命周期&lt;/li>
&lt;/ol>
&lt;p>静态成员变量存储在静态存储区，其生命周期和程序的生命周期一致；&lt;/p>
&lt;p>普通成员变量存储在堆或栈内，生命周期同创建的类的生命周期一致；&lt;/p>
&lt;ol start="2">
&lt;li>共享方式&lt;/li>
&lt;/ol>
&lt;p>静态成员变量是全类共享；普通成员变量是每个对象单独享用的；&lt;/p>
&lt;ol start="3">
&lt;li>初始化位置&lt;/li>
&lt;/ol>
&lt;p>普通成员变量在类中初始化；静态成员变量在类外初始化；&lt;/p>
&lt;h2 id="说一下你理解的-ifdef---endif代表着什么">说一下你理解的 ifdef endif代表着什么？&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>指的是条件编译，它让程序满足一定的条件下才会编译该代码段，否则不编译或者编译另一个代码段。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>条件编译命令最常见的形式为：&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#ifdef 标识符
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="err">程序段&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#else
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="err">程序段&lt;/span>&lt;span class="mi">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>它的作用是：当标识符已经被定义过(一般是用#define命令定义)，则对程序段1进行编译，否则编译程序段2。&lt;/p>
&lt;ol start="3">
&lt;li>在头文件使用，可以避免“重定义”错误。&lt;/li>
&lt;/ol>
&lt;h2 id="隐式转换如何消除隐式转换">隐式转换，如何消除隐式转换？&lt;/h2>
&lt;p>隐式转换分为标准转换，用户自定义转换。标准准换即编译器内置的转换规则，如整数类型提升，数组退化成指针等。用户自定义转换包括转换构造函数，用于将其他类型转换为本类型，或者是自定义转换函数，用于将本类型转换为其他类型。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">A&lt;/span> &lt;span class="p">{};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">B&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 转换构造函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">B&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">B&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">A&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 用户定义转换函数，不需要显式指定返回值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">operator&lt;/span> &lt;span class="nf">A&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">operator&lt;/span> &lt;span class="nf">int&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>对于需要进行隐式转换的上下文，编译器会生成一个隐式转换序列：&lt;/p>
&lt;ol>
&lt;li>零个或一个由标准转换规则组成的标准转换序列，叫做初始标准转换序列&lt;/li>
&lt;li>零个或一个由用户自定义的转换规则构成的用户定义转换序列&lt;/li>
&lt;li>零个或一个由标准转换规则组成的标准转换序列，叫做第二标准转换序列&lt;/li>
&lt;/ol>
&lt;p>C++中提供了explicit关键字，在构造函数声明的时候加上explicit关键字，能够禁止隐式转换。&lt;/p>
&lt;p>&lt;a href="https://www.cnblogs.com/apocelipes/p/14415033.html">https://www.cnblogs.com/apocelipes/p/14415033.html&lt;/a>&lt;/p>
&lt;h2 id="c如何处理多个异常的">C++如何处理多个异常的？&lt;/h2>
&lt;p>&lt;a href="http://c.biancheng.net/view/2331.html">http://c.biancheng.net/view/2331.html&lt;/a>&lt;/p>
&lt;p>使用try，throw，catch语句&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Base&lt;/span>&lt;span class="p">{&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Derived&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Base&lt;/span>&lt;span class="p">{&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">throw&lt;/span> &lt;span class="n">Derived&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">//抛出自己的异常类型，实际上是创建一个Derived类型的匿名对象
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">cout&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="s">&amp;#34;Pass&amp;#34;&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>&lt;span class="k">catch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="s">&amp;#34;Exception type: int&amp;#34;&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>&lt;span class="k">catch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="s">&amp;#34;Exception type: cahr *&amp;#34;&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>&lt;span class="k">catch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Base&lt;/span>&lt;span class="p">){&lt;/span> &lt;span class="c1">//匹配成功（向上转型）
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">cout&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="s">&amp;#34;Exception type: Base&amp;#34;&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>&lt;span class="k">catch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Derived&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="s">&amp;#34;Exception type: Derived&amp;#34;&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="如何在不使用额外空间的情况下交换两个数你有几种方法">如何在不使用额外空间的情况下，交换两个数？你有几种方法&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 1) 算术
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 2) 异或
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">^&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">// 只能对int,char..
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">^&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">^&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="你知道strcpy和memcpy的区别是什么吗">你知道strcpy和memcpy的区别是什么吗？&lt;/h2>
&lt;ul>
&lt;li>复制的内容不同。strcpy只能复制字符串，而memcpy可以复制任意内容，例如字符数组、整型、结构体、类等。&lt;/li>
&lt;li>复制的方法不同。strcpy不需要指定长度，它遇到被复制的字符串结束符&amp;quot;\0&amp;quot;才结束，所以容易溢出。memcpy则是根据其第3个参数决定复制的长度。&lt;/li>
&lt;/ul></content><category scheme="https://keepjolly.com/posts/" term="posts" label="posts"/><category scheme="https://keepjolly.com/posts/learn/" term="learn" label="learn"/><category scheme="https://keepjolly.com/tags/interview/" term="Interview" label="Interview"/></entry><entry><title type="text">面试之CPP基础知识-3</title><link rel="alternate" type="text/html" href="https://keepjolly.com/posts/learn/interview-basic-cpp-3/"/><id>https://keepjolly.com/posts/learn/interview-basic-cpp-3/</id><updated>2024-01-13T13:59:11+00:00</updated><published>2024-01-13T21:52:47+08:00</published><summary type="html">C++中有几种类型的new 在C++中，new有三种典型的使用方法：plain new，……</summary><content type="html">&lt;h2 id="c中有几种类型的new">C++中有几种类型的new&lt;/h2>
&lt;p>在C++中，new有三种典型的使用方法：plain new，nothrow new和placement new&lt;/p>
&lt;p>（1）&lt;strong>plain new&lt;/strong>
如果分配空间失败，会抛出异常&lt;strong>std::bad_alloc&lt;/strong>。
定义如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="k">operator&lt;/span> &lt;span class="nf">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">size_t&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">throw&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">bad_alloc&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="k">operator&lt;/span> &lt;span class="nf">delete&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">throw&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>例子：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;string&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mf">10e11&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">delete&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">bad_alloc&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">ex&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">what&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//执行结果：bad allocation
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（2）&lt;strong>nothrow new&lt;/strong>&lt;/p>
&lt;p>nothrow new在空间分配失败的情况下是不抛出异常，而是返回NULL，定义如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="k">operator&lt;/span> &lt;span class="nf">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">size_t&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">nothrow_t&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">throw&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="k">operator&lt;/span> &lt;span class="nf">delete&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">throw&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>举个例子：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;string&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">nothrow&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mf">10e11&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;alloc failed&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">delete&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//运行结果：alloc failed
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（3）&lt;strong>placement new&lt;/strong>&lt;/p>
&lt;p>这种new允许在一块已经分配成功的内存上重新构造对象或对象数组。placement new不用担心内存分配失败，因为它根本不分配内存，它做的唯一一件事情就是调用对象的构造函数。定义如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="k">operator&lt;/span> &lt;span class="nf">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">size_t&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="k">operator&lt;/span> &lt;span class="nf">delete&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用placement new需要注意两点：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>palcement new的主要用途就是反复使用一块较大的动态分配的内存来构造不同类型的对象或者他们的数组&lt;/p>
&lt;/li>
&lt;li>
&lt;p>placement new构造起来的对象数组，要显式的调用他们的析构函数来销毁（析构函数并不释放对象的内存），千万不要使用delete，这是因为placement new构造起来的对象或数组大小并不一定等于原来分配的内存大小，使用delete会造成内存泄漏或者之后释放内存时出现运行时错误。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>举个例子：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;string&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">ADT&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ADT&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;ADT construct i=&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;j=&amp;#34;&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">j&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">~&lt;/span>&lt;span class="n">ADT&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;ADT destruct&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">nothrow&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="k">sizeof&lt;/span> &lt;span class="n">ADT&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;alloc failed&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ADT&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">q&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">ADT&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//placement new:不必担心失败，只要p所指对象的的空间足够ADT创建即可
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">//delete q;//错误!不能在此处调用delete q;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">q&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ADT&lt;/span>&lt;span class="o">::~&lt;/span>&lt;span class="n">ADT&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="c1">//显示调用析构函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//输出结果：
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//ADT construct i=10j=100
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//ADT destruct
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="c的异常处理的方法">C++的异常处理的方法&lt;/h2>
&lt;p>通过在代码中使用 try-catch 块，程序可以在遇到异常时跳转到异常处理代码。&lt;/p>
&lt;ul>
&lt;li>避免程序崩溃和数据损坏。&lt;/li>
&lt;li>使程序的调试和维护更加容易。&lt;/li>
&lt;li>提高代码的可读性和可维护性。&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://www.zhihu.com/tardis/zm/art/610549350?source_id=1003">https://www.zhihu.com/tardis/zm/art/610549350?source_id=1003&lt;/a>&lt;/p>
&lt;hr>
&lt;p>在程序执行过程中，由于程序员的疏忽或是系统资源紧张等因素都有可能导致异常，任何程序都无法保证绝对的稳定，常见的异常有：&lt;/p>
&lt;ul>
&lt;li>数组下标越界&lt;/li>
&lt;li>除法计算时除数为0&lt;/li>
&lt;li>动态分配空间时空间不足&lt;/li>
&lt;li>...&lt;/li>
&lt;/ul>
&lt;p>如果不及时对这些异常进行处理，程序多数情况下都会崩溃。&lt;/p>
&lt;p>&lt;strong>（1）try、throw和catch关键字&lt;/strong>&lt;/p>
&lt;p>C++中的异常处理机制主要使用&lt;strong>try&lt;/strong>、&lt;strong>throw&lt;/strong>和&lt;strong>catch&lt;/strong>三个关键字，其在程序中的用法如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">double&lt;/span> &lt;span class="n">m&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;before dividing.&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">throw&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//抛出int型异常
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">throw&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mf">1.0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//拋出 double 型异常
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">m&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;after dividing.&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">double&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;catch (double)&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">d&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">catch&lt;/span> &lt;span class="p">(...)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;catch (...)&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;finished&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//运行结果
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//before dividing.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//catch (...)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//finished
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>代码中，对两个数进行除法计算，其中除数为0。可以看到以上三个关键字，程序的执行流程是先执行try包裹的语句块，如果执行过程中没有异常发生，则不会进入任何catch包裹的语句块，如果发生异常，则使用throw进行异常抛出，再由catch进行捕获，throw可以抛出各种数据类型的信息，代码中使用的是数字，也可以自定义异常class。&lt;strong>catch根据throw抛出的数据类型进行精确捕获（不会出现类型转换），如果匹配不到就直接报错，可以使用catch(...)的方式捕获任何异常（不推荐）。&lt;/strong> 当然，如果catch了异常，当前函数如果不进行处理，或者已经处理了想通知上一层的调用者，可以在catch里面再throw异常。（注意，匹配不是最佳匹配，如果基类异常在派生类异常之前，则会一直匹配基类异常）&lt;/p>
&lt;p>&lt;strong>（2）函数的异常声明列表&lt;/strong>&lt;/p>
&lt;p>有时候，程序员在定义函数的时候知道函数可能发生的异常，可以在函数声明和定义时，指出所能抛出异常的列表，写法如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">fun&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">throw&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kt">double&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">C&lt;/span>&lt;span class="p">){...};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这种写法表名函数可能会抛出int,double型或者A、B、C三种类型的异常，如果throw中为空，表明不会抛出任何异常，如果没有throw则可能抛出任何异常&lt;/p>
&lt;p>&lt;strong>（3）C++标准异常类 exception&lt;/strong>&lt;/p>
&lt;p>C++ 标准库中有一些类代表异常，这些类都是从 exception 类派生而来的，如下图所示&lt;/p>
&lt;p>&lt;img src="http://oss.interviewguide.cn/img/202205212342667.png" alt="">&lt;/p>
&lt;ul>
&lt;li>bad_typeid：使用typeid运算符，如果其操作数是一个多态类的指针，而该指针的值为 NULL，则会拋出此异常，例如：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;typeinfo&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">A&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">A&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="k">typeid&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// Error condition
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">bad_typeid&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Object is NULL&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//运行结果：bject is NULL
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>bad_cast：在用 dynamic_cast 进行从多态基类对象（或引用）到派生类的引用的强制类型转换时，如果转换是不安全的，则会拋出此异常&lt;/li>
&lt;li>bad_alloc：在用 new 运算符进行动态内存分配时，如果没有足够的内存，则会引发此异常&lt;/li>
&lt;li>out_of_range:用 vector 或 string的at 成员函数根据下标访问元素时，如果下标越界，则会拋出此异常&lt;/li>
&lt;/ul>
&lt;h2 id="形参与实参的区别">形参与实参的区别？&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>形参只有在&lt;strong>被调用时才分配内存单元&lt;/strong>，在调用结束时， 即刻释放所分配的内存单元。因此，形参只有在函数内部有效。 函数调用结束返回主调函数后则不能再使用该形参变量。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>实参可以是常量、变量、表达式、函数等， 无论实参是何种类型的量，在&lt;strong>进行函数调用时，实参应该具有确定的值&lt;/strong>， 以便把这些值传送给形参。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>实参和形参在数量上，类型上，顺序上应严格一致， 否则会发生“类型不匹配”的错误。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>函数调用中发生的&lt;strong>数据传送是单向&lt;/strong>的。 即只能把实参的值传送给形参，而不能把形参的值反向地传送给实参。 因此在函数调用过程中，形参的值发生改变，而实参中的值不会变化。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>当形参和实参不是指针/引用类型时，在该函数运行时，&lt;strong>形参和实参是不同的变量&lt;/strong>，他们在内存中位于不同的位置，形参将实参的内容复制一份，在该函数运行结束的时候形参被释放，而实参内容不会改变。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="值传递指针传递引用传递的区别和效率">值传递、指针传递、引用传递的区别和效率&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>值传递：形参会拷贝整个实参，如果值传递的对象是类对象 或是大的结构体对象，将耗费一定的时间和空间。（传值）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>指针传递：形参会拷贝实参的地址。（传值，传递的是地址值）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>引用传递：形参等同于实参。（传地址）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>效率上讲，指针传递和引用传递比值传递效率高。一般主张使用引用传递，代码逻辑上更加紧凑、清晰。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="静态变量什么时候初始化">静态变量什么时候初始化&lt;/h2>
&lt;p>静态局部变量和局部对象都在&lt;strong>函数首次执行&lt;/strong>到对象定义时进行初始化；
全局变量和对象在程序启动时进行初始化。&lt;/p>
&lt;h2 id="什么是类的继承">什么是类的继承？&lt;/h2>
&lt;ol>
&lt;li>类与类之间的关系&lt;/li>
&lt;/ol>
&lt;p>has-A包含关系，用以描述&lt;strong>一个类由多个部件类构成&lt;/strong>，实现has-A关系用类的成员属性，即一个类的成员属性是另一个已经定义好的类；&lt;/p>
&lt;p>use-A，&lt;strong>一个类使用另一个类&lt;/strong>，通过类之间的成员函数相互联系，定义友元或者通过传递参数的方式来实现；&lt;/p>
&lt;p>is-A，继承关系，关系具有传递性；子类拥有父类的所有属性和方法，子类可以拥有父类没有的属性和方法，子类对象可以当做父类对象使用；&lt;/p>
&lt;h2 id="从汇编层去解释一下引用">从汇编层去解释一下引用&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="mi">9&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mo">0040104&lt;/span>&lt;span class="mi">8&lt;/span> &lt;span class="n">mov&lt;/span> &lt;span class="n">dword&lt;/span> &lt;span class="n">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">ebp&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">10&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mf">0040104F&lt;/span> &lt;span class="n">lea&lt;/span> &lt;span class="n">eax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="n">ebp&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mo">00401052&lt;/span> &lt;span class="n">mov&lt;/span> &lt;span class="n">dword&lt;/span> &lt;span class="n">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">ebp&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">eax&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>x的地址为ebp-4，b的地址为ebp-8，因为栈内的变量内存是从高往低进行分配的，所以b的地址比x的低。&lt;/p>
&lt;p>lea eax,[ebp-4] 这条语句将x的地址ebp-4放入eax寄存器&lt;/p>
&lt;p>mov dword ptr [ebp-8],eax 这条语句将eax的值放入b的地址&lt;/p>
&lt;p>ebp-8中上面两条汇编的作用即：将x的地址存入变量b中，这不和将某个变量的地址存入指针变量是一样的吗？所以从汇编层次来看，的确引用是通过指针来实现的。&lt;/p>
&lt;h2 id="delete-pdelete--pallocator都有什么作用">delete p、delete [] p、allocator都有什么作用？&lt;/h2>
&lt;ul>
&lt;li>&lt;code>delete p&lt;/code>：用于释放使用&lt;code>new&lt;/code>运算符动态分配的单个对象的内存。&lt;code>delete p&lt;/code>会调用对象的析构函数，并释放对象占用的内存。&lt;/li>
&lt;li>&lt;code>delete [] p&lt;/code>：用于释放使用&lt;code>new[]&lt;/code>运算符动态分配的数组的内存。&lt;code>delete [] p&lt;/code>会按照数组元素的逆序调用每个元素的析构函数，并释放数组占用的内存。&lt;/li>
&lt;li>&lt;code>allocator&lt;/code>：是C++标准库中的一个类模板，用于动态分配和释放内存，可以用于分配单个对象或数组。&lt;/li>
&lt;/ul>
&lt;h2 id="new和delete的实现原理-delete是如何知道释放内存的大小的">new和delete的实现原理， delete是如何知道释放内存的大小的？&lt;/h2>
&lt;ul>
&lt;li>new先调用operator new分配内存，然后调用构造函数初始化内存，返回该内存的指针&lt;/li>
&lt;li>delete先调用析构函数再调用operator delete释放指针指向的内存&lt;/li>
&lt;li>new[]先调用operator new[]分配内存，然后在内存块的首地址放入数组大小，然后依次调用数组元素的构造函数来初始化每个对象，返回该内存的指针。&lt;/li>
&lt;li>delete[]获得内存首地址的数组大小，调用析构函数后，再调用operator delete 释放内存。&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://blog.csdn.net/passion_wu128/article/details/38966581">https://blog.csdn.net/passion_wu128/article/details/38966581&lt;/a>&lt;/p>
&lt;h2 id="malloc申请的存储空间能用delete释放吗">malloc申请的存储空间能用delete释放吗?&lt;/h2>
&lt;p>混合使用&lt;code>malloc&lt;/code>和&lt;code>delete&lt;/code>会导致未定义的行为，可能引发内存泄漏或其他问题。建议malloc配套free使用。&lt;/p>
&lt;h2 id="malloc与free的实现原理">malloc与free的实现原理？&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;code>malloc&lt;/code>的实现原理：&lt;/p>
&lt;ul>
&lt;li>&lt;code>malloc&lt;/code>函数通过调用底层的操作系统函数（如&lt;code>brk&lt;/code>或&lt;code>mmap&lt;/code>）来请求一块指定大小的内存空间。&lt;/li>
&lt;li>操作系统会在进程的地址空间中找到足够大小的连续内存块，并将其起始地址分配给&lt;code>malloc&lt;/code>函数。&lt;/li>
&lt;li>&lt;code>malloc&lt;/code>函数返回起始地址给变量。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>free&lt;/code>的实现原理：&lt;/p>
&lt;ul>
&lt;li>&lt;code>free&lt;/code>函数接收一个指针作为参数，该指针指向通过&lt;code>malloc&lt;/code>分配的内存块的起始地址。&lt;/li>
&lt;li>&lt;code>free&lt;/code>函数将释放该内存块，并将它标记为可重新使用。&lt;/li>
&lt;li>内存管理子系统（如堆管理器）会将这块内存标记为可供后续的&lt;code>malloc&lt;/code>调用使用&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>from GPT3.5&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>1、 在标准C库中，提供了malloc/free函数分配释放内存，这两个函数底层是由brk、mmap、，munmap这些系统调用实现的;&lt;/p>
&lt;p>2、 brk是将「堆顶」指针向高地址移动，获得新的内存空间,mmap是在进程的虚拟地址空间中（堆和栈中间，称为文件映射区域的地方）找一块空闲的虚拟内存。这两种方式分配的都是虚拟内存，没有分配物理内存。在第一次访问已分配的虚拟地址空间的时候，发生缺页中断，操作系统负责分配物理内存，然后建立虚拟内存和物理内存之间的映射关系；&lt;/p>
&lt;p>3、 malloc小于128k的内存，使用brk分配内存，将「堆顶」指针往高地址推；malloc大于128k的内存，使用mmap分配内存，在堆和栈之间找一块空闲内存分配；brk分配的内存需要等到高地址内存释放以后才能释放，而mmap分配的内存可以单独释放。当最高地址空间的空闲内存超过128K（可由M_TRIM_THRESHOLD选项调节）时，执行内存紧缩操作（trim）。在上一个步骤free的时候，发现最高地址空闲内存超过128K，于是内存紧缩。&lt;/p>
&lt;p>4、 malloc是从堆里面申请内存，也就是说函数返回的指针是指向堆里面的一块内存。操作系统中有一个记录空闲内存地址的链表。当操作系统收到程序的申请时，就会遍历该链表，然后就寻找第一个空间大于所申请空间的堆结点，然后就将该结点从空闲结点链表中删除，并将该结点的空间分配给程序。&lt;/p>
&lt;h2 id="mallocrealloccalloc的区别">malloc、realloc、calloc的区别&lt;/h2>
&lt;ol>
&lt;li>malloc函数&lt;/li>
&lt;/ol>
&lt;p>需要指定需要的内存空间，其内的值是随机的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nf">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">num_size&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">));&lt;/span>&lt;span class="err">申请&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="err">个&lt;/span>&lt;span class="n">int类型的空间&lt;/span>&lt;span class="err">；&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>calloc函数&lt;/li>
&lt;/ol>
&lt;p>省去了人为空间计算；申请的空间的值是初始化为0&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nf">calloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">size_t&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">size_t&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">calloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="3">
&lt;li>realloc函数&lt;/li>
&lt;/ol>
&lt;p>给动态分配的空间分配额外的空间，用于扩充容量&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">realloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">new_size&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="类成员初始化方式为什么用成员初始化列表会快一些">类成员初始化方式？为什么用成员初始化列表会快一些？&lt;/h2>
&lt;ol>
&lt;li>构造函数初始化，通过在构造函数体内进行赋值初始化；&lt;/li>
&lt;li>列表初始化，在冒号后使用初始化列表进行初始化。&lt;/li>
&lt;li>声明时初始化（也称就地初始化，c++11后支持），声明时直接初始化。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">A&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 声明时初始化
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 列表初始化
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">A&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">a_&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a_&lt;/span>&lt;span class="p">){}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 构造函数初始化
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">A&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">_b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_b&lt;/span>&lt;span class="p">;}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>成员变量的初始化顺序是：&lt;/p>
&lt;p>&lt;strong>声明时初始化-&amp;gt;初始化列表-&amp;gt;构造函数初始化&lt;/strong>&lt;/p>
&lt;p>因为列表初始化不需要再进行一次赋值，不会构建临时变量。
&lt;a href="https://bbs.huaweicloud.com/blogs/281096">https://bbs.huaweicloud.com/blogs/281096&lt;/a>&lt;/p>
&lt;h2 id="构造函数的执行顺序-">构造函数的执行顺序 ？&lt;/h2>
&lt;p>一个派生类构造函数的执行顺序如下：&lt;/p>
&lt;ol>
&lt;li>先执行静态成员的构造函数~~，如果静态成员只是在类定义中声明了，而没有定义，是不用构造的。必须初始化后才执行其构造函数。~~&lt;/li>
&lt;li>任何虚拟继承基类的构造函数按照它们被继承的顺序构造（不是初始化列表中的顺序）&lt;/li>
&lt;li>任何非虚拟继承基类的构造函数按照它们被继承的顺序构造（不是初始化列表中的顺序）&lt;/li>
&lt;li>任何成员对象的构造函数按照它们声明的顺序构造&lt;/li>
&lt;li>类自己的构造函数&lt;/li>
&lt;/ol>
&lt;p>&lt;a href="https://blog.csdn.net/Watson2016/article/details/77891766">代码&lt;/a>&lt;/p>
&lt;h2 id="有哪些情况必须用到成员列表初始化顺序是什么">有哪些情况必须用到成员列表初始化？顺序是什么？&lt;/h2>
&lt;p>必须使用列表初始化的情况&lt;/p>
&lt;ul>
&lt;li>初始化引用成员&lt;/li>
&lt;li>初始化const成员&lt;/li>
&lt;li>初始化成员对象
&lt;ul>
&lt;li>不包含默认构造函数时&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>基类的构造函数需要参数
&lt;ul>
&lt;li>不包含默认构造函数时&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">OtherClass&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">OtherClass&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 构造函数体
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">BaseClass&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">BaseClass&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 基类构造函数体
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">MyClass&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">BaseClass&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">MyClass&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">ref&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">myConst&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">myRef&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ref&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">myObject&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">BaseClass&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 构造函数体
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">myConst&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">myRef&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">OtherClass&lt;/span> &lt;span class="n">myObject&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>成员初始化的顺序&lt;/p>
&lt;ul>
&lt;li>列表初始化的顺序是由&lt;strong>先基类，再按照类中的成员声明顺序&lt;/strong>决定的，不是由初始化列表的顺序决定的；&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://blog.csdn.net/lanchunhui/article/details/50987384">https://blog.csdn.net/lanchunhui/article/details/50987384&lt;/a>&lt;/p>
&lt;h2 id="c中新增了string它与c语言中的-char-有什么区别吗它是如何实现的">C++中新增了string，它与C语言中的 char *有什么区别吗？它是如何实现的？&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>在实现上，&lt;code>std::string&lt;/code> 内部通常会使用动态数组来存储字符串，可以动态地分配内存。&lt;del>同时，&lt;code>std::string&lt;/code> 还可能使用一些优化技术，如内部缓存和rope等，以提高字符串操作的效率。具体的实现细节可能会因不同的 C++ 编译器和标准库实现而有所不同。&lt;/del>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>内存管理：string会自动管理内存，即在使用完成后会自动释放内存。而char *需要手动管理内存。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>安全性：string提供了更多的安全性措施，比如支持多线程安全、内存泄漏检测等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>字符串操作：&lt;code>std::string&lt;/code> 提供了一系列的成员函数，可以方便地进行字符串的拼接、子串提取、查找等操作，而 &lt;code>char*&lt;/code> 则需要使用一些 C 语言的字符串操作函数（如 &lt;code>strcat&lt;/code>、&lt;code>strchr&lt;/code> 等）或者手动进行指针操作。&lt;/p>
&lt;/li>
&lt;/ol></content><category scheme="https://keepjolly.com/posts/" term="posts" label="posts"/><category scheme="https://keepjolly.com/posts/learn/" term="learn" label="learn"/><category scheme="https://keepjolly.com/tags/interview/" term="Interview" label="Interview"/></entry><entry><title type="text">面试之CPP基础知识-4</title><link rel="alternate" type="text/html" href="https://keepjolly.com/posts/learn/interview-basic-cpp-4/"/><id>https://keepjolly.com/posts/learn/interview-basic-cpp-4/</id><updated>2024-01-13T13:59:11+00:00</updated><published>2024-01-13T21:52:43+08:00</published><summary type="html">什么是内存泄露，如何检测与避免 内存泄露 用new/malloc申请了内存，但是没有用d……</summary><content type="html">&lt;h2 id="什么是内存泄露如何检测与避免">什么是内存泄露，如何检测与避免&lt;/h2>
&lt;p>&lt;strong>内存泄露&lt;/strong>&lt;/p>
&lt;p>用new/malloc申请了内存，但是没有用delete/free释放内存。而其他程序就无法再申请该块空间&lt;/p>
&lt;p>&lt;strong>避免内存泄露的几种方式&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>使用shared_ptr管理对象。&lt;/li>
&lt;li>将基类的析构函数声明为&lt;strong>虚函数&lt;/strong>&lt;/li>
&lt;li>对象数组的释放用&lt;strong>delete []&lt;/strong>&lt;/li>
&lt;li>有new就有delete，有malloc就有free，保证它们一定成对出现&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>检测工具&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Linux下可以使用&lt;strong>Valgrind工具&lt;/strong>&lt;/li>
&lt;li>Windows下可以使用&lt;strong>CRT库&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h2 id="对象复用的了解零拷贝的了解">对象复用的了解，零拷贝的了解&lt;/h2>
&lt;p>&lt;strong>对象复用&lt;/strong>&lt;/p>
&lt;p>对象复用其本质是一种设计模式：Flyweight享元模式。&lt;/p>
&lt;p>通过将对象存储到“对象池”中实现对象的重复利用，这样可以避免多次创建重复对象的开销，节约系统资源。&lt;/p>
&lt;p>&lt;strong>零拷贝&lt;/strong>&lt;/p>
&lt;p>零拷贝就是一种避免 CPU 将数据从一块存储拷贝到另外一块存储的技术。&lt;/p>
&lt;p>零拷贝技术可以减少数据拷贝和共享总线操作的次数。&lt;/p>
&lt;p>在C++中，vector的一个成员函数**emplace_back()**很好地体现了零拷贝技术，它跟push_back()函数一样可以将一个元素插入容器尾部，区别在于：&lt;strong>使用push_back()函数需要调用拷贝构造函数和转移构造函数，而使用emplace_back()插入的元素原地构造，不需要触发拷贝构造和转移构造&lt;/strong>，效率更高。举个例子：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;vector&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;string&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">Person&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">string&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">age&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//初始构造函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">Person&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">p_name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">p_age&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">move&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p_name&lt;/span>&lt;span class="p">)),&lt;/span> &lt;span class="n">age&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p_age&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;I have been constructed&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//拷贝构造函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">Person&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Person&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">other&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">move&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">other&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)),&lt;/span> &lt;span class="n">age&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">other&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">age&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;I have been copy constructed&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//转移构造函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">Person&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Person&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">other&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">move&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">other&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)),&lt;/span> &lt;span class="n">age&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">other&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">age&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;I have been moved&amp;#34;&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Person&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;emplace_back:&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">e&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">emplace_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Jane&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">23&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//不用构造类对象
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Person&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;push_back:&amp;#34;&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">p&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Person&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Mike&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">36&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//输出结果：
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//emplace_back:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//I have been constructed
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//push_back:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//I have been constructed
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//I am being moved.
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="介绍面向对象的三大特性并且举例说明">介绍面向对象的三大特性，并且举例说明&lt;/h2>
&lt;p>三大特性：封装 继承 多态&lt;/p>
&lt;p>&lt;strong>（1）继承&lt;/strong>&lt;/p>
&lt;p>&lt;strong>让派生类获得基类的属性和方法。&lt;/strong>&lt;/p>
&lt;p>它可以使用现有类的所有功能，并在类中对这些功能进行扩展&lt;/p>
&lt;p>例如，将人定义为一个抽象类，拥有姓名、性别、年龄等公共属性，吃饭、睡觉、走路等公共方法，在定义一个具体的人时，就可以继承这个抽象类，既保留了公共属性和方法，也可以在此基础上扩展跳舞、唱歌等特有方法&lt;/p>
&lt;p>（2）封装&lt;/p>
&lt;p>封装，也就是&lt;strong>把客观事物封装成抽象的类，并且给类的属性和方法设置访问权限&lt;/strong>，例如：将公共的数据或方法使用public修饰，而不希望被访问的数据或方法采用private修饰。&lt;/p>
&lt;p>（3）多态&lt;/p>
&lt;p>同一事物表现出不同事物的能力，即向不同对象发送同一消息，不同的对象在接收时会产生不同的行为**（重载实现编译时多态，虚函数实现运行时多态）** 。&lt;/p>
&lt;blockquote>
&lt;p>允许将子类类型的指针赋值给父类类型的指针&lt;/p>
&lt;/blockquote>
&lt;p>实现多态有二种方式：覆盖（override），重载（overload）。&lt;/p>
&lt;p>覆盖：是指子类重新定义父类的虚函数的做法。&lt;/p>
&lt;p>重载：是指允许存在多个同名函数，而这些函数的参数类型不同或者个数不同。&lt;/p>
&lt;h2 id="c的四种强制转换">C++的四种强制转换&lt;/h2>
&lt;blockquote>
&lt;p>&lt;a href="https://msdn.microsoft.com/zh-CN/library/5f6c9f8h.aspx">MSDN . 强制转换运算符&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;a href="https://en.cppreference.com/w/cpp/language/static_cast">static_cast&lt;/a>&lt;/th>
&lt;th>&lt;a href="https://learn.microsoft.com/zh-cn/cpp/cpp/dynamic-cast-operator?view=msvc-170">dynamic_cast&lt;/a>&lt;/th>
&lt;th>&lt;a href="https://learn.microsoft.com/zh-cn/cpp/cpp/const-cast-operator?view=msvc-170">const_cast&lt;/a>&lt;/th>
&lt;th>&lt;a href="https://learn.microsoft.com/zh-cn/cpp/cpp/reinterpret-cast-operator?view=msvc-170">reinterpret_cast&lt;/a>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>一般用于数值转换&lt;/td>
&lt;td>用于指针和引用&lt;/td>
&lt;td>删除const特性&lt;/td>
&lt;td>指针间转换&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>不执行运行时类型检查&lt;/td>
&lt;td>执行检查&lt;/td>
&lt;td>删除volatile特性&lt;/td>
&lt;td>整数类型转指针&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>类指针可以向上转换&lt;/td>
&lt;td>向上/下转换&lt;/td>
&lt;td>不能用于函数指针&lt;/td>
&lt;td>指针转整数类型&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>不安全&lt;/td>
&lt;td>转换失败返回null&lt;/td>
&lt;td>&lt;/td>
&lt;td>不安全&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="c函数调用的压栈过程">C++函数调用的压栈过程&lt;/h2>
&lt;p>跳过。&lt;/p>
&lt;p>从代码入手，解释这个过程：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">param1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">param2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">var1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">param1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">var2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">param2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;var1=%d,var2=%d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var1&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var2&lt;/span>&lt;span class="p">));&lt;/span>&lt;span class="c1">//如果将printf换为cout进行输出，输出结果则刚好相反
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">argv&lt;/span>&lt;span class="p">[])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//输出结果
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//2
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//var1=1,var2=2
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当函数从入口函数main函数开始执行时，编译器会将我们操作系统的运行状态，main函数的返回地址、main的参数、mian函数中的变量、进行依次压栈；&lt;/p>
&lt;p>当main函数开始调用func()函数时，编译器此时会将main函数的运行状态进行压栈，再将func()函数的返回地址、func()函数的参数从右到左、func()定义变量依次压栈；&lt;/p>
&lt;p>当func()调用f()的时候，编译器此时会将func()函数的运行状态进行压栈，再将f()的返回地址、函数的参数从右到左、定义变量依次压栈。&lt;/p>
&lt;p>从代码的输出结果可以看出，函数f(var1)、f(var2)依次入栈，而后先执行f(var2)，再执行f(var1)，最后打印整个字符串，将栈中的变量依次弹出，最后主函数返回。&lt;/p>
&lt;h2 id="coredump-遇到过吗怎么调试这个错误">coredump 遇到过吗？怎么调试这个错误？&lt;/h2>
&lt;p>coredump是程序由于异常或者bug在运行时异常退出或者终止，在一定的条件下生成的一个叫做core的文件，~~这个core文件会记录程序在运行时的内存，寄存器状态，内存指针和函数堆栈信息等等。~~对这个文件进行分析可以定位到程序异常的时候对应的堆栈调用信息。&lt;/p>
&lt;p>使用gdb命令对core文件进行调试&lt;/p>
&lt;pre tabindex="0">&lt;code>gdb &amp;lt;可执行文件路径&amp;gt; &amp;lt;core文件路径&amp;gt;
&lt;/code>&lt;/pre>&lt;p>&lt;a href="https://cppguide.cn/pages/323439/">gdb 调试准备&lt;/a>&lt;/p>
&lt;h2 id="说说移动构造函数">说说移动构造函数&lt;/h2>
&lt;p>&lt;a href="https://learn.microsoft.com/zh-cn/cpp/cpp/move-constructors-and-move-assignment-operators-cpp?view=msvc-170">移动构造函数&lt;/a>使右值对象拥有的资源无需复制即可移动到左值中。可以搭配std::move将变量转为右值。&lt;/p>
&lt;h2 id="c中将临时变量作为返回值时的处理过程">C++中将临时变量作为返回值时的处理过程&lt;/h2>
&lt;ul>
&lt;li>临时变量在函数调用过程中是先被压到程序进程的栈中&lt;/li>
&lt;li>当函数退出时，临时变量出栈，销毁临时变量，但是临时变量占用的内存空间没有被清空，可以被分配给其他变量&lt;/li>
&lt;li>所以有可能在函数退出时，该内存已经被修改了，对于临时变量来说已经是没有意义的值了&lt;/li>
&lt;/ul>
&lt;p>所以&lt;a href="https://www.cnblogs.com/FLYMANJB/p/13357702.html">建议不再函数中返回局部变量&lt;/a>。
硬要返回用new个局部指针并外部接受后再delete、声明为static、用全局变量（推荐）&lt;/p>
&lt;h2 id="如何获得结构成员相对于结构开头的字节偏移量">如何获得结构成员相对于结构开头的字节偏移量&lt;/h2>
&lt;p>使用&amp;lt;stddef.h&amp;gt;头文件中的，&lt;a href="https://interviewguide.cn/notes/03-hunting_job/02-interview/01-01-04-basic.html#_70%E3%80%81%E5%A6%82%E4%BD%95%E8%8E%B7%E5%BE%97%E7%BB%93%E6%9E%84%E6%88%90%E5%91%98%E7%9B%B8%E5%AF%B9%E4%BA%8E%E7%BB%93%E6%9E%84%E5%BC%80%E5%A4%B4%E7%9A%84%E5%AD%97%E8%8A%82%E5%81%8F%E7%A7%BB%E9%87%8F">offsetof宏&lt;/a>。&lt;/p>
&lt;h2 id="静态类型和动态类型静态绑定和动态绑定的介绍">静态类型和动态类型，静态绑定和动态绑定的介绍&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>静态类型：对象在声明时采用的类型，在编译期确定；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>动态类型：通常是指一个指针或引用，具体所指对象的类型，是在&lt;a href="https://blog.csdn.net/m0_37264397/article/details/76697237">运行期&lt;/a>决定的；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>静态绑定：绑定的是静态类型，所对应的函数或属性依赖于对象的静态类型，发生在编译期；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>动态绑定：绑定的是动态类型，所对应的函数或属性依赖于对象的动态类型，发生在运行期；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在继承体系中只有虚函数使用的是动态绑定，其他的全部是静态绑定；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="引用是否能实现动态绑定为什么可以实现">引用是否能实现动态绑定，为什么可以实现？&lt;/h2>
&lt;p>可以。因为&lt;a href="https://zhuanlan.zhihu.com/p/89175296">引用在运行期确定其指向的对象&lt;/a>，在访问虚函数时，编译器会根据其所绑定的对象类型决定要调用哪个函数。&lt;/p>
&lt;p>注意只能调用虚函数。举个例子：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Base&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">fun&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;base :: fun()&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Son&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Base&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">fun&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;son :: fun()&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">func&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;son :: not virtual function&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Son&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Base&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 基类类型引用绑定已经存在的Son对象，引用必须初始化
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">fun&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">//son::fun()
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">fun&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">//son :: fun()
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>需要说明的是虚函数才具有动态绑定&lt;/strong>，上面代码中，Son类中还有一个非虚函数func()，这在b对象中是无法调用的，如果使用基类&lt;strong>指针&lt;/strong>来指向子类也是一样的。&lt;/p>
&lt;h2 id="全局变量和局部变量有什么区别">全局变量和局部变量有什么区别？&lt;/h2>
&lt;p>生命周期不同：全局变量的生命周期跟主程序一样；局部变量的生命周期超出大括号就不存在了；&lt;/p>
&lt;p>全局变量保存在内存的全局存储区中，占用静态的存储单元；局部变量保存在栈中，只有在所在函数被调用时才动态地为变量分配存储单元。&lt;/p>
&lt;h2 id="指针加减计算要注意什么">指针加减计算要注意什么？&lt;/h2>
&lt;p>指针加减本质是对其所指地址的移动，移动的步长跟&lt;strong>指针的类型大小一致&lt;/strong>。&lt;/p>
&lt;p>遇到指针的计算，需要明确的是指针每移动一位，它实际跨越的内存间隔是指针类型的长度，建议都转成10进制计算，计算结果除以类型长度取得结果&lt;/p>
&lt;h2 id="怎样判断两个浮点数是否相等">怎样判断两个浮点数是否相等？&lt;/h2>
&lt;p>两个浮点数比较只能通过相减取绝对值后与预先设定的精度比较。浮点数与0的比较也应该注意。这是计算机浮点数表示法精度导致的问题。
&lt;a href="https://blog.csdn.net/bitekong/article/details/119933898">https://blog.csdn.net/bitekong/article/details/119933898&lt;/a>&lt;/p>
&lt;h2 id="方法调用的原理栈汇编">方法调用的原理（栈，汇编）&lt;/h2>
&lt;p>pass&lt;/p>
&lt;ol>
&lt;li>
&lt;p>机器用栈来传递过程参数、存储返回信息、保存寄存器用于以后恢复，以及本地存储。而为单个过程分配的那部分栈称为帧栈；帧栈可以认为是程序栈的一段，它有两个端点，一个标识起始地址，一个标识着结束地址，两个指针结束地址指针esp，开始地址指针ebp;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>由一系列栈帧构成，这些栈帧对应一个过程，而且每一个栈指针+4的位置存储函数返回地址；每一个栈帧都建立在调用者的下方，当被调用者执行完毕时，这一段栈帧会被释放。由于栈帧是向地址递减的方向延伸，因此如果我们将栈指针减去一定的值，就相当于给栈帧分配了一定空间的内存。如果将栈指针加上一定的值，也就是向上移动，那么就相当于压缩了栈帧的长度，也就是说内存被释放了。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>过程实现&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>① 备份原来的帧指针，调整当前的栈帧指针到栈指针位置；&lt;/p>
&lt;p>② 建立起来的栈帧就是为被调用者准备的，当被调用者使用栈帧时，需要给临时变量分配预留内存；&lt;/p>
&lt;p>③ 使用建立好的栈帧，比如读取和写入，一般使用mov，push以及pop指令等等。&lt;/p>
&lt;p>④ 恢复被调用者寄存器当中的值，这一过程其实是从栈帧中将备份的值再恢复到寄存器，不过此时这些值可能已经不在栈顶了&lt;/p>
&lt;p>⑤ 恢复被调用者寄存器当中的值，这一过程其实是从栈帧中将备份的值再恢复到寄存器，不过此时这些值可能已经不在栈顶了。&lt;/p>
&lt;p>⑥ 释放被调用者的栈帧，释放就意味着将栈指针加大，而具体的做法一般是直接将栈指针指向帧指针，因此会采用类似下面的汇编代码处理。&lt;/p>
&lt;p>⑦ 恢复调用者的栈帧，恢复其实就是调整栈帧两端，使得当前栈帧的区域又回到了原始的位置。&lt;/p>
&lt;p>⑧ 弹出返回地址，跳出当前过程，继续执行调用者的代码。&lt;/p>
&lt;ol start="4">
&lt;li>过程调用和返回指令&lt;/li>
&lt;/ol>
&lt;p>① call指令&lt;/p>
&lt;p>② leave指令&lt;/p>
&lt;p>③ ret指令&lt;/p>
&lt;p>​&lt;/p>
&lt;h2 id="c中的指针参数传递和引用参数传递有什么区别底层原理你知道吗">C++中的指针参数传递和引用参数传递有什么区别？底层原理你知道吗？&lt;/h2>
&lt;p>指针传递是将&lt;strong>参数的内存地址&lt;/strong>传递给函数，需要使用*操作符对指针所指向的数据进行修改，从而改变实参的值。&lt;/p>
&lt;p>引用传递是将&lt;strong>参数的别名&lt;/strong>传递给函数，可以直接使用该别名来修改实参的数据。&lt;/p>
&lt;hr>
&lt;ol>
&lt;li>指针参数传递本质上是值传递，它所传递的是一个地址值。&lt;/li>
&lt;/ol>
&lt;p>值传递过程中，被调函数的形参作为被调函数的局部变量处理，会在栈中开辟内存空间以存放由主调函数传递进来的实参值，从而形成了实参的一个副本（替身）。&lt;/p>
&lt;p>值传递的特点是，被调函数对形式参数的任何操作都是作为局部变量进行的，不会影响主调函数的实参变量的值（形参指针变了，实参指针不会变）。&lt;/p>
&lt;ol start="2">
&lt;li>引用参数传递过程中，被调函数的形参也作为局部变量在栈中开辟了内存空间，但是这时存放的是由主调函数放进来的实参变量的地址。&lt;/li>
&lt;/ol>
&lt;p>被调函数对形参（本体）的任何操作都被处理成间接寻址，即通过栈中存放的地址访问主调函数中的实参变量（根据别名找到主调函数中的本体）。&lt;/p>
&lt;p>因此，被调函数对形参的任何操作都会影响主调函数中的实参变量。&lt;/p>
&lt;ol start="3">
&lt;li>引用传递和指针传递是不同的，虽然他们都是在被调函数栈空间上的一个局部变量，但是任何对于引用参数的处理都会通过一个间接寻址的方式操作到主调函数中的相关变量。&lt;/li>
&lt;/ol>
&lt;p>而对于指针传递的参数，如果改变被调函数中的指针地址，它将应用不到主调函数的相关变量。如果想通过指针参数传递来改变主调函数中的相关变量（地址），那就得使用指向指针的指针或者指针引用。&lt;/p>
&lt;ol start="4">
&lt;li>从编译的角度来讲，程序在编译时分别将指针和引用添加到符号表上，符号表中记录的是变量名及变量所对应地址。&lt;/li>
&lt;/ol>
&lt;p>指针变量在符号表上对应的地址值为指针变量的地址值，而引用在符号表上对应的地址值为引用对象的地址值（与实参名字不同，地址相同）。&lt;/p>
&lt;p>符号表生成之后就不会再改，因此指针可以改变其指向的对象（指针变量中的值可以改），而引用对象则不能修改。&lt;/p>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/130464385">https://zhuanlan.zhihu.com/p/130464385&lt;/a>&lt;/p>
&lt;h2 id="类如何实现只能静态分配和只能动态分配">类如何实现只能静态分配和只能动态分配&lt;/h2>
&lt;blockquote>
&lt;p>&lt;a href="https://www.nowcoder.com/questionTerminal/0a584aa13f804f3ea72b442a065a7618">如何定义一个只能在堆上（栈上）生成对象的类?&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>只能在堆上（动态分配）&lt;/p>
&lt;p>方法：将析构函数设置为私有&lt;/p>
&lt;p>原因：C++ 是静态绑定语言，编译器管理栈上对象的生命周期，&lt;strong>编译器在为类对象分配栈空间时，会先检查类的析构函数的访问性&lt;/strong>。若析构函数不可访问，则不能在栈上创建对象。&lt;/p>
&lt;p>只能在栈上（静态分配）&lt;/p>
&lt;p>方法：将 new 和 delete 重载为私有&lt;/p>
&lt;p>原因：在堆上生成对象，其过程分为两阶段：第一阶段，&lt;strong>使用 new 在堆上寻找可用内存，分配给对象&lt;/strong>；第二阶段，调用构造函数生成对象。将 new 操作设置为私有，那么第一阶段就无法完成，就不能够在堆上生成对象。&lt;/p>
&lt;h2 id="如果想将某个类用作基类为什么该类必须定义而非声明">如果想将某个类用作基类，为什么该类必须定义而非声明？&lt;/h2>
&lt;p>派生类为了使用从基类继承而来的成员，必须知道他们的具体实现，而定义可以提供这些成员的具体实现。&lt;/p>
&lt;p>来自GPT3.5。&lt;/p>
&lt;h2 id="继承机制中对象之间如何转换指针和引用之间如何转换">继承机制中对象之间如何转换？指针和引用之间如何转换？&lt;/h2>
&lt;ul>
&lt;li>向上类型转换
&lt;ul>
&lt;li>将派生类指针或引用转换为基类的指针或引用被称为向上类型转换，向上类型转换会自动进行，而且向上类型转换是安全的。&lt;/li>
&lt;li>内存里面：基类对象相当于只是换了个地址。换成了派生类对象中存储基类成员的内存地址。但是派生类对象中有的，基类没有的那些变量仍然留在了内存中。（保留了再次从基类转换成派生类的可能性）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>向下类型转换
&lt;ul>
&lt;li>将基类指针或引用转换为派生类指针或引用被称为向下类型转换，向下类型转换不会自动进行，因为一个基类对应几个派生类，所以需要使用dynamic_cast进行向下类型转换。（一般来说&lt;a href="https://blog.csdn.net/m0_37701628/article/details/117573791">先向上转换后，才能使用向下转换&lt;/a>，将基类重新变为派生类，执行派生类的额外方法）&lt;/li>
&lt;li>内存里面：相当于把基类起始地址赋值给派生类对象，因为基类有的成员，派生类中也一定有。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://blog.csdn.net/baidu_35679960/article/details/80821222">https://blog.csdn.net/baidu_35679960/article/details/80821222&lt;/a>&lt;/p></content><category scheme="https://keepjolly.com/posts/" term="posts" label="posts"/><category scheme="https://keepjolly.com/posts/learn/" term="learn" label="learn"/><category scheme="https://keepjolly.com/tags/interview/" term="Interview" label="Interview"/></entry><entry><title type="text">面试之CPP基础知识-2</title><link rel="alternate" type="text/html" href="https://keepjolly.com/posts/learn/interview-basic-cpp-2/"/><id>https://keepjolly.com/posts/learn/interview-basic-cpp-2/</id><updated>2024-01-13T13:59:11+00:00</updated><published>2024-01-13T21:52:05+08:00</published><summary type="html">struct和class的区别 相同点 两者都拥有成员函数、公有和私有部分 任何可以使用s……</summary><content type="html">&lt;h2 id="struct和class的区别">struct和class的区别&lt;/h2>
&lt;p>&lt;strong>相同点&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>两者都拥有成员函数、公有和私有部分&lt;/li>
&lt;li>任何可以使用struct完成的工作，同样可以使用class完成&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>不同点&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>struct默认访问权限是public，class默认是private&lt;/li>
&lt;li>struct默认继承权限是public，class默认是private&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>引申&lt;/strong>：C++和C的struct区别&lt;/p>
&lt;ul>
&lt;li>
&lt;p>C语言中：struct是用户自定义数据类型（UDT），只能是&lt;strong>变量的集合体&lt;/strong>；C++中struct是抽象数据类型（ADT），是类的一种特例&lt;/p>
&lt;/li>
&lt;li>
&lt;p>一个结构标记声明后，在C中必须在结构标记前加上struct，才能做结构类型名（除：typedef struct class{};）；C++中结构体标记（结构体名）可以直接作为结构体类型名使用&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="const和static的作用">const和static的作用&lt;/h2>
&lt;p>&lt;strong>static&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>不考虑类的情况
&lt;ul>
&lt;li>隐藏。所有不加static的全局变量和函数具有全局可见性，可以在其他文件中使用，加了之后只能在该文件中使用&lt;/li>
&lt;li>默认初始化为0，包括未初始化的全局静态变量与局部静态变量，都存在全局未初始化区&lt;/li>
&lt;li>静态变量在函数内定义，始终存在，且只进行一次初始化，具有记忆性，其&lt;strong>作用范围与局部变量相同&lt;/strong>，函数退出后仍然存在，但不能使用&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>考虑类的情况
&lt;ul>
&lt;li>static成员变量：不能在类声明中初始化，必须在类外初始化，（初始化时不需要标示为static，只有static才能在类外初始化）；可以不创建对象直接使用，并且所有对象共享该变量。&lt;/li>
&lt;li>static成员函数：不具有this指针，只能访问static修饰的变量和函数；&lt;strong>不能被声明为const、volatile和虚函数&lt;/strong>&lt;/li>
&lt;li>static修饰的成员可以被非static成员函数任意访问&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>const&lt;/strong>&lt;/p>
&lt;p>&lt;strong>修饰的东西不能被修改&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>不考虑类的情况&lt;/p>
&lt;ul>
&lt;li>const常量在定义时必须初始化，之后无法更改
&lt;ul>
&lt;li>修饰变量，说明该变量不可以被改变；&lt;/li>
&lt;li>修饰指针，分为指针常量(pointer to const)和常量指针(const pointer)；&lt;/li>
&lt;li>修饰引用，指向常量的引用（reference to const），用于形参类型，即避免了拷贝，又避免了函数对值的修改；&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>const也能隐藏变量（再加extern就不能了）（&lt;a href="https://blog.csdn.net/RayJinStudio/article/details/114643211">vscode编译多个文件&lt;/a>）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>考虑类的情况&lt;/p>
&lt;ul>
&lt;li>const成员变量：最好通过构造函数初始化列表进行初始化，且初始化后不能修改。（不同类对象对其const数据成员的值可以不同，所以不建议在类中声明时初始化）&lt;/li>
&lt;li>const成员函数：不可以改变非mutable数据的值。（const对象不可以调用非const成员函数；非const对象都可以调用；）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="顶层const和底层const">顶层const和底层const&lt;/h2>
&lt;p>&lt;strong>概念区分&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>顶层&lt;/strong>const：指的是const修饰的变量&lt;strong>本身&lt;/strong>是一个常量，无法修改，指的是指针，就是 * 号的右边&lt;/li>
&lt;li>&lt;strong>底层&lt;/strong>const：指的是const修饰的变量&lt;strong>所指向的对象&lt;/strong>是一个常量，指的是所指变量，就是 * 号的左边&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>举个例子&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">b1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//顶层const，b1本身是一个常量
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">b2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//底层const，b2本身可变，所指的对象是常量
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">b3&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">20&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//顶层const，b3是常量不可变
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">b4&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//前一个const为底层，后一个为顶层，b4不可变
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">b5&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//用于声明引用变量，都是底层const
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>区分作用&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>执行对象拷贝时，对象必须都具有底层const。&lt;/li>
&lt;li>使用强制类型转换函数const_cast时，只能改变运算对象的底层const
&lt;a href="https://zhuanlan.zhihu.com/p/161560391">https://zhuanlan.zhihu.com/p/161560391&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="数组名和指针区别">数组名和指针区别？&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>二者均可通过增减偏移量来访问数组中的元素。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>数组名不是真正意义上的指针，可以理解为常指针，所以数组名没有自增、自减等操作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>当数组名当做形参传递给调用函数后，就失去了原有特性，退化成一般指针，多了自增、自减操作，但sizeof运算符不能再得到原数组的大小了。&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>区别在于sizeof和&amp;amp;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>假设一个数组int a[4];&lt;/p>
&lt;/li>
&lt;li>
&lt;p>sizeof(数组)得到16，sizeof(指针)得到8&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对数组取地址必须用指向长度为4的数组的指针接受，而不是指向指针的指针。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.zhihu.com/question/41805285/answer/92606735">c中，数组名跟指针有区别吗？&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="final和override关键字">final和override关键字&lt;/h2>
&lt;p>&lt;strong>override&lt;/strong>&lt;/p>
&lt;p>override指定了子类的这个函数是重写父类的虚函数，如果你名字不小心打错了的话，编译器是不会编译通过的。&lt;/p>
&lt;p>&lt;strong>final&lt;/strong>&lt;/p>
&lt;p>当不希望某个类被继承，或不希望某个虚函数被重写，可以在类名和虚函数后添加final关键字，添加final关键字后被继承或重写，编译器会报错。&lt;/p>
&lt;h2 id="拷贝初始化和直接初始化">拷贝初始化和直接初始化&lt;/h2>
&lt;ul>
&lt;li>当用于类的对象时，初始化的拷贝形式和直接形式有所不同：直接初始化直接调用与实参匹配的构造函数，拷贝初始化总是调用拷贝构造函数。拷贝初始化首先使用指定构造函数创建一个临时对象，然后用拷贝构造函数将那个临时对象拷贝到正在创建的对象。举例如下&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">string&lt;/span> &lt;span class="nf">str1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;I am a string&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="c1">//语句1 直接初始化
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="nf">str2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">str1&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="c1">//语句2 直接初始化，str1是已经存在的对象，直接调用拷贝构造函数对str2进行初始化
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">str3&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;I am a string&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">//语句3 拷贝初始化，先为字符串”I am a string“创建临时对象，再把临时对象作为参数，使用拷贝构造函数构造str3
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">str4&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">str1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">//语句4 拷贝初始化，这里相当于隐式调用拷贝构造函数，而不是调用赋值运算符函数
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>为了提高效率，允许编译器跳过创建临时对象这一步，&lt;strong>直接调用构造函数构造要创建的对象，这样就完全等价于&lt;/strong>直接初始化了&lt;/strong>（语句1和语句3等价），但是需要辨别两种情况。
&lt;ul>
&lt;li>当拷贝构造函数为private时：语句3和语句4在编译时会报错&lt;/li>
&lt;li>使用explicit修饰构造函数时：如果构造函数存在隐式转换，编译时会报错&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="初始化和赋值的区别">初始化和赋值的区别&lt;/h2>
&lt;p>AKA拷贝初始化和直接初始化&lt;/p>
&lt;p id = "欸克斯西的用法">&lt;/p>
&lt;h2 id="externc的用法">extern&amp;quot;C&amp;quot;的用法&lt;/h2>
&lt;p>为了能够&lt;strong>正确的在C++代码中调用C语言&lt;/strong>的代码：在程序中加上extern &amp;quot;C&amp;quot;后，相当于告诉编译器这部分代码是C语言写的，因此要按照C语言进行编译，而不是C++；&lt;/p>
&lt;p>哪些情况下使用extern &amp;quot;C&amp;quot;：&lt;/p>
&lt;p>（1）C++代码中调用C语言代码；&lt;/p>
&lt;p>（2）在C++中的头文件中使用；&lt;/p>
&lt;p>（3）在多个人协同开发时，可能有人擅长C语言，而有人擅长C++；&lt;/p>
&lt;p>总结出如下形式：&lt;/p>
&lt;p>（1）C++调用C函数：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//xx.h
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">extern&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="p">(){};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//xx.c
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="p">(){&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//xx.cpp
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">extern&lt;/span> &lt;span class="s">&amp;#34;C&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;xx.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（2）C调用C++函数&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//xx.h
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">extern&lt;/span> &lt;span class="s">&amp;#34;C&amp;#34;&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//xx.cpp
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//xx.c
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">extern&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="野指针和悬空指针">野指针和悬空指针&lt;/h2>
&lt;p>都是是指向无效内存区域(这里的无效指的是&amp;quot;不安全不可控&amp;quot;)的指针，访问行为将会导致未定义行为。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>野指针&lt;br>
野指针，指的是没有被初始化过的指针。为了防止出错，对于指针初始化时赋值为 &lt;code>nullptr&lt;/code>或者及时初始化。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>悬空指针 &lt;br>
悬空指针，指针最初指向的内存已经被释放了的一种指针。释放内存后及时置空指针或者引入智能指针避免悬空指针的产生。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="c和c的类型安全">C和C++的类型安全&lt;/h2>
&lt;p>&lt;strong>什么是类型安全？&lt;/strong>&lt;/p>
&lt;p>类型安全很大程度上可以等价于内存安全，类型安全的代码不会试图访问自己没被授权的内存区域。&lt;/p>
&lt;p>&lt;strong>（1）C的类型安全&lt;/strong>&lt;/p>
&lt;p>C只在局部上下文中表现出类型安全，比如试图从一种结构体的指针转换成另一种结构体的指针时，编译器将会报告错误，除非使用显式类型转换。然而，C中相当多的操作是不安全的。以下是两个十分常见的例子：&lt;/p>
&lt;ul>
&lt;li>printf格式输出&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="http://oss.interviewguide.cn/img/202205212341869.png" alt="">&lt;/p>
&lt;p>上述代码中，使用%d控制整型数字的输出，没有问题，但是改成%f时，明显输出错误，再改成%s时，运行直接报segmentation fault错误&lt;/p>
&lt;ul>
&lt;li>malloc函数的返回值&lt;/li>
&lt;/ul>
&lt;p>malloc是C中进行内存分配的函数，它的返回类型是void*即空类型指针，一旦出现int* pInt=(int*)malloc(100*sizeof(char))就很可能带来一些问题，而这样的转换C并不会提示错误。&lt;/p>
&lt;p>&lt;strong>（2）C++的类型安全&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>操作符new返回的指针类型严格与对象匹配，而不是void*&lt;/p>
&lt;/li>
&lt;li>
&lt;p>C中很多以void*为参数的函数可以改写为C++模板函数，而模板是支持类型检查的；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>引入const关键字代替#define constants 10，它是有类型、有作用域的，而#define constants 10只是简单的文本替换&lt;/p>
&lt;/li>
&lt;li>
&lt;p>一些#define宏可被改写为inline函数，结合函数的重载，可在类型安全的前提下支持多种类型，当然改写为模板也能保证类型安全&lt;/p>
&lt;/li>
&lt;li>
&lt;p>C++提供了&lt;strong>dynamic_cast&lt;/strong>关键字，使得转换过程更加安全，因为dynamic_cast比static_cast涉及更多具体的类型检查。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="重载重写覆盖和隐藏的区别">重载、重写（覆盖）和隐藏的区别&lt;/h2>
&lt;p>（1）重载（overload）&lt;/p>
&lt;p>重载是指在同一范围定义中的同名成员函数才存在重载关系。主要特点是函数名相同，参数类型和数目有所不同，无法重载&lt;strong>仅按返回类型区分的&lt;/strong>函数。重载和函数成员是否是虚函数无关。举个例子：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">A&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">fun&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">fun&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">fun&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">double&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">double&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">fun&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（2）重写（覆盖）（override）&lt;/p>
&lt;p>重写指的是在派生类中覆盖基类中的同名虚函数，且：&lt;/p>
&lt;ul>
&lt;li>与基类的虚函数有相同的参数个数&lt;/li>
&lt;li>与基类的虚函数有相同的参数类型&lt;/li>
&lt;li>与基类的虚函数有相同的返回值类型&lt;/li>
&lt;/ul>
&lt;p>重载与重写的区别：&lt;/p>
&lt;ul>
&lt;li>重写是父类和子类之间的垂直关系，重载是不同函数之间的水平关系&lt;/li>
&lt;li>重写要求参数列表相同，重载则要求参数列表不同，返回值不要求&lt;/li>
&lt;li>重写关系中，调用方法根据对象类型决定，重载根据调用时实参表与形参表的对应关系来选择函数体&lt;/li>
&lt;/ul>
&lt;p>（3）隐藏（hide）&lt;/p>
&lt;p>隐藏指的是某些情况下，派生类中的函数屏蔽了基类中的同名函数，包括以下情况：&lt;/p>
&lt;ul>
&lt;li>两个函数参数相同，但是基类函数不是虚函数。**和重写的区别在于基类函数是否是虚函数。**举个例子：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//父类
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">A&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">fun&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;A中的fun函数&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//子类
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 必须是public继承才能调用父类方法
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 使得继承的方法变成public
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">B&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">A&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//隐藏父类的fun函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">fun&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;B中的fun函数&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">B&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">fun&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//调用B中的fun函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">fun&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//调用A中fun函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>两个函数参数不同，无论基类函数是不是虚函数，都会被隐藏。和重载的区别在于两个函数不在同一个类中。举个例子：&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//父类
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">A&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">fun&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;A中的fun函数&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//子类
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">B&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">A&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//隐藏父类的fun函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">fun&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;A中的fun函数&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">B&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">fun&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//报错，调用B中的fun函数，参数类型不对
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">fun&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//调用A中fun函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>补充：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 父类
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">A&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">fun&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// 虚函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;This is A fun &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;This is A add &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 子类
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">B&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">A&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">fun&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// 覆盖
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;this is B fun &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// 隐藏
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;This is B add &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 基类指针指向派生类对象时，基类指针可以直接调用到派生类的覆盖函数，也可以通过 :: 调用到基类被覆盖的虚函数；
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 而基类指针只能调用基类的被隐藏函数，**无法识别派生类中的隐藏函数。**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">A&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">B&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">p&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">fun&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 调用子类 fun 覆盖函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">fun&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 调用父类 fun
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// p-&amp;gt;add(1); // 错误，识别的是 A 类中的 add 函数，参数不匹配
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// p-&amp;gt;B::add(1); // 错误，无法识别子类 add 函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;a href="https://stackoverflow.com/questions/11923890/reason-for-c-member-function-hiding">https://stackoverflow.com/questions/11923890/reason-for-c-member-function-hiding&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="c有哪几种的构造函数">C++有哪几种的构造函数&lt;/h2>
&lt;p>C++中的构造函数可以分为4类：&lt;/p>
&lt;ul>
&lt;li>默认构造函数&lt;/li>
&lt;li>初始化构造函数（有参数）&lt;/li>
&lt;li>拷贝构造函数&lt;/li>
&lt;li>转换构造函数
&lt;ul>
&lt;li>&lt;a href="http://c.biancheng.net/view/2339.html">http://c.biancheng.net/view/2339.html&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>移动构造函数（move和右值引用）&lt;/li>
&lt;li>委托构造函数
&lt;ul>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-cn/cpp/cpp/delegating-constructors?view=msvc-170">https://learn.microsoft.com/zh-cn/cpp/cpp/delegating-constructors?view=msvc-170&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>举个例子：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Student&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Student&lt;/span>&lt;span class="p">(){&lt;/span>&lt;span class="c1">//默认构造函数，没有参数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">age&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">20&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">num&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1000&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 注意n不能赋默认值，否则会跟转换构造函数重复
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">Student&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">age&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">num&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">){};&lt;/span> &lt;span class="c1">//初始化构造函数，有参数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">Student&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Student&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">){&lt;/span>&lt;span class="c1">//拷贝构造函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">age&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">age&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">num&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Student&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="p">){&lt;/span> &lt;span class="c1">//转换构造函数只有一个形参
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">age&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">num&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1002&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">~&lt;/span>&lt;span class="n">Student&lt;/span>&lt;span class="p">(){}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">age&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">num&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Student&lt;/span> &lt;span class="n">s1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 默认
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">Student&lt;/span> &lt;span class="n">s2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">18&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1001&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 初始化
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">Student&lt;/span> &lt;span class="n">s3&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 转换
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">Student&lt;/span> &lt;span class="n">s4&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s3&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 拷贝
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>默认构造函数和初始化构造函数在定义类的对象，完成对象的初始化工作&lt;/li>
&lt;li>复制构造函数用于复制本类的对象&lt;/li>
&lt;li>转换构造函数用于将其他类型的变量，隐式转换为本类对象，如int to Student&lt;/li>
&lt;/ul>
&lt;h2 id="浅拷贝和深拷贝的区别">浅拷贝和深拷贝的区别&lt;/h2>
&lt;p>&lt;strong>浅拷贝&lt;/strong>&lt;/p>
&lt;p>浅拷贝后两个指针指向同一个内存空间，如果原来的指针所指向的资源释放了，那么再释放浅拷贝的指针的资源就会出现错误。可以用shared_ptr解决。&lt;/p>
&lt;p>&lt;strong>深拷贝&lt;/strong>&lt;/p>
&lt;p>深拷贝后两个指针指向两个内存空间，它不但对指针进行拷贝，而且对指针指向的内容进行拷贝。&lt;/p>
&lt;h2 id="各种访问权限和各种继承权限">各种访问权限和各种继承权限&lt;/h2>
&lt;p>&lt;strong>总结&lt;/strong>&lt;/p>
&lt;p>一、访问权限&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>访问权限&lt;/th>
&lt;th>外部&lt;/th>
&lt;th>派生类&lt;/th>
&lt;th>内部&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>public&lt;/td>
&lt;td>✔&lt;/td>
&lt;td>✔&lt;/td>
&lt;td>✔&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>protected&lt;/td>
&lt;td>❌&lt;/td>
&lt;td>✔&lt;/td>
&lt;td>✔&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>private&lt;/td>
&lt;td>❌&lt;/td>
&lt;td>❌&lt;/td>
&lt;td>✔&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>public、protected、private 的访问权限范围关系：&lt;/p>
&lt;p>public &amp;gt; protected &amp;gt; private&lt;/p>
&lt;p>二、继承权限&lt;/p>
&lt;ol>
&lt;li>派生类继承自基类的成员权限有三种状态：public、protected、private，排序为 public &amp;gt; protected &amp;gt; private&lt;/li>
&lt;li>派生类对基类成员的访问权限取决于两点：&lt;strong>一、继承方式；二、基类成员在基类中的访问权限&lt;/strong>&lt;/li>
&lt;li>基类成员在派生类中的访问权限：访问权限 &amp;gt; 继承权限 ? 继承权限 : 访问权限。不会继承private成员&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>public 继承 + private 成员 =&amp;gt; 不可见&lt;/li>
&lt;li>public 继承 + protected 成员 =&amp;gt; protected&lt;/li>
&lt;li>protected 继承 + public 成员 =&amp;gt; protected&lt;/li>
&lt;li>private 继承 + protected 成员 =&amp;gt; private&lt;/li>
&lt;li>private 继承 + public 成员 =&amp;gt; private&lt;/li>
&lt;/ul>
&lt;h2 id="如何用代码判断大小端存储">如何用代码判断大小端存储？&lt;/h2>
&lt;p>大端存储：数据的高字节存储在&lt;strong>低地址&lt;/strong>中&lt;/p>
&lt;p>&lt;img src="http://oss.interviewguide.cn/img/202205071832707.png" alt="">&lt;/p>
&lt;p>小端存储：数据的低字节存储在&lt;strong>低地址&lt;/strong>中&lt;/p>
&lt;p>&lt;img src="http://oss.interviewguide.cn/img/202205071832785.png" alt="">&lt;/p>
&lt;p>&lt;strong>所以在Socket编程中，往往需要将操作系统所用的小端存储的IP地址转换为大端存储，这样才能进行网络传输&lt;/strong>&lt;/p>
&lt;p>如何在代码中进行判断呢？&lt;/p>
&lt;p>&lt;strong>方式一：使用强制类型转换&lt;/strong>-这种法子不错&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x12345678&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 由于int和char的长度不同，借助int型转换成char型，只会留下低地址的部分
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mh">0x12&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;big endian&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mh">0x78&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;little endian&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>方式二：巧用union联合体&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//union联合体的重叠式存储，endian联合体占用内存的空间为每个成员字节长度的最大值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">union&lt;/span> &lt;span class="nc">endian&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="n">ch&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">endian&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">value&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x12345678&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//a和ch共用4字节的内存空间
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ch&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mh">0x12&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;big endian&amp;#34;&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ch&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mh">0x78&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;little endian&amp;#34;&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="volatilemutable和explicit关键字的用法">volatile、mutable和explicit关键字的用法&lt;/h2>
&lt;p>(1)&lt;strong>volatile&lt;/strong>&lt;/p>
&lt;p>volatile 关键字是一种类型修饰符，&lt;strong>用它声明的类型变量表示可以被某些编译器未知的因素更改&lt;/strong>，&lt;/p>
&lt;p>当要求使用 volatile 声明的变量的值的时候，&lt;strong>系统总是重新从它所在的内存读取数据&lt;/strong>。&lt;strong>多线程&lt;/strong>中被几个任务共享的变量需要定义为volatile类型。&lt;/p>
&lt;p>拓展：&lt;/p>
&lt;ul>
&lt;li>可以把一个非volatile int赋给volatile int，但是不能把非volatile对象赋给一个volatile对象。&lt;/li>
&lt;li>除了基本类型外，对用户定义类型也可以用volatile类型进行修饰。&lt;/li>
&lt;li>C++中一个有volatile标识符的类只能访问它接口的子集，一个由类的实现者控制的子集。用户只能用const_cast来获得对类型接口的完全访问。此外，volatile向const一样会从类传递到它的成员。&lt;/li>
&lt;/ul>
&lt;p>（2）&lt;strong>mutable&lt;/strong>&lt;/p>
&lt;p>C++中，被mutable修饰的变量，将永远处于可变的状态，即使在一个const函数中。&lt;/p>
&lt;p>样例一&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">person&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">m_A&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">mutable&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">m_B&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">//特殊变量 在常函数里值也可以被修改
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">add&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span>&lt;span class="c1">//在函数里不可修改this指针指向的值 常量指针
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">m_A&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">//错误 不可修改值，this已经被修饰为常量指针
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">m_B&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">20&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">//正确
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（3）&lt;strong>explicit&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>explicit 关键字只能用于类的&lt;strong>构造函数&lt;/strong>（运行时才会报错）&lt;/li>
&lt;li>被explicit修饰的构造函数的类，不能发生相应的隐式类型转换&lt;/li>
&lt;/ul>
&lt;h2 id="什么情况下会调用拷贝构造函数">什么情况下会调用拷贝构造函数&lt;/h2>
&lt;ul>
&lt;li>用类的一个实例化对象去初始化另一个对象的时候&lt;/li>
&lt;li>函数的参数是类的对象时（非引用传递）&lt;/li>
&lt;li>函数的返回值是函数体内局部对象的类的对象时&lt;/li>
&lt;li>区分拷贝赋值运算符
&lt;ul>
&lt;li>拷贝构造函数时对象是空的&lt;/li>
&lt;li>拷贝赋值运算符时对象不一定为空，所以需要判断this以及拷贝指针需要深拷贝&lt;/li>
&lt;li>&lt;a href="https://blog.csdn.net/u012814856/article/details/79753031#t3">https://blog.csdn.net/u012814856/article/details/79753031#t3&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>总结就是：即使发生NRV优化的情况下，Linux+ g++的环境是不管值返回方式还是引用方式返回的方式都不会发生拷贝构造函数，而Windows + VS2019在值返回的情况下发生拷贝构造函数，引用返回方式则不发生拷贝构造函数(自行测试)。&lt;/p>
&lt;p>&lt;strong>在VS2019下进行下述实验：&lt;/strong>&lt;/p>
&lt;p>举个例子：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">A&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">A&lt;/span>&lt;span class="p">(){};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">A&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">A&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;copy constructor is called&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">~&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">(){};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">useClassA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">A&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">A&lt;/span> &lt;span class="nf">getClassA&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// 此时会发生拷贝构造函数的调用，虽然发生NRV优化，但是依然调用拷贝构造函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">A&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// A&amp;amp; getClassA2()// VS2019下，此时编辑器会进行NRV优化,不调用拷贝构造函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//{
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// A* a = new A();
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// return *a;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// }
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">A&lt;/span> &lt;span class="n">a1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">a3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">a4&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">A&lt;/span> &lt;span class="n">a2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 调用拷贝构造函数,对应情况1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">useClassA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a1&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 调用拷贝构造函数，对应情况2
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">a3&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getClassA&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 发生NRV优化，但是值返回，依然会有拷贝构造函数的调用 情况3
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">a4&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getClassA2&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 发生NRV优化，且引用返回自身，不会调用
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>情况1比较好理解&lt;/p>
&lt;p>情况2的实现过程是，调用函数时先根据传入的实参产生临时对象，再用拷贝构造去初始化这个临时对象，在函数中与形参对应，函数调用结束后析构临时对象&lt;/p>
&lt;p>情况3在执行return时，理论的执行过程是：产生临时对象，调用拷贝构造函数把返回对象拷贝给临时对象，函数执行完先析构局部变量，再析构临时对象， 依然会调用拷贝构造函数&lt;/p></content><category scheme="https://keepjolly.com/posts/" term="posts" label="posts"/><category scheme="https://keepjolly.com/posts/learn/" term="learn" label="learn"/><category scheme="https://keepjolly.com/tags/interview/" term="Interview" label="Interview"/></entry><entry><title type="text">面试之CPP基础知识-1</title><link rel="alternate" type="text/html" href="https://keepjolly.com/posts/learn/interview-basic-cpp-1/"/><id>https://keepjolly.com/posts/learn/interview-basic-cpp-1/</id><updated>2024-01-13T13:59:11+00:00</updated><published>2024-01-13T21:51:17+08:00</published><summary type="html">https://www.cnblogs.com/marjosong/p/13801160.html 在main执行之前和之后执行的代码可能是什么？ 牛客网 全局对象的构造函数在main函……</summary><content type="html">&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2024/01/20240113205617.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="Pasted image 20230927121914">
&lt;a href="https://www.cnblogs.com/marjosong/p/13801160.html">https://www.cnblogs.com/marjosong/p/13801160.html&lt;/a>&lt;/p>
&lt;h2 id="在main执行之前和之后执行的代码可能是什么">在main执行之前和之后执行的代码可能是什么？&lt;/h2>
&lt;p>&lt;a href="https://www.nowcoder.com/questionTerminal/113e8cc887a7412eb42627d8685bc19c?">牛客网&lt;/a>&lt;/p>
&lt;p>全局对象的构造函数在main函数之前调用，析构函数在main函数之后调用。&lt;/p>
&lt;p>局部栈对象在定义的时候调用构造函数，出了可见范围的时候调用析构函数。&lt;/p>
&lt;p>堆对象在new的时候调用构造函数，delete的时候调用析构。&lt;/p>
&lt;p>全局静态对象和全局对象一样。&lt;/p>
&lt;p>局部静态对象在定义的时候调用构造，main函数之后调用析构&lt;/p>
&lt;hr>
&lt;p>&lt;strong>main函数执行之前&lt;/strong>，主要就是初始化系统相关资源：&lt;/p>
&lt;ul>
&lt;li>配置堆栈&lt;/li>
&lt;li>初始化静态&lt;code>static&lt;/code>变量和&lt;code>global&lt;/code>全局变量，即&lt;code>.data&lt;/code>段的内容&lt;/li>
&lt;li>将未初始化的全局变量赋初值：数值型&lt;code>short&lt;/code>，&lt;code>int&lt;/code>，&lt;code>long&lt;/code>等为&lt;code>0&lt;/code>，&lt;code>bool&lt;/code>为&lt;code>FALSE&lt;/code>，指针为&lt;code>NULL&lt;/code>等等，即&lt;code>.bss&lt;/code>段的内容&lt;/li>
&lt;li>全局对象初始化，在&lt;code>main&lt;/code>之前调用构造函数，（可以利用构造函数先执行代码）&lt;/li>
&lt;li>将main函数的参数&lt;code>argc&lt;/code>，&lt;code>argv&lt;/code>等传递给&lt;code>main&lt;/code>函数，然后才真正运行&lt;code>main&lt;/code>函数&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>main函数执行之后&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>全局对象的析构函数会在main函数之后执行；&lt;/li>
&lt;li>可以用 &lt;strong>&lt;code>atexit&lt;/code>&lt;/strong> 注册一个函数，它会在main 之后执行;&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://blog.csdn.net/qq_44844115/article/details/98945612">https://blog.csdn.net/qq_44844115/article/details/98945612&lt;/a>&lt;/p>
&lt;h2 id="结构体内存对齐问题">结构体内存对齐问题？&lt;/h2>
&lt;ul>
&lt;li>结构体内成员按照声明顺序存储，第一个成员地址和整个结构体地址相同。&lt;/li>
&lt;li>一般按结构体中size最大的成员对齐&lt;/li>
&lt;li>对齐后，只需访问一次就可获得值&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>c++11以后引入两个关键字 &lt;a href="https://zh.cppreference.com/w/cpp/language/alignas">alignas&lt;/a>与 &lt;a href="https://zh.cppreference.com/w/cpp/language/alignof">alignof&lt;/a>。其中&lt;code>alignof&lt;/code>可以计算出类型的对齐方式，&lt;code>alignas&lt;/code>可以指定结构体的对齐方式。&lt;/p>
&lt;p>若&lt;code>alignas&lt;/code>小于自然对齐的最小单位，则被忽略。&lt;/p>
&lt;ul>
&lt;li>如果想使用单字节对齐的方式，应该使用&lt;code>#pragma pack(push,1)&lt;/code>或者使用&lt;code>__attribute__((packed))&lt;/code>。&lt;/li>
&lt;/ul>
&lt;h2 id="指针和引用的区别">指针和引用的区别&lt;/h2>
&lt;ol>
&lt;li>引用是变量的别名，指针是存储变量地址的变量。&lt;/li>
&lt;li>引用初始化后不能被改变，指针可以改变所指的对象。&lt;/li>
&lt;li>&lt;strong>不存在指向空值的引用，但是存在指向空值的指针&lt;/strong>。&lt;/li>
&lt;/ol>
&lt;h2 id="在传递函数参数时什么时候该使用指针什么时候该使用引用呢">在传递函数参数时，什么时候该使用指针，什么时候该使用引用呢？&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>需要返回函数内局部变量的时候用指针。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>当实参是指针时传递给形参用指针。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对栈空间大小比较敏感（比如递归）的时候使用引用。使用引用传递不需要创建临时变量，开销要更小&lt;/p>
&lt;/li>
&lt;li>
&lt;p>类对象作为参数传递的时候使用引用，这是C++类对象传递的标准方式&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="堆和栈的区别">堆和栈的区别&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>申请方式不同。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>栈由系统自动分配。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>堆是自己申请和释放的。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>申请大小限制不同。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>栈是向栈底扩展，大小固定，可以通过ulimit -a查看，由ulimit -s修改。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>堆向高地址扩展，是不连续的内存区域，大小可以灵活调整。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>申请效率不同。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>栈由系统分配，速度快，不会有碎片。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>堆由程序员分配，速度慢，且会有碎片。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>栈空间默认是4M, 堆区一般是 1G - 4G&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">&lt;/th>
&lt;th>堆&lt;/th>
&lt;th>栈&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">&lt;strong>管理方式&lt;/strong>&lt;/td>
&lt;td>堆中资源由程序员控制（容易产生memory leak）&lt;/td>
&lt;td>栈资源由编译器自动管理，无需手工控制&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;strong>内存管理机制&lt;/strong>&lt;/td>
&lt;td>系统有一个记录空闲内存地址的链表，当系统收到程序申请时，遍历该链表，寻找第一个空间大于申请空间的堆结点，删 除空闲结点链表中的该结点，并将该结点空间分配给程序（大多数系统会在这块内存空间首地址记录本次分配的大小，这样delete才能正确释放本内存空间，另外系统会将多余的部分重新放入空闲链表中）&lt;/td>
&lt;td>只要栈的剩余空间大于所申请空间，系统为程序提供内存，否则报异常提示栈溢出。（这一块理解一下链表和队列的区别，不连续空间和连续空间的区别，应该就比较好理解这两种机制的区别了）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;strong>空间大小&lt;/strong>&lt;/td>
&lt;td>堆是不连续的内存区域（因为系统是用链表来存储空闲内存地址，自然不是连续的），堆大小受限于计算机系统中有效的虚拟内存（32bit 系统理论上是4G），所以堆的空间比较灵活，比较大&lt;/td>
&lt;td>栈是一块连续的内存区域，大小是操作系统预定好的，windows下栈大小是2M（也有是1M，在 编译时确定，VC中可设置）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;strong>碎片问题&lt;/strong>&lt;/td>
&lt;td>对于堆，频繁的new/delete会造成大量碎片，使程序效率降低&lt;/td>
&lt;td>对于栈，它是有点类似于数据结构上的一个先进后出的栈，进出一一对应，不会产生碎片。（看到这里我突然明白了为什么面试官在问我堆和栈的区别之前先问了我栈和队列的区别）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;strong>生长方向&lt;/strong>&lt;/td>
&lt;td>堆向上，向高地址方向增长。&lt;/td>
&lt;td>栈向下，向低地址方向增长。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;strong>分配方式&lt;/strong>&lt;/td>
&lt;td>堆都是动态分配（没有静态分配的堆）&lt;/td>
&lt;td>栈有静态分配和动态分配，静态分配由编译器完成（如局部变量分配），动态分配由alloca函数分配，但栈的动态分配的资源由编译器进行释放，无需程序员实现。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;strong>分配效率&lt;/strong>&lt;/td>
&lt;td>堆由C/C++函数库提供，机制很复杂。所以堆的效率比栈低很多。&lt;/td>
&lt;td>栈是其系统提供的数据结构，计算机在底层对栈提供支持，分配专门 寄存器存放栈地址，栈操作有专门指令。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="你觉得堆快一点还是栈快一点">你觉得堆快一点还是栈快一点？&lt;/h2>
&lt;p>毫无疑问是栈快一点。
因为栈是由操作系统分配的，对其有专门的优化，而堆是由程序员分配的，需要先找到合适的内存块，再进行分配。&lt;/p>
&lt;h2 id="区别以下指针类型">区别以下指针类型？&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">)[&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>
&lt;p>int *p[10]表示指针数组，强调数组概念，是一个数组变量，数组大小为10，数组内每个元素都是指向int类型的指针变量。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>int (*p)[10]表示数组指针，强调是指针，只有一个变量，是指针类型，不过指向的是一个int类型的数组，这个数组大小是10。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://blog.csdn.net/men_wen/article/details/52694069">https://blog.csdn.net/men_wen/article/details/52694069&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://blog.csdn.net/lirendada/article/details/122931987">https://blog.csdn.net/lirendada/article/details/122931987&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>int *p(int)是函数声明，函数名是p，参数是int类型的，返回值是int *类型的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>int (*p)(int)是函数指针，强调是指针，该指针指向的函数具有int类型参数，并且返回值是int类型的。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p id = "newdelete与mallocfree的异同">&lt;/p>
&lt;h2 id="new--delete-与-malloc--free的异同">new / delete 与 malloc / free的异同&lt;/h2>
&lt;p>&lt;strong>相同点&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>都可用于内存的动态申请和释放&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>不同点&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>new自动计算要分配的空间大小，malloc需要手动计算&lt;/li>
&lt;li>new是类型安全的，malloc不是。例如：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">float&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">];&lt;/span> &lt;span class="c1">//编译错误
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">double&lt;/span>&lt;span class="p">));&lt;/span>&lt;span class="c1">//编译无错误
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>new先分配足够空间并调用相关对象的构造函数；delete先调用析构函数释放资源，然后释放该对象所用内存。后者只是分配空间和释放空间。&lt;/li>
&lt;li>malloc和free返回的是void类型指针（必须进行类型转换），new和delete返回的是具体类型指针。&lt;/li>
&lt;/ul>
&lt;h2 id="new和delete是如何实现的">new和delete是如何实现的？&lt;/h2>
&lt;ul>
&lt;li>new的实现过程是：首先调用名为&lt;strong>operator new&lt;/strong>的标准库函数，为其分配该对象的大小的内存；接下来运行该类型的一个构造函数，初始化构造对象；最后返回指向该对象的指针&lt;/li>
&lt;li>delete的实现过程：对指针指向的对象运行适当的析构函数；然后通过释放该对象所用内存&lt;/li>
&lt;/ul>
&lt;h2 id="有mallocfree为什么还需要newdelete呢">有malloc/free，为什么还需要new/delete呢？&lt;/h2>
&lt;p>类在创建的时候需要调用构造函数，但是malloc只是分配内存，类在销毁的时候需要调用析构函数，但是free只能释放内存。&lt;/p>
&lt;h2 id="被free回收的内存是立即返还给操作系统吗">被free回收的内存是立即返还给操作系统吗？&lt;/h2>
&lt;p>不是的，被free回收的内存会首先被ptmalloc使用双链表保存起来，当用户下一次申请内存的时候，会尝试从这些内存中寻找合适的返回。这样就避免了频繁的系统调用，占用过多的系统资源。同时ptmalloc也会尝试对小块内存进行合并，避免过多的内存碎片。&lt;/p>
&lt;h2 id="宏定义和函数有何区别">宏定义和函数有何区别？&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>宏定义 #define&lt;/th>
&lt;th>函数&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>宏定义，相当于字符替换&lt;/td>
&lt;td>跳转到函数执行处&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>预处理器处理&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>无类型安全检查&lt;/td>
&lt;td>有类型安全检查&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>无返回值&lt;/td>
&lt;td>带返回值&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;del>- 宏定义不要在最后加分号。&lt;/del>&lt;/p>
&lt;h2 id="宏定义和typedef区别">宏定义和typedef区别？&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>宏定义&lt;/th>
&lt;th>typedef&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>宏定义，相当于字符替换&lt;/td>
&lt;td>定义类型别名&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>预处理阶段&lt;/td>
&lt;td>编译阶段&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>无类型安全检查&lt;/td>
&lt;td>有类型安全检查&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>不是语句&lt;/td>
&lt;td>是语句加分号&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>#define p_int int * 显示 int*
typedef int *p_int; 显示p_int&lt;/p>
&lt;h2 id="define宏定义和const的区别">define宏定义和const的区别&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>宏定义&lt;/th>
&lt;th>const&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>宏定义，相当于字符替换&lt;/td>
&lt;td>限制变量&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>预处理阶段&lt;/td>
&lt;td>编译阶段&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>无类型安全检查&lt;/td>
&lt;td>有类型安全检查&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>不分配内存&lt;/td>
&lt;td>分配内存&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="内联函数和宏定义的区别">内联函数和宏定义的区别&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>宏定义&lt;/th>
&lt;th>inline&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>调用处字符替换&lt;/td>
&lt;td>调用处字符替换&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>预处理阶段&lt;/td>
&lt;td>编译阶段&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>无类型安全检查&lt;/td>
&lt;td>有类型安全检查&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>不分配内存&lt;/td>
&lt;td>分配内存&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>无&lt;/td>
&lt;td>有返回值&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="变量声明和定义区别">变量声明和定义区别？&lt;/h2>
&lt;ul>
&lt;li>声明仅仅是把变量的&lt;strong>声明的位置及类型提供给编译器&lt;/strong>，并不分配内存空间；定义要在定义的地方为其&lt;strong>分配存储空间&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;h2 id="strlen和sizeof区别">strlen和sizeof区别？&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>sizeof&lt;/th>
&lt;th>strlen&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>运算符&lt;/td>
&lt;td>库函数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>任何类型&lt;/td>
&lt;td>只能string&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>编译期&lt;/td>
&lt;td>编译期&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>不能得到动态分配的空间大小&lt;/td>
&lt;td>可以&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>算上'\0'&lt;/td>
&lt;td>不算上&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">str&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 8
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">strlen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">str&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 4
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;1234&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 5
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">strlen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 4
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>一个指针占多少字节？&lt;/p>
&lt;p>在64位的编译环境下，指针的占用大小为8字节；&lt;/p>
&lt;p>而在32位环境下，指针占用大小为4字节。&lt;/p>
&lt;p>一个指针占内存的大小跟编译环境有关，而与机器的位数无关&lt;/p>
&lt;h2 id="常量指针和指针常量区别">常量指针和指针常量区别？&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>指针常量强调常量，指向一个只读变量，可以写作int const *p或const int *p。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>常量指针强调指针，是一个不能改变指向的指针，必须初始化，如int *const p。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="a和a有什么区别">a和&amp;amp;a有什么区别？&lt;/h2>
&lt;p>假设数组int a[10]; int (*p)[10] = &amp;amp;a;其中：&lt;/p>
&lt;ul>
&lt;li>a是数组名，是数组首元素地址，+1表示地址值加上一个int类型的大小。如果a的值是0x00000001，加1操作后变为0x00000005。*(a + 1) = a[1]。&lt;/li>
&lt;li>&amp;amp;a是数组指针，其类型为int (*)[10]，其加1时，系统会认为是数组首地址加上整个数组的偏移（10个int型变量），值为数组a尾元素后一个元素的地址。&lt;/li>
&lt;li>不考虑数组，a是变量，&amp;amp;a是变量的地址&lt;/li>
&lt;li>二维数组取值：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{{&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">}};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// p指向一个包含3个元素的数组首地址,p+1 = int[3] + int[3]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">)[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// *(p+1)，指向下一个包含3个元素的数组首地址
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="sc">&amp;#39;\n&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 5
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// *p+4,指向第五个地址，因为数组是连续存储的，即第二行第二个元素地址
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="sc">&amp;#39;\n&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 5
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// ptr指向首元素地址，ptr+1 = int + int
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">ptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 数组指针p是“二级指针”所以要再加*
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// ptr是一级指针，直接解引用即可
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ptr&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="sc">&amp;#39;\n&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 5
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;a href="https://zhuanlan.zhihu.com/p/512246248">注意传递指针跟局部变量的关系&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.cnblogs.com/FLYMANJB/p/13357702.html">不能直接返回局部变量的引用/地址&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="c和python的区别">C++和Python的区别&lt;/h2>
&lt;p>包括但不限于：&lt;/p>
&lt;ul>
&lt;li>Python是一种脚本语言，是解释执行的，而C++是编译语言，是需要编译后在特定平台运行的。python可以很方便的跨平台，但是效率没有C++高。&lt;/li>
&lt;li>Python使用缩进来区分不同的代码块，C++使用花括号来区分&lt;/li>
&lt;li>C++中需要事先定义变量的类型，而Python不需要，Python的基本数据类型只有数字，布尔值，字符串，列表，元组等等&lt;/li>
&lt;li>Python的库函数比C++的多，调用起来很方便&lt;/li>
&lt;/ul>
&lt;h2 id="c和c语言的区别">C++和C语言的区别&lt;/h2>
&lt;ul>
&lt;li>C++中new和delete是对内存分配的运算符，取代了C中的malloc和free。&lt;/li>
&lt;li>标准C++中的字符串类取代了标准C函数库头文件中的字符数组处理函数（C中没有字符串类型）。&lt;/li>
&lt;li>C++中用来做控制态输入输出的iostream类库替代了标准C中的stdio函数库。&lt;/li>
&lt;li>C++中的try/catch/throw异常处理机制取代了标准C中的setjmp()和longjmp()函数。&lt;/li>
&lt;li>在C++中，允许有相同的函数名，不过它们的参数类型不能完全相同，这样这些函数就可以相互区别开来。而这在C语言中是不允许的。也就是C++可以重载，C语言不允许。&lt;/li>
&lt;li>C++语言中，允许变量定义语句在程序中的任何地方，只要在是使用它之前就可以；而C语言中，必须要在函数开头部分。而且C++不允许重复定义变量，C语言也是做不到这一点的&lt;/li>
&lt;li>在C++中，除了值和指针之外，新增了引用。引用型变量是其他变量的一个别名，我们可以认为他们只是名字不相同，其他都是相同的。&lt;/li>
&lt;li>C++相对与C增加了一些关键字，如：bool、using、dynamic_cast、namespace等等&lt;/li>
&lt;/ul>
&lt;h2 id="c与java的区别">C++与Java的区别&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Java语言给开发人员提供了更为简洁的语法；完全面向对象，由于JVM可以安装到任何的操作系统上，所以说它的可移植性强&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Java语言中没有指针的概念，引入了真正的数组。不同于C++中利用指针实现的“伪数组”，Java引入了真正的数组，同时将容易造成麻烦的指针从语言中去掉，这将有利于防止在C++程序中常见的因为数组操作越界等指针操作而对系统数据进行非法读写带来的不安全问题&lt;/p>
&lt;/li>
&lt;li>
&lt;p>C++也可以在其他系统运行，但是需要不同的编码（这一点不如Java，只编写一次代码，到处运行），例如对一个数字，在windows下是大端存储，在unix中则为小端存储。Java程序一般都是生成字节码，在JVM里面运行得到结果&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Java用接口(Interface)技术取代C++程序中的抽象类。接口与抽象类有同样的功能，但是省却了在实现和维护上的复杂性&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>垃圾回收&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>C++用析构函数回收垃圾，写C和C++程序时一定要注意内存的申请和释放&lt;/li>
&lt;li>Java语言不使用指针，内存的分配和回收都是自动进行的，程序员无须考虑内存碎片的问题&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>应用场景&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Java在桌面程序上不如C++实用，C++可以直接编译成exe文件，指针是c++的优势，可以直接对内存的操作，但同时具有危险性 。（操作内存的确是一项非常危险的事情，一旦指针指向的位置发生错误，或者误删除了内存中某个地址单元存放的重要数据，后果是可想而知的）&lt;/li>
&lt;li>Java在Web 应用上具有C++ 无可比拟的优势，具有丰富多样的框架&lt;/li>
&lt;li>对于底层程序的编程以及控制方面的编程，C++很灵活，因为有句柄的存在&lt;/li>
&lt;/ul></content><category scheme="https://keepjolly.com/posts/" term="posts" label="posts"/><category scheme="https://keepjolly.com/posts/learn/" term="learn" label="learn"/><category scheme="https://keepjolly.com/tags/interview/" term="Interview" label="Interview"/></entry><entry><title type="text">C-STL超全总结汇总版</title><link rel="alternate" type="text/html" href="https://keepjolly.com/posts/algorithm/stl-summary/"/><id>https://keepjolly.com/posts/algorithm/stl-summary/</id><updated>2024-01-13T13:59:11+00:00</updated><published>2024-01-13T20:52:18+08:00</published><summary type="html">文章转载自行码棋，并稍作修改 务必做到读万卷书，行万里路。 另外C版本一定要对（可能要加……</summary><content type="html">&lt;p>文章转载自&lt;a href="https://wyqz.top/p/870124582.html">行码棋&lt;/a>，并稍作修改&lt;/p>
&lt;p>务必做到&lt;strong>读万卷书，行万里路&lt;/strong>。&lt;/p>
&lt;blockquote>
&lt;p>另外C版本一定要对（可能要加编译参数&lt;code>-std=c++11&lt;/code>），C11即可，C++17或20更好。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>使DEV支持C++20 ： &lt;a href="https://blog.csdn.net/qq_50285142/article/details/122930647">https://blog.csdn.net/qq_50285142/article/details/122930647&lt;/a>
'\n' vs 'std::endl': &lt;a href="https://www.geeksforgeeks.org/endl-vs-n-in-cpp/">link&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h2 id="vector">vector&lt;/h2>
&lt;h3 id="介绍">介绍&lt;/h3>
&lt;p>&lt;code>vector&lt;/code>为可变长数组（动态数组），定义的&lt;code>vector&lt;/code>数组可以随时添加数值和删除元素。&lt;/p>
&lt;blockquote>
&lt;p>注意：&lt;strong>在局部区域中（比如局部函数里面）开vector，是在堆空间里面开的。&lt;/strong>
在局部区域开array是在栈空间开的，而栈空间比较小，如果开了非常长的array就会发生爆栈。
故局部区域&lt;strong>不可以&lt;/strong>开大长度array，但是可以开大长度&lt;code>vector&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>头文件&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;vector&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>
&lt;p>初始化&lt;/p>
&lt;ul>
&lt;li>
&lt;p>一维初始化&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//定义了一个名为a的一维数组,数组存储int类型数据
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">double&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">//定义了一个名为b的一维数组，数组存储double类型数据
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">//定义了一个名为c的一维数组，数组存储结构体类型数据，node是结构体类型
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>指定&lt;strong>长度&lt;/strong>和&lt;strong>初始值&lt;/strong>的初始化&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="c1">//定义一个长度为n的数组，初始值默认为0，下标范围[0, n - 1]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="c1">//v[0]到v[n-1]所有的元素初始值均为1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//注意：指定数组长度之后（指定长度后的数组就相当于正常的数组了）
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>初始化中有多个元素&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">};&lt;/span>&lt;span class="c1">//数组a中有五个元素，数组长度就为5
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>拷贝初始化&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="c1">//两个数组中的类型必须相同,a和b都是长度为n+1，初始值都为0的数组
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>二维初始化
定义第一维固定长度为&lt;code>5&lt;/code>，第二维可变化的二维数组&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">];&lt;/span>&lt;span class="c1">//定义可变长二维数组
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//注意：行不可变（只有5行）, 而列可变,可以在指定行添加元素
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//第一维固定长度为5，第二维长度可以改变
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>&lt;code>vector&amp;lt;int&amp;gt; v[5]&lt;/code>可以这样理解：长度为5的v数组，数组中存储的是&lt;code>vector&amp;lt;int&amp;gt; &lt;/code>数据类型，而该类型就是数组形式，故&lt;code>v&lt;/code>为二维数组。其中每个数组元素均为空，因为没有指定长度，所以第二维可变长。可以进行下述操作：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">v&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">v&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/blockquote>
&lt;p>行列均可变&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//初始化二维均可变长数组
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">//定义一个行和列均可变的二维数组
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>应用：可以在&lt;code>v&lt;/code>数组里面装多个数组&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">t1&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">t2&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">v&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">t1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">v&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">t2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">v&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">})&lt;/span> &lt;span class="c1">// {3, 4, 5, 6}可以作为vector的初始化,相当于一个无名vector
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/blockquote>
&lt;p>行列长度均固定 &lt;code>n + 1&lt;/code>行 &lt;code>m + 1&lt;/code>列初始值为0&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>c++17或者c++20支持的形式（不常用），与上面相同的初始化&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">vector&lt;/span> &lt;span class="nf">a&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">vector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="方法函数">方法函数&lt;/h3>
&lt;p>知道了如何定义初始化可变数组，下面就需要知道如何添加，删除，修改数据。&lt;/p>
&lt;p>&lt;strong>c指定为数组名称&lt;/strong>，含义中会注明算法复杂度。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>代码&lt;/th>
&lt;th>含义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>c.front()&lt;/code>&lt;/td>
&lt;td>返回第一个数据$O(1)$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>c.back()&lt;/code>&lt;/td>
&lt;td>返回数组中的最后一个数据 $O(1)$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>c.pop_back()&lt;/code>&lt;/td>
&lt;td>删除最后一个数据$O(1)$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>c.push_back(element)&lt;/code>&lt;/td>
&lt;td>在尾部加一个或多个数据push_back((1,2,3)) $O(1)$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>c.size()&lt;/code>&lt;/td>
&lt;td>返回实际数据个数（unsigned类型）$O(1)$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>c.clear()&lt;/code>&lt;/td>
&lt;td>清除元素个数$O(N)$，N为元素个数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>c.resize(n, v)&lt;/code>&lt;/td>
&lt;td>改变数组大小为&lt;code>n&lt;/code>,值为&lt;code>v&lt;/code>，如果没有默认赋值为&lt;code>0&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>c.insert(it, x)&lt;/code>&lt;/td>
&lt;td>向任意迭代器&lt;code>it&lt;/code>插入一个元素&lt;code>x&lt;/code> ，$O(N)$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>例：&lt;code>c.insert(c.begin()+2,-1)&lt;/code>&lt;/td>
&lt;td>将&lt;code>-1&lt;/code>插入&lt;code>c[2]&lt;/code>的位置&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>c.erase(first,last)&lt;/code>&lt;/td>
&lt;td>删除&lt;code>[first,last)&lt;/code>的所有元素，$O(N)$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>c.begin()&lt;/code>/&lt;code>c.rbegin()&lt;/code>&lt;/td>
&lt;td>返回首/逆元素的迭代器（通俗来说就是地址）$O(1)$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>c.end()&lt;/code> /&lt;code>c.rend()&lt;/code>&lt;/td>
&lt;td>返回最后/逆一个元素后一个位置的迭代器（地址）$O(1)$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>c.empty()&lt;/code>&lt;/td>
&lt;td>判断是否为空，为空返回真，反之返回假 $O(1)$&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>注意： &lt;code>end()&lt;/code>返回的是最后一个元素的后一个位置的地址，不是最后一个元素的地址，&lt;strong>所有STL容器均是如此&lt;/strong>&lt;/p>
&lt;p>&lt;strong>排序&lt;/strong>&lt;/p>
&lt;p>使用&lt;code>sort&lt;/code>排序要： &lt;code>sort(c.begin(), c.end());&lt;/code>&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>sort()&lt;/code>为STL函数，请参考本文最后面STL函数系列。&lt;/p>
&lt;/blockquote>
&lt;p>对所有元素进行排序，如果要对指定区间进行排序，可以对&lt;code>sort()&lt;/code>里面的参数进行加减改动。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">sort&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">begin&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="p">());&lt;/span> &lt;span class="c1">// 对[1, n]区间进行从小到大排序
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h3 id="访问">访问&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>下标法：&lt;/strong> 和普通数组一样&lt;/li>
&lt;/ul>
&lt;p>注意：一维数组的下标是从$0$到$v.size()-1$，访问之外的数会出现越界错误&lt;/p>
&lt;ul>
&lt;li>&lt;strong>迭代器法：&lt;/strong> 类似指针一样的访问 ，首先需要声明迭代器变量，和声明指针变量一样，可以根据代码进行理解（附有注释）。&lt;/li>
&lt;/ul>
&lt;p>代码如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">vi&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//定义一个vi数组
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;::&lt;/span>&lt;span class="n">iterator&lt;/span> &lt;span class="n">it&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">vi&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">begin&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="c1">//声明一个迭代器指向vi的初始位置
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="下标访问">下标访问&lt;/h4>
&lt;p>直接和普通数组一样进行访问即可。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//添加元素
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">vi&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//下标访问
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">vi&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34; &amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="迭代器访问">迭代器访问&lt;/h4>
&lt;p>类似指针。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//迭代器访问
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;::&lt;/span>&lt;span class="n">iterator&lt;/span> &lt;span class="n">it&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//相当于声明了一个迭代器类型的变量it
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//通俗来说就是声明了一个指针变量
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//方式一：
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;::&lt;/span>&lt;span class="n">iterator&lt;/span> &lt;span class="n">it&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">vi&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">begin&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">it&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34; &amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//方式二：
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;::&lt;/span>&lt;span class="n">iterator&lt;/span> &lt;span class="n">it&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">it&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">vi&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">begin&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="n">it&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">vi&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="n">it&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">it&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34; &amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//vi.end()指向尾元素地址的下一个地址
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="智能指针">智能指针&lt;/h4>
&lt;p>&lt;strong>只能遍历完数组&lt;/strong>，如果要指定的内容进行遍历，需要另选方法。
&lt;strong>auto&lt;/strong> 能够自动识别并获取类型。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">v&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">12&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">v&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">241&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="nl">val&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">val&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34; &amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 12 241
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>&lt;code>vector&lt;/code>注意：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>vi[i]&lt;/code> 和 &lt;code>*(vi.begin() + i)&lt;/code> 等价&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>vector&lt;/code>和&lt;code>string&lt;/code>的&lt;code>STL&lt;/code>容器支持&lt;code>*(it + i)&lt;/code>的元素访问，其它容器可能也可以支持这种方式访问，但用的不多，可自行尝试。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;hr>
&lt;h2 id="stack">stack&lt;/h2>
&lt;h3 id="介绍-1">介绍&lt;/h3>
&lt;p>栈为数据结构的一种，是STL中实现的一个先进后出，后进先出的容器。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//头文件需要添加
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#include&amp;lt;stack&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">using&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">stack&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//声明
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">stack&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">stack&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">stack&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">//node是结构体类型
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 初始化
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">stack&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="p">({&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">})&lt;/span> &lt;span class="c1">// or (std::deque&amp;lt;int&amp;gt;{1,2,3,4}) 默认container为deque
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 不能进行列表初始化是因为必须用Container初始化，而不是allocator
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// [Template parameters](https://en.cppreference.com/w/cpp/container/stack)
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="方法函数-1">方法函数&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>代码&lt;/th>
&lt;th>含义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>s.push(ele)&lt;/code>&lt;/td>
&lt;td>元素&lt;code>ele&lt;/code>入栈，增加元素 $O(1)$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>s.pop()&lt;/code>&lt;/td>
&lt;td>移除栈顶元素 $O(1)$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>s.top()&lt;/code>&lt;/td>
&lt;td>取得栈顶元素（但不删除）$O(1)$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>s.empty()&lt;/code>&lt;/td>
&lt;td>检测栈内是否为空，空为真 $O(1)$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>s.size()&lt;/code>&lt;/td>
&lt;td>返回栈内元素的个数 $O(1)$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>stack/queue没有clear()&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h3 id="栈遍历">栈遍历&lt;/h3>
&lt;h4 id="栈遍历-1">栈遍历&lt;/h4>
&lt;p>栈只能对栈顶元素进行操作，如果想要进行遍历，只能将栈中元素一个个取出来存在数组中&lt;/p>
&lt;h4 id="数组模拟栈进行遍历">数组模拟栈进行遍历&lt;/h4>
&lt;p>通过一个&lt;strong>数组&lt;/strong>对栈进行模拟，一个存放下标的变量&lt;code>top&lt;/code>模拟指向栈顶的指针。&lt;/p>
&lt;p>&lt;strong>特点：&lt;/strong> 比&lt;code>STL&lt;/code>的&lt;code>stack&lt;/code>速度更快，遍历元素方便&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">];&lt;/span> &lt;span class="c1">// 栈 从左至右为栈底到栈顶
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">tt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// tt 代表栈顶指针,初始栈内无元素，tt为-1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//入栈
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="n">tt&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 出栈
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">top_element&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">tt&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//入栈操作示意
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 0 1 2 3 4 5
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// tt
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//出栈后示意
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 0 1 2 3 4
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// tt
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h2 id="queue">queue&lt;/h2>
&lt;h3 id="介绍-2">介绍&lt;/h3>
&lt;p>队列是一种先进先出的数据结构。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//头文件
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#include&amp;lt;queue&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="c1">//定义初始化
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">queue&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">q&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="方法函数-2">方法函数&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>代码&lt;/th>
&lt;th>含义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>q.front()&lt;/code>&lt;/td>
&lt;td>返回队首元素 $O(1)$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>q.back()&lt;/code>&lt;/td>
&lt;td>返回队尾元素 $O(1)$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>q.push(element)&lt;/code>&lt;/td>
&lt;td>尾部添加一个元素&lt;code>element&lt;/code> 进队$O(1)$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>q.pop()&lt;/code>&lt;/td>
&lt;td>删除第一个元素 出队 $O(1)$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>q.size()&lt;/code>&lt;/td>
&lt;td>返回队列中元素个数，返回值类型&lt;code>unsigned int&lt;/code> $O(1)$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>q.empty()&lt;/code>&lt;/td>
&lt;td>判断是否为空，队列为空，返回&lt;code>true&lt;/code> $O(1)$&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="队列模拟">队列模拟&lt;/h3>
&lt;p>使用&lt;code>q[]&lt;/code>数组模拟队列
&lt;code>hh&lt;/code>表示队首元素的下标，初始值为&lt;code>0&lt;/code>
&lt;code>tt&lt;/code>表示队尾元素的下标，初始值为&lt;code>-1&lt;/code>，表示刚&lt;strong>开始队列为空&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&amp;lt;bits/stdc++.h&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">N&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">1e5&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">q&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">N&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">hh&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">tt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 入队
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">q&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="n">tt&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">q&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="n">tt&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 将所有元素出队
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">hh&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">tt&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">q&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">hh&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h2 id="priority_queue">priority_queue&lt;/h2>
&lt;h3 id="介绍-3">介绍&lt;/h3>
&lt;p>优先队列是在正常队列的基础上加了优先级，保证每次的队首元素都是优先级最大的。&lt;/p>
&lt;p>可以实现每次从优先队列中取出的元素都是队列中&lt;strong>优先级最大&lt;/strong>的一个。&lt;/p>
&lt;p>它的底层是通过&lt;strong>堆&lt;/strong>来实现的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//头文件
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#include&amp;lt;queue&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//初始化定义
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">priority_queue&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">q&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 与stack/queue不同的是，需要加入比较函数less
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">priority_queue&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">q&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">less&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="函数方法">函数方法&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>代码&lt;/th>
&lt;th>含义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>q.top()&lt;/code>&lt;/td>
&lt;td>访问队首元素&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>q.push()&lt;/code>&lt;/td>
&lt;td>入队&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>q.pop()&lt;/code>&lt;/td>
&lt;td>堆顶（队首）元素出队&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>q.size()&lt;/code>&lt;/td>
&lt;td>队列元素个数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>q.empty()&lt;/code>&lt;/td>
&lt;td>是否为空&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>注意&lt;/strong>没有&lt;code>clear()&lt;/code>！&lt;/td>
&lt;td>不提供该方法&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>优先队列只能通过&lt;code>top()&lt;/code>访问队首元素（优先级最高的元素）&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="设置优先级">设置优先级&lt;/h3>
&lt;h4 id="基本数据类型的优先级">基本数据类型的优先级&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">priority_queue&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">pq&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 默认大根堆, 即每次取出的元素是队列中的最大值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">priority_queue&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">greater&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">q&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 小根堆, 每次取出的元素是队列中的最小值
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>参数解释：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>第二个参数：&lt;/strong>
&lt;code>vector&amp;lt; int &amp;gt;&lt;/code> 是用来承载底层数据结构堆的容器，若优先队列中存放的是&lt;code>double&lt;/code>型数据，就要填&lt;code>vector&amp;lt; double &amp;gt;&lt;/code>
&lt;strong>总之存的是什么类型的数据，就相应的填写对应类型。同时也要改动第三个参数里面的对应类型。&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>第三个参数：&lt;/strong>
&lt;code>less&amp;lt; int &amp;gt;&lt;/code> 表示数字大的优先级大，堆顶为最大的数字
&lt;code>greater&amp;lt; int &amp;gt;&lt;/code>表示数字小的优先级大，堆顶为最小的数字
&lt;strong>int代表的是数据类型，也要填优先队列中存储的数据类型&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>下面介绍基础数据类型优先级设置的写法。&lt;/p>
&lt;p>&lt;strong>1. 基础写法（非常常用）&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">priority_queue&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">q1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 默认大根堆, 即每次取出的元素是队列中的最大值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">priority_queue&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">less&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">q2&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 大根堆, 每次取出的元素是队列中的最大值，同第一行
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">priority_queue&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">greater&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">q3&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 小根堆, 每次取出的元素是队列中的最小值
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>2. 自定义排序（不常见，主要是写着麻烦）&lt;/strong>&lt;/p>
&lt;p>下面的代码比较长，基础类型优先级写着太麻烦，用第一种即可。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">cmp1&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="nf">operator&lt;/span>&lt;span class="p">()(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">cmp2&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="nf">operator&lt;/span>&lt;span class="p">()(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">priority_queue&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">cmp1&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">q1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 小根堆
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">priority_queue&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">cmp2&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">q2&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 大根堆
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h4 id="结构体优先级设置">结构体优先级设置&lt;/h4>
&lt;blockquote>
&lt;p>即优先队列中存储结构体类型，必须要设置优先级，即结构体的比较运算（因为优先队列的堆中要比较大小，才能将对应最大或者最小元素移到堆顶）。&lt;/p>
&lt;/blockquote>
&lt;p>优先级设置可以定义在&lt;strong>结构体内&lt;/strong>进行小于号重载，也可以定义在&lt;strong>结构体外&lt;/strong>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//要排序的结构体（存储在优先队列里面的）
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">Point&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>版本一：自定义全局比较规则&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//定义的比较结构体
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//注意：cmp是个结构体
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">cmp&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="c1">//自定义堆的排序规则
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">bool&lt;/span> &lt;span class="nf">operator&lt;/span>&lt;span class="p">()(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Point&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Point&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//初始化定义，
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">priority_queue&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Point&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Point&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">cmp&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">q&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// x大的在堆顶
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>版本二：直接在结构体里面写&lt;/strong>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>因为是在结构体内部自定义的规则，一旦需要比较结构体，自动调用结构体内部重载运算符规则。&lt;/p>
&lt;/blockquote>
&lt;p>结构体内部有两种方式&lt;/p>
&lt;p>&lt;strong>方式一&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">node&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">friend&lt;/span> &lt;span class="kt">bool&lt;/span> &lt;span class="k">operator&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Point&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Point&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="c1">//为两个结构体参数，结构体调用一定要写上friend
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">//按x从小到大排，x大的在堆顶
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">priority_queue&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">greater&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">pq&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>方式二&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">node&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="k">operator&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Point&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="c1">//直接传入一个参数，不写friend，但写const函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">//按x升序排列，x大的在堆顶
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// priority_queue 默认大根堆
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">priority_queue&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">pq&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>优先队列的定义&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">priority_queue&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Point&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">q&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>注意：&lt;/strong> 优先队列自定义排序规则和&lt;code>sort()&lt;/code>函数定义&lt;code>cmp&lt;/code>函数很相似，但是最后返回的情况是&lt;strong>相反&lt;/strong>的。即相同的符号，最后定义的排列顺序是完全相反的。
所以只需要记住&lt;code>sort&lt;/code>的排序规则和优先队列的排序规则是相反的就可以了。&lt;/p>
&lt;hr>
&lt;h3 id="存储特殊类型的优先级">存储特殊类型的优先级&lt;/h3>
&lt;h4 id="存储pair类型">存储pair类型&lt;/h4>
&lt;ul>
&lt;li>排序规则：
默认先对&lt;code>pair&lt;/code>的&lt;code>first&lt;/code>进行降序排序，然后再对&lt;code>second&lt;/code>降序排序
对&lt;code>first&lt;/code>先排序，大的排在前面，如果&lt;code>first&lt;/code>元素相同，再对&lt;code>second&lt;/code>元素排序，保持大的在前面。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;code>pair&lt;/code>请参考下文&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&amp;lt;bits/stdc++.h&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">priority_queue&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">pair&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">&amp;gt;&lt;/span>&lt;span class="n">q&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 完整默认写法
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// priority_queue&amp;lt;pair&amp;lt;int, int&amp;gt;, vector&amp;lt;pair&amp;lt;int, int&amp;gt;&amp;gt;, less&amp;lt;pair&amp;lt;int, int&amp;gt;&amp;gt;&amp;gt; pq;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">q&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">q&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">9&lt;/span>&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">q&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">make_pair&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(;&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="n">q&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">empty&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="n">q&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">pop&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">auto&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">q&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">top&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">first&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34; &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">second&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>结果：
8 7
7 9
7 8&lt;/p>
&lt;/blockquote>
&lt;h3 id="stackqueuepriority_queue小结">stack、queue、priority_queue小结&lt;/h3>
&lt;p>它们的构造器都为Container，因此不包含诸如clear()、insert()、erase()函数&lt;/p>
&lt;hr>
&lt;h2 id="deque">deque&lt;/h2>
&lt;h3 id="介绍-4">介绍&lt;/h3>
&lt;p>首尾都可插入和删除的队列为双端队列。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//添加头文件
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#include&amp;lt;deque&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="c1">//初始化定义
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">deque&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">dq&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="方法函数-3">方法函数&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>代码&lt;/th>
&lt;th>含义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>push_back(x)/push_front(x)&lt;/code>&lt;/td>
&lt;td>把&lt;code>x&lt;/code>插入队尾后 / 队首 $O(1)$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>back()/front()&lt;/code>&lt;/td>
&lt;td>返回队尾 / 队首元素 $O(1)$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>pop_back() / pop_front()&lt;/code>&lt;/td>
&lt;td>删除队尾 / 队首元素 $O(1)$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>erase(iterator it)&lt;/code>&lt;/td>
&lt;td>删除双端队列中的某一个元素&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>erase(iterator first,iterator last)&lt;/code>&lt;/td>
&lt;td>删除双端队列中&lt;code>[first,last)&lt;/code>中的元素&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>empty()&lt;/code>&lt;/td>
&lt;td>判断deque是否空 $O(1)$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>size()&lt;/code>&lt;/td>
&lt;td>返回deque的元素数量 $O(1)$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>clear()&lt;/code>&lt;/td>
&lt;td>清空deque&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="注意点">注意点&lt;/h3>
&lt;p>deque可以进行排序&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//从小到大
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">sort&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">q&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">begin&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">q&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//从大到小排序
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">sort&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">q&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">begin&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">q&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">greater&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="c1">//deque里面的类型需要是int型
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">sort&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">q&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">begin&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">q&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">greater&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="c1">//高版本C++才可以用
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h2 id="map">map&lt;/h2>
&lt;h3 id="介绍-5">介绍&lt;/h3>
&lt;p>映射类似于函数的对应关系，每个&lt;code>x&lt;/code>对应一个&lt;code>y&lt;/code>，而&lt;code>map&lt;/code>是每个键对应一个值。会python的朋友学习后就会知道这和python的字典非常类似。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//头文件
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#include&amp;lt;map&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">using&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">map&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">using&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">pair&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//初始化定义
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">mp&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">mp&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">//node是结构体类型
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="p">{{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">}};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>map特性：map会按照键的顺序从小到大自动排序，键的类型必须可以比较大小&lt;/p>
&lt;/blockquote>
&lt;h3 id="函数方法-1">函数方法&lt;/h3>
&lt;h4 id="函数方法-2">函数方法&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>代码&lt;/th>
&lt;th>含义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>mp.find(key)&lt;/code>&lt;/td>
&lt;td>返回键为key的映射的迭代器 $O(logN)$ &lt;br/>注意：find函数返回一个迭代器。当数据存在时，返回数据所在位置的迭代器，数据不存在时，返回$mp.end()$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>mp.erase(it)&lt;/code>&lt;/td>
&lt;td>删除迭代器对应的键和值$O(1)$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>mp.erase(key)&lt;/code>&lt;/td>
&lt;td>根据映射的键删除键和值 $O(logN)$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>mp.erase(first,last)&lt;/code>&lt;/td>
&lt;td>删除左闭右开区间迭代器对应的键和值 $O(last-first)$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>mp.size()&lt;/code>&lt;/td>
&lt;td>返回映射的对数$O(1)$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>mp.clear()&lt;/code>&lt;/td>
&lt;td>清空map中的所有元素$O(N)$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>mp.insert()&lt;/code>&lt;/td>
&lt;td>插入元素，插入时要构造键值对 $O(logN)$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>mp.empty()&lt;/code>&lt;/td>
&lt;td>如果map为空，返回true，否则返回false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>mp.begin()&lt;/code>&lt;/td>
&lt;td>返回指向map第一个元素的迭代器（地址）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>mp.end()&lt;/code>&lt;/td>
&lt;td>返回指向map尾部的迭代器（最后一个元素的&lt;strong>下一个&lt;/strong>地址）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>mp.rbegin()&lt;/code>&lt;/td>
&lt;td>返回指向map最后一个元素的迭代器（地址）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>mp.rend()&lt;/code>&lt;/td>
&lt;td>返回指向map第一个元素前面(上一个）的逆向迭代器（地址）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>mp.count(key)&lt;/code>&lt;/td>
&lt;td>查看元素是否存在，因为map中键是唯一的，所以存在返回1，不存在返回0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>mp.lower_bound()&lt;/code>&lt;/td>
&lt;td>返回一个迭代器，指向键值**&amp;gt;= key**的第一个元素&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>mp.upper_bound()&lt;/code>&lt;/td>
&lt;td>返回一个迭代器，指向键值**&amp;gt;** key的第一个元素&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="注意点-1">注意点&lt;/h4>
&lt;p>&lt;strong>下面说明部分函数方法的注意点&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>注意：
查找元素是否存在时，可以使用
①&lt;code>mp.find()&lt;/code> ② &lt;code>mp.count()&lt;/code> ③ &lt;code>mp[key]&lt;/code>
但是第三种情况，如果不存在对应的&lt;code>key&lt;/code>时，会自动创建一个键值对（产生一个额外的键值对空间）
所以为了不增加额外的空间负担，最好使用前两种方法&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h4 id="迭代器进行正反向遍历">迭代器进行正反向遍历&lt;/h4>
&lt;ul>
&lt;li>&lt;code>mp.begin()&lt;/code>和&lt;code>mp.end()&lt;/code>用法：&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>用于正向遍历map&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">mp&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">mp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">mp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">mp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">auto&lt;/span> &lt;span class="n">it&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">begin&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">it&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">mp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">it&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">first&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34; &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">it&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">second&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">it&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>结果：&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>1 2
2 3
3 4
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>&lt;code>mp.rbegin()&lt;/code>和&lt;code>mp.rend()&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>用于逆向遍历map&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">mp&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">mp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">mp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">mp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">auto&lt;/span> &lt;span class="n">it&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">rbegin&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">it&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">mp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">rend&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">it&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">first&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34; &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">it&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">second&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">it&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>结果：&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>3 4
2 3
1 2
&lt;/code>&lt;/pre>&lt;hr>
&lt;h4 id="二分查找">二分查找&lt;/h4>
&lt;p>二分查找&lt;code>lower_bound() upper_bound()&lt;/code>&lt;/p>
&lt;blockquote>
&lt;p>map的二分查找以第一个元素（即键为准），对&lt;strong>键&lt;/strong>进行二分查找
返回值为map迭代器类型&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&amp;lt;bits/stdc++.h&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="p">{{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">}};&lt;/span>&lt;span class="c1">//有序，重复key删除
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;::&lt;/span>&lt;span class="n">iterator&lt;/span> &lt;span class="n">it1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">lower_bound&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">it1&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">first&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">//it1-&amp;gt;first=2
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;::&lt;/span>&lt;span class="n">iterator&lt;/span> &lt;span class="n">it2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">upper_bound&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">it2&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">first&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">//it2-&amp;gt;first=6
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h3 id="添加元素">添加元素&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//先声明
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">mp&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>方式一：&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">mp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;学习&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;看书&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">mp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;玩耍&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;打游戏&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>方式二：插入元素构造键值对&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">mp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">insert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">make_pair&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;vegetable&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s">&amp;#34;蔬菜&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>方式三：&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">mp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">insert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pair&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;fruit&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s">&amp;#34;水果&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>方式四:&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">mp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">insert&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="s">&amp;#34;hahaha&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s">&amp;#34;wawawa&amp;#34;&lt;/span>&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h3 id="访问元素">访问元素&lt;/h3>
&lt;h4 id="下标访问-1">下标访问&lt;/h4>
&lt;p>(大部分情况用于访问单个元素)&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">mp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;菜哇菜&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;强哇强&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">mp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;菜哇菜&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="遍历访问">遍历访问&lt;/h4>
&lt;ul>
&lt;li>方式一：迭代器访问&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;gt;::&lt;/span>&lt;span class="n">iterator&lt;/span> &lt;span class="n">it&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">it&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">begin&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="n">it&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">mp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="n">it&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 键 值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// it是结构体指针访问所以要用 -&amp;gt; 访问
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">it&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">first&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34; &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">it&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">second&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//*it是结构体变量 访问要用 . 访问
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">//cout&amp;lt;&amp;lt;(*it).first&amp;lt;&amp;lt;&amp;#34; &amp;#34;&amp;lt;&amp;lt;(*it).second;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>方式二：智能指针访问&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="nl">i&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">mp&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">first&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34; &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">second&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">//键，值
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>方式三：对指定单个元素访问&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">char&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;::&lt;/span>&lt;span class="n">iterator&lt;/span> &lt;span class="n">it&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">find&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sc">&amp;#39;a&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">it&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">first&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34; &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">it&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">second&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>方式四：c++17特性才具有&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">mp&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34; &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//x,y对应键和值
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="与unordered_map的比较">与unordered_map的比较&lt;/h3>
&lt;p>这里就不单开一个大目录讲unordered_map了，直接在map里面讲了。&lt;/p>
&lt;h4 id="内部实现原理">内部实现原理&lt;/h4>
&lt;p>&lt;strong>map&lt;/strong>：内部用&lt;strong>红黑树&lt;/strong>实现，具有&lt;strong>自动排序&lt;/strong>（按键从小到大）功能。&lt;/p>
&lt;p>&lt;strong>unordered_map&lt;/strong>：内部用&lt;strong>哈希表&lt;/strong>实现，内部元素无序杂乱。&lt;/p>
&lt;h4 id="效率比较">效率比较&lt;/h4>
&lt;p>&lt;strong>map&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>优点：内部用红黑树实现，内部元素具有有序性，查询删除等操作复杂度为$O(logN)$&lt;/p>
&lt;/li>
&lt;li>
&lt;p>缺点：占用空间，红黑树里每个节点需要保存父子节点和红黑性质等信息，空间占用较大。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>unordered_map&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>优点：内部用哈希表实现，查找速度非常快（适用于大量的查询操作）。&lt;/li>
&lt;li>缺点：建立哈希表比较耗时。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>两者方法函数基本一样，差别不大。&lt;/p>
&lt;p>注意：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>随着内部元素越来越多，两种容器的插入删除查询操作的时间都会逐渐变大，效率逐渐变低。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用&lt;code>[]&lt;/code>查找元素时，如果元素不存在，两种容器&lt;strong>都是&lt;/strong>创建一个空的元素；如果存在，会正常索引对应的值。所以如果查询过多的不存在的元素值，容器内部会创建大量的空的键值对，后续查询创建删除效率会&lt;strong>大大降低&lt;/strong>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>查询容器内部元素的最优方法是：先判断存在与否，再索引对应值（适用于这两种容器）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 以 map 为例
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">mp&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">999999999&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1">// 此处判断是否存在x这个键
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">mp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 只有存在才会索引对应的值，避免不存在x时多余空元素的创建
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>另外：&lt;/p>
&lt;blockquote>
&lt;p>还有一种映射：&lt;code>multimap&lt;/code>&lt;/p>
&lt;p>键可以重复，即一个键对应多个值，如要了解，可以自行搜索。&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h2 id="set">set&lt;/h2>
&lt;h3 id="介绍-6">介绍&lt;/h3>
&lt;p>set容器中的元素不会重复，当插入集合中已有的元素时，并不会插入进去，而且set容器里的元素自动从小到大排序。&lt;/p>
&lt;p>即：set里面的元素&lt;strong>不重复 且有序&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//头文件
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#include&amp;lt;set&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="c1">//初始化定义
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">set&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="函数方法-3">函数方法&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>代码&lt;/th>
&lt;th>含义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>s.begin()&lt;/code>&lt;/td>
&lt;td>返回set容器的第一个元素的地址（迭代器）$O(1)$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>s.end()&lt;/code>&lt;/td>
&lt;td>返回set容器的最后一个元素的下一个地址（迭代器）$O(1)$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>s.rbegin()&lt;/code>&lt;/td>
&lt;td>返回逆序迭代器，指向容器元素最后一个位置$O(1)$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>s.rend()&lt;/code>&lt;/td>
&lt;td>返回逆序迭代器，指向容器第一个元素前面的位置$O(1)$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>s.clear()&lt;/code>&lt;/td>
&lt;td>删除set容器中的所有的元素,返回unsigned int类型$O(N)$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>s.empty()&lt;/code>&lt;/td>
&lt;td>判断set容器是否为空$O(1)$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>s.insert()&lt;/code>&lt;/td>
&lt;td>插入一个元素&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>s.size()&lt;/code>&lt;/td>
&lt;td>返回当前set容器中的元素个数$O(1)$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>erase(iterator)&lt;/code>&lt;/td>
&lt;td>删除迭代器iterator指向的值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>erase(first,second）&lt;/code>&lt;/td>
&lt;td>删除迭代器first和second之间的值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>erase(key_value)&lt;/code>&lt;/td>
&lt;td>删除键值key_value的值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>查找&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>s.find(element)&lt;/code>&lt;/td>
&lt;td>查找set中的某一元素，有则返回该元素对应的迭代器，无则返回结束迭代器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>s.count(element)&lt;/code>&lt;/td>
&lt;td>查找set中的元素出现的个数，由于set中元素唯一，此函数相当于查询element是否出现&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>s.lower_bound(k)&lt;/code>&lt;/td>
&lt;td>返回大于等于k的第一个元素的迭代器$O(logN)$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>s.upper_bound(k)&lt;/code>&lt;/td>
&lt;td>返回大于k的第一个元素的迭代器$O(logN)$&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h3 id="访问-1">访问&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>迭代器访问&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">set&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;::&lt;/span>&lt;span class="n">iterator&lt;/span> &lt;span class="n">it&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">begin&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="n">it&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="n">it&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">it&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34; &amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>智能指针&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="nl">i&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>访问最后一个元素&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//第一种
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">rbegin&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//第二种 rend()也可以
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 对end()++/--没有效果
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//逆序输出，注意是++it
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="n">it&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">rbegin&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="n">it&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">rend&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">it&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">it&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h3 id="重载运算符">重载&amp;lt;运算符&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>基础数据类型&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>方式一：改变set排序规则，set中默认使用less比较器，即从小到大排序。（常用）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">set&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">s1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 默认从小到大排序
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">set&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">greater&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">s2&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 从大到小排序
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>方式二：重载运算符。（很麻烦，不太常用，没必要）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//重载 &amp;lt; 运算符
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">cmp&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="nf">operator&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">u&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// const参数 / const函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">u&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">set&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">cmp&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">insert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="nl">i&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34; &amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 10 9 8 7 6 5 4 3 2 1
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>方式三：初始化时使用&lt;a href="https://www.cnblogs.com/pzhfei/archive/2013/01/14/lambda_expression.html">匿名函数&lt;/a>定义比较规则&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;functional&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="n">set&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">function&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">bool&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">](&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 从大到小
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">insert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="nl">x&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34; &amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>高级数据类型（结构体）&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>直接重载结构体运算符即可，让结构体可以比较。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">Point&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// friend bool operator &amp;lt; (const Point &amp;amp;a, const Point &amp;amp;b){
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// if (a.x == b.x) return a.y &amp;lt; b.y;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// return a.x &amp;lt; b.x;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// }
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">bool&lt;/span> &lt;span class="k">operator&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Point&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 按照点的横坐标从小到大排序,如果横坐标相同,纵坐标从小到大
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">set&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Point&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cin&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// vscode [控制台输入](https://stackoverflow.com/a/49846389)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">insert&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="nl">i&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34; &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="其它set">其它set&lt;/h3>
&lt;p>&lt;code>multiset&lt;/code>:元素可以重复，且元素有序&lt;/p>
&lt;p>&lt;code>unordered_set&lt;/code> ：元素无序且只能出现一次&lt;/p>
&lt;p>&lt;code>unordered_multiset&lt;/code> ： 元素无序可以出现多次&lt;/p>
&lt;hr>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>&lt;strong>&lt;a href="https://en.cppreference.com/w/cpp/container" title="cpp/container">Containers library&lt;/a>&lt;/strong>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>容器&lt;/th>
&lt;th>迭代器类型&lt;/th>
&lt;th>Container&lt;/th>
&lt;th>有序？&lt;/th>
&lt;th>时间复杂度&lt;/th>
&lt;th>底层&lt;/th>
&lt;th>备注&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a href="https://en.cppreference.com/w/cpp/container/array" title="cpp/container/array">array&lt;/a>&lt;/td>
&lt;td>随机访问(支持iter+2)&lt;/td>
&lt;td>sequence&lt;/td>
&lt;td>&lt;/td>
&lt;td>随机&lt;a href="%5Boperator%5B%5D%5D(https://en.cppreference.com/w/cpp/container/array/operator_at" title="cpp/container/array/operator at">读改&lt;/a>) $O(1)$&lt;/td>
&lt;td>静态数组&lt;/td>
&lt;td>array&amp;lt;int, 5&amp;gt; ay; 不能扩容&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://en.cppreference.com/w/cpp/container/vector">vector&lt;/a>&lt;/td>
&lt;td>随机访问&lt;/td>
&lt;td>sequence&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;a href="https://en.cppreference.com/w/cpp/container/vector/operator_at">随机读改&lt;/a>、&lt;a href="https://en.cppreference.com/w/cpp/container/vector/emplace_back">尾插&lt;/a>/&lt;a href="https://en.cppreference.com/w/cpp/container/vector/pop_back">删&lt;/a> $O(1)$&lt;br>&lt;a href="https://en.cppreference.com/w/cpp/container/vector/insert">插&lt;/a>/&lt;a href="https://en.cppreference.com/w/cpp/container/vector/erase">删&lt;/a>$O(n)$&lt;/td>
&lt;td>动态数组&lt;/td>
&lt;td>是push_back()&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://en.cppreference.com/w/cpp/container/deque">deque&lt;/a>&lt;/td>
&lt;td>随机访问&lt;/td>
&lt;td>sequence&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;a href="https://en.cppreference.com/w/cpp/container/deque/operator_at">随机读改&lt;/a>、&lt;a href="https://en.cppreference.com/w/cpp/container/deque/push_front">头插&lt;/a>/&lt;a href="https://en.cppreference.com/w/cpp/container/deque/pop_front">删&lt;/a>、&lt;a href="https://en.cppreference.com/w/cpp/container/deque/push_back">尾插&lt;/a>/&lt;a href="https://en.cppreference.com/w/cpp/container/deque/pop_back">删&lt;/a> $O(1)$&lt;br>&lt;a href="https://en.cppreference.com/w/cpp/container/deque/insert">插&lt;/a>/&lt;a href="https://en.cppreference.com/w/cpp/container/deque/erase">删&lt;/a>$O(n)$&lt;/td>
&lt;td>双端队列(数组)&lt;/td>
&lt;td>是push_back/front()&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://en.cppreference.com/w/cpp/container/list" title="cpp/container/list">list&lt;/a>&lt;/td>
&lt;td>双向访问&lt;/td>
&lt;td>sequence&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;a href="https://en.cppreference.com/w/cpp/container/list/insert">插&lt;/a>/&lt;a href="https://en.cppreference.com/w/cpp/container/list/erase">删&lt;/a>$O(1)$&lt;/td>
&lt;td>双向链表(&lt;a href="ttps://stackoverflow.com/questions/1436020/whats-the-difference-between-deque-and-list-stl-containers">deque区别&lt;/a>)&lt;/td>
&lt;td>是push_back/front()&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://en.cppreference.com/w/cpp/container/map" title="cpp/container/map">map&lt;/a>&lt;/td>
&lt;td>双向访问(支持it--)&lt;/td>
&lt;td>associative&lt;/td>
&lt;td>有&lt;/td>
&lt;td>&lt;a href="https://en.cppreference.com/w/cpp/container/map/insert">增&lt;/a>/&lt;a href="https://en.cppreference.com/w/cpp/container/map/erase">删&lt;/a>/&lt;a href="https://en.cppreference.com/w/cpp/container/map/operator_at">查&lt;/a>$O(log_n)$(但是多态导致不同复杂度)&lt;/td>
&lt;td>红黑树&lt;/td>
&lt;td>只有insert()&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://en.cppreference.com/w/cpp/container/unordered_map" title="cpp/container/unordered map">unordered_map&lt;/a>&lt;/td>
&lt;td>双向访问&lt;/td>
&lt;td>unordered associative&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;a href="https://en.cppreference.com/w/cpp/container/unordered_map/insert">增&lt;/a>/&lt;a href="https://en.cppreference.com/w/cpp/container/unordered_map/erase">删&lt;/a>/&lt;a href="https://en.cppreference.com/w/cpp/container/unordered_map/operator_at">查&lt;/a>$O(1)$，最差$O(n)$&lt;/td>
&lt;td>哈希表&lt;/td>
&lt;td>只有insert()&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://en.cppreference.com/w/cpp/container/set" title="cpp/container/set">set&lt;/a>&lt;/td>
&lt;td>双向访问&lt;/td>
&lt;td>associative&lt;/td>
&lt;td>有&lt;/td>
&lt;td>增删改$O(log_n)$&lt;/td>
&lt;td>红黑树&lt;/td>
&lt;td>只有insert()&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://en.cppreference.com/w/cpp/container/unordered_set" title="cpp/container/unordered set">unordered_set&lt;/a>&lt;/td>
&lt;td>双向访问&lt;/td>
&lt;td>unordered associative&lt;/td>
&lt;td>&lt;/td>
&lt;td>增删查$O(1)$，最差$O(n)$&lt;/td>
&lt;td>哈希表&lt;/td>
&lt;td>只有insert()&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://en.cppreference.com/w/cpp/container/stack" title="cpp/container/stack">stack&lt;/a>&lt;/td>
&lt;td>不支持&lt;/td>
&lt;td>Container adaptor&lt;/td>
&lt;td>&lt;/td>
&lt;td>顶删/增 $O(1)$（FIFO）&lt;/td>
&lt;td>deque/list/vector&lt;/td>
&lt;td>不支持列表初始化，只有push()&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://en.cppreference.com/w/cpp/container/queue" title="cpp/container/queue">queue&lt;/a>&lt;/td>
&lt;td>不支持&lt;/td>
&lt;td>Container adaptor&lt;/td>
&lt;td>&lt;/td>
&lt;td>尾删/头插 $O(1)$（FILO）&lt;/td>
&lt;td>deque/list&lt;/td>
&lt;td>不支持列表初始化，只有push()&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://en.cppreference.com/w/cpp/container/priority_queue" title="cpp/container/priority queue">priority_queue&lt;/a>&lt;/td>
&lt;td>不支持&lt;/td>
&lt;td>Container adaptor&lt;/td>
&lt;td>最大/小在顶端&lt;/td>
&lt;td>插入、删除 $O(log2n)$&lt;/td>
&lt;td>堆&lt;/td>
&lt;td>不支持列表初始化，只有push()&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="pair">pair&lt;/h2>
&lt;h3 id="介绍-7">介绍&lt;/h3>
&lt;p>pair只含有两个元素，可以看作是只有两个元素的结构体。&lt;/p>
&lt;p>&lt;strong>应用：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>代替二元结构体&lt;/li>
&lt;li>作为map键值对进行插入（代码如下）&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="n">mp&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">mp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">insert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pair&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;xingmaqi&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// mp.insert(make_pair(&amp;#34;xingmaqi&amp;#34;, 1));
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// mp.insert({&amp;#34;xingmaqi&amp;#34;, 1});
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//头文件
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#include&amp;lt;utility&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">using&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">pair&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//1.初始化定义
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">pair&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;wangyaqi&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="c1">//带初始值的
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">pair&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">//不带初始值的
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//2.赋值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s">&amp;#34;wang&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">18&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">make_pair&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;wang&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">18&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pair&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;wang&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">18&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="访问-2">访问&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//定义结构体数组
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">pair&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">20&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//和结构体类似，first代表第一个元素，second代表第二个元素
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">first&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34; &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">second&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h2 id="string">string&lt;/h2>
&lt;h3 id="介绍-8">介绍&lt;/h3>
&lt;p>string是一个字符串类，和&lt;code>char&lt;/code>型字符串类似。&lt;/p>
&lt;p>可以把string理解为一个字符串类型，像int一样可以定义&lt;/p>
&lt;h3 id="初始化及定义">初始化及定义&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//头文件
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#include&amp;lt;string&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">using&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//1.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">str1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//生成空字符串
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//2.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="nf">str2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;123456789&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//生成&amp;#34;1234456789&amp;#34;的复制品
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//3.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="nf">str3&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;12345&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="c1">//结果为&amp;#34;123&amp;#34; ，从0位置开始，长度为3
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//4.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="nf">str4&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;123456&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//结果为&amp;#34;12345&amp;#34; ，长度为5
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//5.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="nf">str5&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sc">&amp;#39;2&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//结果为&amp;#34;22222&amp;#34; ,构造5个字符&amp;#39;2&amp;#39;连接而成的字符串
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//6.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="nf">str6&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">str2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//结果为&amp;#34;3456789&amp;#34;，截取第三个元素（2对应第三位）到最后
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>简单使用&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>访问单个字符：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&amp;lt;iostream&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&amp;lt;string&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">string&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;xing ma qi!!!&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34; &amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>string数组使用：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&amp;lt;iostream&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&amp;lt;string&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">string&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">s&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;loading... &amp;#34;&lt;/span> &lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="string-特性">string 特性&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>支持&lt;strong>比较&lt;/strong>运算符
string字符串支持常见的比较操作符&lt;code>（&amp;gt;,&amp;gt;=,&amp;lt;,&amp;lt;=,==,!=）&lt;/code>，支持&lt;code>string&lt;/code>与&lt;code>C-string&lt;/code>的比较（如 &lt;code>str &amp;lt; &amp;quot;hello&amp;quot;&lt;/code>）。
在使用&lt;code>&amp;gt;,&amp;gt;=,&amp;lt;,&amp;lt;=&lt;/code>这些操作符的时候是根据“当前字符特性”将字符按 &lt;code>字典顺序&lt;/code> 进行逐一比较。字典排序靠前的字符小， 比较的顺序是从前向后比较，遇到不相等的字符就按这个位置上的两个字符的比较结果确定两个字符串的大小（前面减后面）。&lt;/p>
&lt;p>同时，&lt;code>string (&amp;quot;aa&amp;quot;) &amp;lt; string(&amp;quot;aaa&amp;quot;)&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>支持&lt;code>+&lt;/code>运算符，代表&lt;strong>拼接字符串&lt;/strong>
string字符串可以拼接，通过&amp;quot;+&amp;quot;运算符进行拼接。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">string&lt;/span> &lt;span class="n">s1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;123&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">string&lt;/span> &lt;span class="n">s2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;456&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">string&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">s1&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">s2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//123456
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="读入详解">读入详解&lt;/h3>
&lt;p>&lt;strong>读入字符串，遇空格，回车结束&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">string&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cin&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>读入一行字符串（包括空格），遇回车结束&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">string&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">getline&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cin&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意: &lt;code>getline(cin, s)&lt;/code>会获取前一个输入的换行符，需要在前面添加读取换行符的语句。如：&lt;code>getchar()&lt;/code> 或&lt;code> cin.get()&lt;/code>&lt;/p>
&lt;p>错误读取：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">string&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cin&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">getline&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cin&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//此时读取相当于读取了前一个回车字符
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>正确读取：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">string&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cin&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">getchar&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">//cin.get()
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">getline&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cin&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="c1">//可正确读入下一行的输入
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>&lt;code>cin&lt;/code>与&lt;code>cin.getline()&lt;/code>混用&lt;/p>
&lt;p>cin输入完后，回车，cin遇到回车结束输入，但回车还在输入流中，cin并不会清除，导致&lt;code>getline()&lt;/code>读取回车，结束。
需要在cin后面加&lt;code>cin.ignore()&lt;/code>；主动删除输入流中的换行符。（不常用）&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>cin和cout解锁&lt;/strong>&lt;/p>
&lt;p>代码（写在main函数开头）：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ios&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">sync_with_stdio&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">false&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cin&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">tie&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">tie&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>为什么要进行&lt;code>cin&lt;/code>和&lt;code>cout&lt;/code>的解锁，原因是：&lt;/p>
&lt;p>在一些题目中，读入的&lt;strong>数据量很大&lt;/strong>，往往超过了1e5（10^5）的数据量,而&lt;code>cin&lt;/code>和&lt;code>cout&lt;/code>的读入输出的速度&lt;strong>很慢&lt;/strong>（是因为&lt;code>cin&lt;/code>和&lt;code>cout&lt;/code>为了兼容C语言的读入输出在性能上做了妥协），远不如&lt;code>scanf&lt;/code>和&lt;code>printf&lt;/code>的速度，具体原因可以搜索&lt;a href="https://blog.csdn.net/qq_67473550/article/details/130890891">相关的博客&lt;/a>进行了解。&lt;/p>
&lt;p>&lt;strong>所以&lt;/strong>对&lt;code>cin&lt;/code>和&lt;code>cout&lt;/code>进行解锁使&lt;code>cin&lt;/code>和&lt;code>cout&lt;/code>的速度几乎接近&lt;code>scanf&lt;/code>和&lt;code>printf&lt;/code>，避免输入输出超时。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>注意&lt;/strong>：&lt;code>cin cout&lt;/code>解锁使用时，不能与 &lt;code>scanf,getchar, printf,cin.getline()&lt;/code>混用，一定要注意，会出错。&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>string与C语言字符串（C-string）的区别&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>string
是C++的一个类，专门实现字符串的相关操作。具有丰富的操作方法，数据类型为&lt;code>string&lt;/code>，字符串结尾没有&lt;code>\0&lt;/code>字符&lt;/li>
&lt;li>C-string
C语言中的字符串，用char数组实现，类型为&lt;code>const char *&lt;/code>,字符串结尾以&lt;code>\0&lt;/code>结尾&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>一般来说string向char数组转换会出现一些问题，所以为了能够实现转换，string有一个方法&lt;code>c_str()&lt;/code>实现string向char数组的转换。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">string&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;xing ma qi&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">char&lt;/span> &lt;span class="n">s2&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">c_str&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// string to c&amp;#39;s str
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="函数方法-4">函数方法&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>获取字符串长度&lt;/strong>&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>代码&lt;/th>
&lt;th>含义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>s.size()&lt;/code>和&lt;code>s.length()&lt;/code>&lt;/td>
&lt;td>返回string对象的字符个数，他们执行效果相同。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>s.max_size()&lt;/code>&lt;/td>
&lt;td>返回string对象最多包含的字符数，超出会抛出length_error异常&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>s.capacity()&lt;/code>&lt;/td>
&lt;td>重新分配内存之前，string对象能包含的最大字符数&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>&lt;strong>插入&lt;/strong>&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>代码&lt;/th>
&lt;th>含义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>s.push_back()&lt;/code>&lt;/td>
&lt;td>在末尾插入&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>例：&lt;code>s.push_back('a')&lt;/code>&lt;/td>
&lt;td>末尾插入一个字符a&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>s.insert(iter_pos,element)&lt;/code>&lt;/td>
&lt;td>在pos位置插入element，pos为迭代器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>例：&lt;code>s.insert(s.begin(),'1')&lt;/code>&lt;/td>
&lt;td>在第一个位置插入1字符。以上方法只能插入一个字符&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>s.insert(size_t(3), &amp;quot;c&amp;quot;);&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>s.append(str)&lt;/code>&lt;/td>
&lt;td>在s字符串结尾添加str字符串&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>例：&lt;code>s.append(&amp;quot;abc&amp;quot;)&lt;/code>&lt;/td>
&lt;td>在s字符串末尾添加字符串“abc”&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>&lt;strong>删除&lt;/strong>&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>代码&lt;/th>
&lt;th>含义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>erase(iterator p)&lt;/code>&lt;/td>
&lt;td>删除字符串中p所指的字符&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>erase(iterator first, iterator last)&lt;/code>&lt;/td>
&lt;td>删除字符串中迭代器区间&lt;code>[first,last)&lt;/code>上所有字符&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>erase(int_pos, len)&lt;/code>&lt;/td>
&lt;td>删除字符串中从索引位置pos开始的len个字符，只有字符串可以用整形索引来删除&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>clear()&lt;/code>&lt;/td>
&lt;td>删除字符串中所有字符&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>&lt;strong>字符替换&lt;/strong>&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>代码&lt;/th>
&lt;th>含义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>s.replace(pos,n,str)&lt;/code>&lt;/td>
&lt;td>把当前字符串从索引pos开始的n个字符替换为str&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>s.replace(pos,n,n1,c)&lt;/code>&lt;/td>
&lt;td>把当前字符串从索引pos开始的n个字符替换为n1个字符c&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>s.replace(it1,it2,str)&lt;/code>&lt;/td>
&lt;td>把当前字符串&lt;code>[it1,it2)&lt;/code>区间替换为str &lt;strong>it1 ,it2为迭代器哦&lt;/strong>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>&lt;strong>大小写转换&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>法一：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>代码&lt;/th>
&lt;th>含义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>tolower(s[i])&lt;/code>&lt;/td>
&lt;td>转换为小写&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>toupper(s[i])&lt;/code>&lt;/td>
&lt;td>转换为大写&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>法二：&lt;/p>
&lt;p>通过stl的&lt;code>transform&lt;/code>算法配合&lt;code>tolower&lt;/code> 和&lt;code>toupper&lt;/code> 实现。
有4个参数，前2个指定要转换的容器的起止范围，第3个参数是结果存放容器的起始位置，第4个参数是一元运算。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;algorithm&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;abc&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">transform&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">cbegin&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">cend&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">begin&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="p">[](&lt;/span>&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">toupper&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="p">});&lt;/span> &lt;span class="c1">//转换大写
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>分割&lt;/strong>&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>代码&lt;/th>
&lt;th>含义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>s.substr(pos,n)&lt;/code>&lt;/td>
&lt;td>截取从pos索引开始的n个字符，返回该字符串&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>&lt;strong>查找&lt;/strong>&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>代码&lt;/th>
&lt;th>含义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>s.find (str, pos)&lt;/code>&lt;/td>
&lt;td>在当前字符串的pos索引位置（默认为0）开始，查找子串str，返回找到的位置索引，-1表示查找不到子串&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>s.find (c, pos)&lt;/code>&lt;/td>
&lt;td>在当前字符串的pos索引位置（默认为0）开始，查找字符c，返回找到的位置索引，-1表示查找不到字符&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>s.rfind (str, pos)&lt;/code>&lt;/td>
&lt;td>在当前字符串的pos索引位置开始，反向查找子串s，返回找到的位置索引，-1表示查找不到子串&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>s.rfind (c,pos)&lt;/code>&lt;/td>
&lt;td>在当前字符串的pos索引位置开始，反向查找字符c，返回找到的位置索引，-1表示查找不到字符&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>s.find_first_of (str, pos)&lt;/code>&lt;/td>
&lt;td>在当前字符串的pos索引位置（默认为0）开始，查找子串s的字符，返回找到的位置索引，-1表示查找不到字符&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>s.find_first_not_of (str,pos)&lt;/code>&lt;/td>
&lt;td>在当前字符串的pos索引位置（默认为0）开始，查找第一个不位于子串s的字符，返回找到的位置索引，-1表示查找不到字符&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>s.find_last_of(str, pos)&lt;/code>&lt;/td>
&lt;td>在当前字符串的pos索引位置开始，查找最后一个位于子串s的字符，返回找到的位置索引，-1表示查找不到字符&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>s.find_last_not_of ( str, pos)&lt;/code>&lt;/td>
&lt;td>在当前字符串的pos索引位置开始，查找最后一个不位于子串s的字符，返回找到的位置索引，-1表示查找不到子串&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 使用用法推荐：https://en.cppreference.com/w/cpp/string/basic_string/find_first_of
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#include&amp;lt;string&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&amp;lt;iostream&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">string&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;dog bird chicken bird cat&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//字符串查找-----找到后返回首字母在字符串中的下标
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 1. 查找一个字符串
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">find&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;chicken&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">// 结果是：9
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 2. 从下标为6开始找字符&amp;#39;i&amp;#39;，返回找到的第一个i的下标
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">find&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sc">&amp;#39;i&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">// 结果是：11
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 3. 从字符串的末尾开始查找字符串，返回的还是首字母在字符串中的下标
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">rfind&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;chicken&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">// 结果是：9
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 4. 从字符串的末尾开始查找字符
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">rfind&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sc">&amp;#39;i&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">// 结果是：18因为是从末尾开始查找，所以返回第一次找到的字符
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 5. 在该字符串中查找第一个属于字符串s的字符
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">find_first_of&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;13rb98&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">// 结果是：4---b
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 6. 在该字符串中查找第一个不属于字符串s的字符------先匹配dog，然后bird匹配不到，所以打印4
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">find_first_not_of&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;hello dog 2006&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 结果是：4
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">find_first_not_of&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;dog bird 2006&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 结果是：9
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 7. 在该字符串最后中查找第一个属于字符串s的字符
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">find_last_of&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;13r98&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">// 结果是：19
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 8. 在该字符串最后中查找第一个不属于字符串s的字符------先匹配t--a---c，然后空格匹配不到，所以打印21
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">find_last_not_of&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;teac&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">// 结果是：21
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>排序&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">sort&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">begin&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="p">());&lt;/span> &lt;span class="c1">//按ASCII码排序
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h2 id="bitset">bitset&lt;/h2>
&lt;h3 id="介绍-9">介绍&lt;/h3>
&lt;p>bitset 在 bitset 头文件中，它类似数组，并且每一个元素只能是０或１，每个元素只用１bit空间&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//头文件
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#include&amp;lt;bitset&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="初始化定义">初始化定义&lt;/h3>
&lt;p>初始化方法&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>代码&lt;/th>
&lt;th>含义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>bitset &amp;lt; n &amp;gt;a&lt;/code>&lt;/td>
&lt;td>a有n位，每位都为0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>bitset &amp;lt; n &amp;gt;a(b)&lt;/code>&lt;/td>
&lt;td>a是unsigned long型u的一个二进制副本&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>bitset &amp;lt; n &amp;gt;a(s)&lt;/code>&lt;/td>
&lt;td>a是string对象s中含有的位串的副本&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>bitset &amp;lt; n &amp;gt;a(s,pos,n)&lt;/code>&lt;/td>
&lt;td>a是s中从位置pos开始的n个位的副本&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;blockquote>
&lt;p>注意：&lt;code>n&lt;/code>必须为常量表达式&lt;/p>
&lt;/blockquote>
&lt;p>演示代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&amp;lt;bits/stdc++.h&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">bitset&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">bitset1&lt;/span>&lt;span class="p">;&lt;/span>　　 &lt;span class="c1">//无参构造，长度为４，默认每一位为０
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">bitset&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">bitset2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">12&lt;/span>&lt;span class="p">);&lt;/span>　&lt;span class="c1">//长度为9，二进制保存，前面用０补充
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">string&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;100101&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">bitset&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">bitset3&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">);&lt;/span>　　&lt;span class="c1">//长度为10，前面用０补充
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="n">s2&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;10101&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">bitset&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">13&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">bitset4&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s2&lt;/span>&lt;span class="p">);&lt;/span>　　&lt;span class="c1">//长度为13，前面用０补充
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">bitset1&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>　　&lt;span class="c1">//0000
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">bitset2&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>　　&lt;span class="c1">//000001100
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">bitset3&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>　　&lt;span class="c1">//0000100101
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">bitset4&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>　&lt;span class="c1">//0000000010101
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h3 id="103-特性">10.3 特性&lt;/h3>
&lt;p>&lt;code>bitset&lt;/code>可以进行&lt;strong>位操作&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">bitset&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">foo&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;1001&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">bitset&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">bar&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;0011&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">foo&lt;/span>&lt;span class="o">^=&lt;/span>&lt;span class="n">bar&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">// 1010 (foo对bar按位异或后赋值给foo)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">foo&lt;/span>&lt;span class="o">&amp;amp;=&lt;/span>&lt;span class="n">bar&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">// 0001 (按位与后赋值给foo)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">foo&lt;/span>&lt;span class="o">|=&lt;/span>&lt;span class="n">bar&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">// 1011 (按位或后赋值给foo)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">foo&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;=&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">// 0100 (左移2位，低位补0，有自身赋值)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">foo&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">// 0100 (右移1位，高位补0，有自身赋值)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">~&lt;/span>&lt;span class="n">bar&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">// 1100 (按位取反)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">bar&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">// 0110 (左移，不赋值)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">bar&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">// 0001 (右移，不赋值)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">foo&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="n">bar&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">// false (1001==0011为false)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">foo&lt;/span>&lt;span class="o">!=&lt;/span>&lt;span class="n">bar&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">// true (1001!=0011为true)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">foo&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">bar&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">// 0001 (按位与，不赋值)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">foo&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="n">bar&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">// 1011 (按位或，不赋值)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">foo&lt;/span>&lt;span class="o">^&lt;/span>&lt;span class="n">bar&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">// 1010 (按位异或，不赋值)
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>访问&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//可以通过 [ ] 访问元素(类似数组)，注意最低位下标为０，如下：
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">bitset&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">foo&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;1011&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">foo&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>　　&lt;span class="c1">//1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">foo&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>　　&lt;span class="c1">//0
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">foo&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>　　&lt;span class="c1">//1
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h3 id="104-方法函数">10.4 方法函数&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">代码&lt;/th>
&lt;th style="text-align:center">含义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>b.any()&lt;/code>&lt;/td>
&lt;td style="text-align:center">b中是否存在值为1的二进制位，有 返回true&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>b.none()&lt;/code>&lt;/td>
&lt;td style="text-align:center">b中是否没有1，没有 返回true&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>b.count()&lt;/code>&lt;/td>
&lt;td style="text-align:center">b中为1的个数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>b.size()&lt;/code>&lt;/td>
&lt;td style="text-align:center">b中二进制位的个数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>b.test(pos)&lt;/code>&lt;/td>
&lt;td style="text-align:center">测试b在pos位置是否为1，是 返回true&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>b[pos]&lt;/code>&lt;/td>
&lt;td style="text-align:center">返回b在pos处的二进制位&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>b.set()&lt;/code>&lt;/td>
&lt;td style="text-align:center">把b中所有位都置为1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>b.set(pos)&lt;/code>&lt;/td>
&lt;td style="text-align:center">把b中pos位置置为1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>b.reset()&lt;/code>&lt;/td>
&lt;td style="text-align:center">把b中所有位都置为0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>b.reset(pos)&lt;/code>&lt;/td>
&lt;td style="text-align:center">把b中pos位置置为0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>b.flip()&lt;/code>&lt;/td>
&lt;td style="text-align:center">把b中所有二进制位取反&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>b.flip(pos)&lt;/code>&lt;/td>
&lt;td style="text-align:center">把b中pos位置取反&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>b.to_ulong()&lt;/code>&lt;/td>
&lt;td style="text-align:center">用b中同样的二进制位返回一个unsigned long值&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2 id="array">array&lt;/h2>
&lt;h3 id="介绍-10">介绍&lt;/h3>
&lt;p>头文件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&amp;lt;array&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>array&lt;/code>是C++11新增的容器，效率与普通数据相差无几，比&lt;code>vector&lt;/code>效率要高，自身添加了一些成员函数。&lt;/p>
&lt;p>和其它容器不同，array 容器的大小是&lt;strong>固定&lt;/strong>的，无法动态的扩展或收缩，&lt;strong>只允许访问或者替换存储的元素。&lt;/strong>&lt;/p>
&lt;p>&lt;strong>注意：&lt;/strong>&lt;/p>
&lt;p>&lt;code>array&lt;/code>的使用要在&lt;code>std&lt;/code>命名空间里&lt;/p>
&lt;h3 id="声明与初始化">声明与初始化&lt;/h3>
&lt;p>&lt;strong>基础数据类型&lt;/strong>&lt;/p>
&lt;p>声明一个大小为100的&lt;code>int&lt;/code>型数组，元素的值不确定&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">array&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>声明一个大小为100的&lt;code>int&lt;/code>型数组，初始值均为&lt;code>0&lt;/code>(初始值与默认元素类型等效)&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">array&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">{};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>声明一个大小为100的&lt;code>int&lt;/code>型数组，初始化部分值，其余全部为&lt;code>0&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">array&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>或者可以用等号&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">array&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>高级数据类型&lt;/strong>&lt;/p>
&lt;p>不同于数组的是，对元素类型不做要求，可以套结构体&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">array&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s">&amp;#34;ha&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">string&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;haha&amp;#34;&lt;/span>&lt;span class="p">)};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">array&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h3 id="存取元素">存取元素&lt;/h3>
&lt;ul>
&lt;li>修改元素&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">array&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>访问元素&lt;/li>
&lt;/ul>
&lt;p>下标访问&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">array&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34; &lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>利用&lt;code>auto&lt;/code>访问&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="nl">i&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34; &amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>迭代器访问&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">auto&lt;/span> &lt;span class="n">it&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">begin&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span>&lt;span class="p">(;&lt;/span> &lt;span class="n">it&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="n">it&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">it&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34; &amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>at()&lt;/code>函数访问&lt;/p>
&lt;p>下标为&lt;code>1&lt;/code>的元素加上下标为&lt;code>2&lt;/code>的元素，答案为&lt;code>5&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">array&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">at&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">at&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">res&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>get&lt;/code>方法访问&lt;/p>
&lt;p>将&lt;code>a&lt;/code>数组下标为&lt;code>1&lt;/code>位置处的值改为&lt;code>x&lt;/code>&lt;/p>
&lt;p>注意：获取的下标只能写数字，不能填变量&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">get&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h3 id="成员函数">成员函数&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>成员函数&lt;/th>
&lt;th>功能&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>begin()&lt;/code>&lt;/td>
&lt;td>返回容器中第一个元素的访问迭代器（地址）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>end()&lt;/code>&lt;/td>
&lt;td>返回容器最后一个元素之后一个位置的访问迭代器（地址）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>rbegin()&lt;/code>&lt;/td>
&lt;td>返回最后一个元素的访问迭代器（地址）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>rend()&lt;/code>&lt;/td>
&lt;td>返回第一个元素之前一个位置的访问迭代器（地址）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>size()&lt;/code>&lt;/td>
&lt;td>返回容器中元素的数量，其值等于初始化 array 类的第二个模板参数&lt;code>N&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>max_size()&lt;/code>&lt;/td>
&lt;td>返回容器可容纳元素的最大数量，其值始终等于初始化 array 类的第二个模板参数 N&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>empty()&lt;/code>&lt;/td>
&lt;td>判断容器是否为空&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>at(n)&lt;/code>&lt;/td>
&lt;td>返回容器中 n 位置处元素的引用，函数会自动检查 n 是否在有效的范围内，如果不是则抛出 out_of_range 异常&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>front()&lt;/code>&lt;/td>
&lt;td>返回容器中第一个元素的直接引用，函数不适用于空的 array 容器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>back()&lt;/code>&lt;/td>
&lt;td>返回容器中最后一个元素的直接引用，函数不适用于空的 array 容器。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>data()&lt;/code>&lt;/td>
&lt;td>返回一个指向容器首个元素的指针。利用该指针，可实现复制容器中所有元素等类似功能&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>fill(x)&lt;/code>&lt;/td>
&lt;td>将 &lt;code>x&lt;/code> 这个值赋值给容器中的每个元素,相当于初始化&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>array1.swap(array2)&lt;/code>&lt;/td>
&lt;td>交换 array1 和 array2 容器中的所有元素，但前提是它们具有相同的长度和类型&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h3 id="部分用法示例">部分用法示例&lt;/h3>
&lt;p>&lt;code>data()&lt;/code>&lt;/p>
&lt;p>指向底层元素存储的&lt;strong>指针&lt;/strong>。对于非空容器，返回的指针与首元素地址比较相等。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">pointer_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">size_t&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;data = &amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">size_t&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="sc">&amp;#39; &amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="sc">&amp;#39;\n&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">container&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Prefer container.data() over &amp;amp;container[0]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">pointer_func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">container&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">container&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>fill()&lt;/code>&lt;/p>
&lt;p>array的&lt;code>fill()&lt;/code>函数，将&lt;code>a&lt;/code>数组全部元素值变为&lt;code>x&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">fill&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>另外还有其它的&lt;code>fill()&lt;/code>函数:将&lt;code>a&lt;/code>数组$[begin,end)$全部值变为&lt;code>x&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">fill&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">begin&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>排序&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">sort&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">begin&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h2 id="tuple">tuple&lt;/h2>
&lt;h3 id="介绍-11">介绍&lt;/h3>
&lt;p>tuple模板是pair的泛化，可以封装不同类型任意数量的对象。&lt;/p>
&lt;p>可以把tuple理解为pair的扩展，tuple可以声明二元组，也可以声明三元组。&lt;/p>
&lt;p>tuple可以等价为&lt;strong>结构体&lt;/strong>使用&lt;/p>
&lt;p>&lt;strong>头文件&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;tuple&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="声明初始化">声明初始化&lt;/h3>
&lt;p>声明一个空的&lt;code>tuple&lt;/code>三元组&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">tuple&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">string&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">t1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>赋值&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">t1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">make_tuple&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;hahaha&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>创建的同时初始化&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">tuple&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">t2&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以使用pair对象构造tuple对象，但tuple对象必须是两个元素&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">auto&lt;/span> &lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">make_pair&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;wang&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">tuple&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">t3&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">};&lt;/span> &lt;span class="c1">//将pair对象赋给tuple对象
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="元素操作">元素操作&lt;/h3>
&lt;p>通过&lt;code>get&amp;lt;n&amp;gt;(obj)&lt;/code>方法获取,&lt;code>n&lt;/code>必须为数字不能是变量&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">first&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">get&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>修改tuple对象&lt;code>t&lt;/code>的第一个元素&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">get&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="函数操作">函数操作&lt;/h3>
&lt;ul>
&lt;li>获取元素个数&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">tuple&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">tuple_size&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">decltype&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;gt;::&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 3
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>通过&lt;code>tie&lt;/code>解包 获取元素值&lt;/li>
&lt;/ul>
&lt;p>&lt;code>tie&lt;/code>可以让tuple变量中的三个值依次赋到tie中的三个变量中&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">one&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">three&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">string&lt;/span> &lt;span class="n">two&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">tuple&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;hahaha&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">tie&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">one&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">two&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">three&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">one&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">two&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">three&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 1hahaha3
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h1 id="stl函数">STL函数&lt;/h1>
&lt;h2 id="accumulate">accumulate&lt;/h2>
&lt;pre tabindex="0">&lt;code>accumulate(beg, end, init)
&lt;/code>&lt;/pre>&lt;p>&lt;strong>复杂度：&lt;/strong> $O(N)$&lt;/p>
&lt;blockquote>
&lt;p>作用：对一个序列的元素求和&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>init&lt;/code>为对序列元素求和的&lt;strong>初始值&lt;/strong>&lt;/p>
&lt;p>返回值类型：与&lt;code>init&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>基础累加求和：&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[]&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//对[0,2]区间求和，初始值为0，结果为0+1+3+5=9
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">res1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">accumulate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//对[0,3]区间求和，初始值为5，结果为5+1+3+5+9=23
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">res2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">accumulate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>自定义二元对象求和：&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>使用lambda表达式&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">typedef&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">ll&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">node&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ll&lt;/span> &lt;span class="n">num&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;span class="n">st&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">st&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">num&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">10000000000&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//返回值类型与init一致，同时注意参数类型（a）也要一样
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//初始值为1，累加1+10000000001+10000000002+10000000003=30000000007
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">ll&lt;/span> &lt;span class="n">res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">accumulate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">st&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">st&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1ll&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[](&lt;/span>&lt;span class="n">ll&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">node&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="atoi">atoi&lt;/h2>
&lt;pre tabindex="0">&lt;code>atoi(const char *)
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>将字符串转换为&lt;code>int&lt;/code>类型&lt;/p>
&lt;/blockquote>
&lt;p>注意参数为&lt;code>char&lt;/code>型数组，如果需要将string类型转换为int类型，可以使用&lt;code>stoi&lt;/code>函数（参考下文），或者将&lt;code>string&lt;/code>类型转换为&lt;code>const char *&lt;/code>类型。&lt;/p>
&lt;p>关于输出数字的范围：
&lt;code>atoi&lt;/code>&lt;strong>不做&lt;/strong>范围检查，如果超出上界，输出上界，超出下界，输出下界。
&lt;code>stoi&lt;/code>&lt;strong>会做&lt;/strong>范围检查，默认必须在&lt;code>int&lt;/code>范围内，如果超出范围，会出现RE（Runtime Error）错误。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">string&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;1234&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">atoi&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">c_str&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 1234
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>或者&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">char&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;1234&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">atoi&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="fill">fill&lt;/h2>
&lt;pre tabindex="0">&lt;code>fill(beg,end,num)
&lt;/code>&lt;/pre>&lt;p>&lt;strong>复杂度：&lt;/strong> $O(N)$&lt;/p>
&lt;blockquote>
&lt;p>对一个序列进行初始化赋值&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//对a数组的所有元素赋1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">fill&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="s">&amp;#34; &amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//1 1 1 1 1
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意区分memset：&lt;/p>
&lt;p>&lt;code>memset()&lt;/code>是按&lt;strong>字节&lt;/strong>进行赋值，对于初始化赋&lt;code>0&lt;/code>或&lt;code>-1&lt;/code>有比较好的效果.&lt;/p>
&lt;p>如果赋某个特定的数会&lt;strong>出错&lt;/strong>，赋值特定的数建议使用&lt;code>fill()&lt;/code>&lt;/p>
&lt;h2 id="is_sorted">is_sorted&lt;/h2>
&lt;pre tabindex="0">&lt;code>is_sorted(beg,end)
&lt;/code>&lt;/pre>&lt;p>&lt;strong>复杂度：&lt;/strong> $O(N)$&lt;/p>
&lt;blockquote>
&lt;p>判断序列是否有序（升序），返回&lt;code>bool&lt;/code>值&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//如果序列有序，输出YES
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">is_sorted&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="s">&amp;#34;YES&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="iota">iota&lt;/h2>
&lt;p>&lt;a href="https://www.zhihu.com/question/277961910">C++ 标准库中的函数 iota 是什么的缩写？ - 知乎&lt;/a>&lt;/p>
&lt;pre tabindex="0">&lt;code>iota(beg, end)
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>让序列递增赋值&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">iota&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">begin&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="nl">i&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34; &amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 0 1 2 3 4 5 6 7 8 9
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="lower_bound--upper_bound">lower_bound + upper_bound&lt;/h2>
&lt;p>&lt;strong>复杂度：&lt;/strong> $O(logN)$&lt;/p>
&lt;blockquote>
&lt;p>作用：二分查找&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//在a数组中查找第一个大于等于x的元素，返回该元素的地址
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">lower_bound&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//在a数组中查找第一个大于x的元素，返回该元素的地址
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">upper_bound&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//如果未找到，返回尾地址的下一个位置的地址
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="max_elementmin_element">max_element+min_element&lt;/h2>
&lt;p>&lt;strong>复杂度：&lt;/strong> $O(N)$&lt;/p>
&lt;blockquote>
&lt;p>找最大最小值&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//函数都是返回地址，需要加*取值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">mx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">max_element&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">mn&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">min_element&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="maxmin">max+min&lt;/h2>
&lt;p>&lt;strong>复杂度：&lt;/strong> $O(1)$&lt;/p>
&lt;blockquote>
&lt;p>找多个元素的最大值和最小值&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//找a，b的最大值和最小值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">mx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">mn&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">min&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//找到a,b,c,d的最大值和最小值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">mx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">max&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">mn&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">min&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="minmax">minmax&lt;/h2>
&lt;pre tabindex="0">&lt;code>minmax(a, b)
&lt;/code>&lt;/pre>&lt;p>&lt;strong>复杂度：&lt;/strong> $O(1)$&lt;/p>
&lt;blockquote>
&lt;p>返回一个&lt;code>pair&lt;/code>类型，第一个元素是&lt;code>min(a, b)&lt;/code>， 第二个元素是&lt;code>max(a, b)&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">pair&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">minmax&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// t.first = 2, t.second = 4
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="minmax_element">minmax_element&lt;/h2>
&lt;pre tabindex="0">&lt;code>minmax_element(beg, end)
&lt;/code>&lt;/pre>&lt;p>&lt;strong>复杂度：&lt;/strong> $O(N)$&lt;/p>
&lt;blockquote>
&lt;p>返回序列中的最小和最大值组成pair的对应的地址，返回类型为&lt;code>pair&amp;lt;vector&amp;lt;int&amp;gt;::iterator, vector&amp;lt;int&amp;gt;::iterator&amp;gt;&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">iota&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">begin&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">auto&lt;/span> &lt;span class="n">t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">minmax_element&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">begin&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="p">());&lt;/span> &lt;span class="c1">// 返回的是最小值和最大值对应的地址
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// *t.first = 1, *t.second = 10 输出对应最小最大值时需要使用指针
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="nth_element">nth_element&lt;/h2>
&lt;pre tabindex="0">&lt;code>nth_element(beg, nth, end)
&lt;/code>&lt;/pre>&lt;p>&lt;strong>复杂度：&lt;/strong> 平均$O(N)$&lt;/p>
&lt;blockquote>
&lt;p>寻找第序列第n小的值&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>nth&lt;/code>为一个迭代器，指向序列中的一个元素。&lt;strong>下标&lt;/strong>第n小的值恰好在&lt;code>nth&lt;/code>位置上。&lt;/p>
&lt;p>执行&lt;code>nth_element()&lt;/code>之后，序列中的元素会围绕nth进行划分：&lt;strong>nth之前的元素都小于等于它，而之后的元素都大于等于它&lt;/strong>&lt;/p>
&lt;p>&lt;strong>实例：求序列中的第3小的元素&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">nth_element&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="sc">&amp;#39;\n&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="next_permutation">next_permutation&lt;/h2>
&lt;pre tabindex="0">&lt;code>next_permutation(beg, end)
&lt;/code>&lt;/pre>&lt;p>&lt;strong>复杂度：&lt;/strong> $O(N)$&lt;/p>
&lt;blockquote>
&lt;p>求序列的下一个排列，下一个排列是字典序大一号的排列&lt;/p>
&lt;/blockquote>
&lt;p>返回&lt;code>true&lt;/code>或&lt;code>false&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>next_permutation(beg,end)&lt;/code>&lt;/p>
&lt;p>如果是最后一个排列，返回&lt;code>false&lt;/code>,否则求出下一个序列后，返回&lt;code>true&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//对a序列进行重排
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">next_permutation&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>应用：求所有的排列&lt;/strong>&lt;/p>
&lt;p>输出&lt;code>a&lt;/code>的所有排列&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//数组a不一定是最小字典序序列，所以将它排序
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">sort&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">next_permutation&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;code>prev_permutation(beg,end)&lt;/code>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>求出前一个排列，如果序列为最小的排列，将其重排为最大的排列，返回false&lt;/p>
&lt;/blockquote>
&lt;h2 id="partial_sort">partial_sort&lt;/h2>
&lt;pre tabindex="0">&lt;code>partial_sort(beg, mid, end)
&lt;/code>&lt;/pre>&lt;p>&lt;strong>复杂度：&lt;/strong> 大概$O(N logM)$ &lt;code>M&lt;/code>为距离&lt;/p>
&lt;blockquote>
&lt;p>部分排序,排序mid-beg个元素，mid为要排序区间元素的尾后的一个位置&lt;/p>
&lt;p>从beg到mid&lt;strong>前&lt;/strong>的元素都排好序&lt;/p>
&lt;/blockquote>
&lt;p>对a数组前5个元素排序按从小到大排序&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">partial_sort&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="sc">&amp;#39; &amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//1 2 3 4 5 9 8 10 7 6
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//前五个元素都有序
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>也可以添加自定义排序规则：&lt;/p>
&lt;p>&lt;code>partial_sort(beg,mid,end,cmp)&lt;/code>&lt;/p>
&lt;p>对a的前五个元素都是降序排列&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">partial_sort&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">greater&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="sc">&amp;#39; &amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//10 9 8 7 6 1 2 4 5 3
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//前五个元素降序有序
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="random_shuffle">random_shuffle&lt;/h2>
&lt;p>&lt;strong>复杂度：&lt;/strong> $O(N)$&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>随机打乱序列的顺序&lt;/li>
&lt;li>在 &lt;code>C++14&lt;/code> 中被弃用，在 &lt;code>C++17&lt;/code> 中被废除，C++11之后应尽量使用&lt;code>shuffle&lt;/code>来代替。&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">iota&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">begin&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="c1">// 序列b递增赋值 1, 2, 3, 4,...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//对a数组随机重排
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">random_shuffle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// C++11之后尽量使用shuffle
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">shuffle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">begin&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="reverse">reverse&lt;/h2>
&lt;pre tabindex="0">&lt;code>reverse(beg,end)
&lt;/code>&lt;/pre>&lt;p>&lt;strong>复杂度：&lt;/strong> $O(N)$&lt;/p>
&lt;blockquote>
&lt;p>对序列进行翻转&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">string&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;abcde&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">reverse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">begin&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="c1">//对s进行翻转
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="sc">&amp;#39;\n&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">//edcba
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//对a数组进行翻转
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">reverse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">];&lt;/span>&lt;span class="c1">//4321
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="sort">sort&lt;/h2>
&lt;p>&lt;strong>复杂度：&lt;/strong> $O(N logN)$&lt;/p>
&lt;blockquote>
&lt;p>作用：对一个序列进行排序&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//原型：
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">sort&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">beg&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">end&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">sort&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">beg&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">end&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">cmp&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//对a数组的[1,n]位置进行从小到大排序
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">sort&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//对a数组的[0,n-1]位置从大到小排序
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">sort&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">greater&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//对a数组的[0,n-1]位置从小到大排序
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">sort&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">less&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//自定义排序，定义比较函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">bool&lt;/span> &lt;span class="nf">cmp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">node&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">node&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//按结构体里面的x值降序排列
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">sort&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">node&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">cmp&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 只能接受 以函数为形式的自定义排序规则，无法接受以结构体为形式的自定义排序规则
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="stable_sort">stable_sort&lt;/h2>
&lt;p>&lt;strong>复杂度：&lt;/strong> $O(N logN)$&lt;/p>
&lt;blockquote>
&lt;p>功能和sort()基本一样&lt;/p>
&lt;p>区别在于&lt;code>stable_sort()&lt;/code>能够保证相等元素的相对位置，排序时不会改变相等元素的相对位置&lt;/p>
&lt;/blockquote>
&lt;p>使用用法和&lt;code>sort()&lt;/code>一样,见上&lt;/p>
&lt;h2 id="stoi">stoi&lt;/h2>
&lt;pre tabindex="0">&lt;code>stoi(const string*)
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>将对应string类型字符串转换为数字&lt;/p>
&lt;/blockquote>
&lt;p>注意参数为&lt;code>string&lt;/code>字符串类型。&lt;/p>
&lt;p>关于输出数字的范围：
&lt;code>stoi&lt;/code>&lt;strong>会做&lt;/strong>范围检查，默认必须在&lt;code>int&lt;/code>范围内，如果超出范围，会出现RE（Runtime Error）错误。
&lt;code>atoi&lt;/code>&lt;strong>不做&lt;/strong>范围检查，如果超出上界，输出上界，超出下界，输出下界。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">string&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;1234&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">atoi&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 1234
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="transform">transform&lt;/h2>
&lt;p>&lt;strong>复杂度：&lt;/strong> $O(N)$&lt;/p>
&lt;blockquote>
&lt;p>作用：使用给定操作，将结果写到dest中&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//原型：
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">transform&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">beg&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">end&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">dest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">unaryOp&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//将序列开始地址beg到结束地址end大小写转换，把结果存到起始地址为dest的序列中
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">transform&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">beg&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">end&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">dest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">::&lt;/span>&lt;span class="n">tolower&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">transform&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">beg&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">end&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">dest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">::&lt;/span>&lt;span class="n">toupper&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="to_string">to_string&lt;/h2>
&lt;blockquote>
&lt;p>将数字转化为字符串,支持小数（double）&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">12345678&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">to_string&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="sc">&amp;#39;\n&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="unique">unique&lt;/h2>
&lt;pre tabindex="0">&lt;code>unique(beg, end)
&lt;/code>&lt;/pre>&lt;p>&lt;strong>复杂度：&lt;/strong> $O(N)$&lt;/p>
&lt;blockquote>
&lt;p>消除重复元素，返回消除完重复元素的下一个位置的地址&lt;/p>
&lt;p>如：&lt;code>a[] = {1, 3, 2, 3, 6}&lt;/code>;&lt;/p>
&lt;p>unique之后a数组为&lt;code>{1, 2, 3, 6, 3}&lt;/code>前面为无重复元素的数组，后面则是重复元素移到后面，返回&lt;code>a[4]&lt;/code>位置的地址（不重复元素的尾后地址）&lt;/p>
&lt;/blockquote>
&lt;p>消除重复元素一般需要原序列是&lt;strong>有序序列&lt;/strong>&lt;/p>
&lt;p>&lt;strong>运用：离散化&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cin&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">b&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">];&lt;/span>&lt;span class="c1">//将a数组复制到b数组
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 排序后 b：{1, 2, 3, 3, 6}
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">sort&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="c1">//对b数组排序
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 消除重复元素b：{1, 2, 3, 6, 3} 返回的地址为最后一个元素3的地址
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">len&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">unique&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">//消除 b 的重复元素，并获取长度
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//因为b有序，查找到的下标就是对应的 相对大小（离散化后的值）
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">pos&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lower_bound&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">len&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">//在b数组中二分查找第一个大于等于a[i]的下标
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pos&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 离散化赋值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="__gcd">__gcd&lt;/h2>
&lt;pre tabindex="0">&lt;code>__gcd(a,b)
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>求a和b的最大公约数&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>__gcd(12,15) = 3&lt;/code>&lt;/p>
&lt;p>&lt;code>__gcd(21,0) = 21&lt;/code>&lt;/p>
&lt;h2 id="__lg">__lg&lt;/h2>
&lt;pre tabindex="0">&lt;code>__lg(a)
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;ol>
&lt;li>求一个数二进制下最高位位于第几位（从&lt;strong>第0位&lt;/strong>开始）（或二进制数下有几位）&lt;/li>
&lt;li>&lt;code>__lg(x)&lt;/code>相当于返回$\lfloor log_2 x \rfloor$&lt;/li>
&lt;li>复杂度$O(1)$&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>&lt;code>__lg(8) = 3&lt;/code>&lt;/p>
&lt;p>&lt;code>__lg(15) = 3&lt;/code>&lt;/p>
&lt;h2 id="__builtin_-内置位运算函数">_&lt;em>builtin&lt;/em> 内置位运算函数&lt;/h2>
&lt;p>内置函数有相应的&lt;code>unsigned lnt&lt;/code>和&lt;code>unsigned long long&lt;/code>版本，&lt;code>unsigned long long&lt;/code>只需要在函数名后面加上&lt;code>ll&lt;/code>就可以了，比如&lt;code>__builtin_clzll(x)&lt;/code>,默认是32位&lt;code>unsigned int&lt;/code>&lt;/p>
&lt;h3 id="__builtin_ffs">__builtin_ffs&lt;/h3>
&lt;pre tabindex="0">&lt;code>__builtin_ffs(x)
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>二进制中对应最后一位&lt;code>1&lt;/code>的位数，比如&lt;code>4&lt;/code>会返回&lt;code>3&lt;/code>（100）&lt;/p>
&lt;/blockquote>
&lt;h3 id="__builtin_popcount">__builtin_popcount&lt;/h3>
&lt;pre tabindex="0">&lt;code>__builtin_popcount(x)
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>&lt;code>x&lt;/code>中&lt;code>1&lt;/code>的个数&lt;/p>
&lt;/blockquote>
&lt;h3 id="__builtin_ctz">__builtin_ctz&lt;/h3>
&lt;pre tabindex="0">&lt;code>__builtin_ctz(x)
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>&lt;code>x&lt;/code>末尾&lt;code>0&lt;/code>的个数（&lt;code>count tail zero&lt;/code>）&lt;/p>
&lt;/blockquote>
&lt;h3 id="__builtin_clz">__builtin_clz&lt;/h3>
&lt;pre tabindex="0">&lt;code>__builtin_clz(x)
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>&lt;code>x&lt;/code>前导&lt;code>0&lt;/code>的个数（&lt;code>count leading zero&lt;/code>）&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">__builtin_clz&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">32&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 26
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//因为共有6位,默认数据范围为32位，32 - 6 = 26
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="__builtin_parity">__builtin_parity&lt;/h3>
&lt;pre tabindex="0">&lt;code>__builtin_parity(x)
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>&lt;code>x&lt;/code>中1的个数的奇偶性， 奇数输出&lt;code>1&lt;/code>，偶数输出&lt;code>0&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>可参考链接：&lt;/p>
&lt;ol>
&lt;li>&lt;a href="https://www.luogu.com.cn/blog/AccRobin/grammar-candies">C++语法糖&lt;/a> &lt;a href="https://www.luogu.com.cn/blog/AccRobin/grammar-candies">https://www.luogu.com.cn/blog/AccRobin/grammar-candies&lt;/a>&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>可能有些人需要PDF文件，公众号【行码棋】回复 STL 获取，抱歉😭&lt;/p>
&lt;blockquote>
&lt;p>2023.03.28 已更新PDF文件（除去了水印，内容进行了部分排版调整和更新）&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://wyqz.top/medias/gzh.jpg" alt="">&lt;/p></content><category scheme="https://keepjolly.com/posts/" term="posts" label="posts"/><category scheme="https://keepjolly.com/posts/algorithm/" term="algorithm" label="algorithm"/><category scheme="https://keepjolly.com/tags/c-/" term="C++" label="C++"/></entry><entry><title type="text">排序、查找算法</title><link rel="alternate" type="text/html" href="https://keepjolly.com/posts/algorithm/basic-sort-and-search-algorithm/"/><id>https://keepjolly.com/posts/algorithm/basic-sort-and-search-algorithm/</id><updated>2024-01-13T13:59:11+00:00</updated><published>2024-01-13T20:48:46+08:00</published><author><name>Rurouni</name><uri>https://keepjolly.com/</uri><email>1366475809@qq.com</email></author><rights>在保留本文作者及本文链接的前提下，非商业用途随意转载分享(我会高强度自搜的喔👊)。</rights><summary type="html">查找算法只涉及到用的最多的二分查找 排序算法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21……</summary><content type="html">&lt;blockquote>
&lt;p>查找算法只涉及到用的最多的二分查找&lt;/p>
&lt;/blockquote>
&lt;h2 id="排序算法">排序算法&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt"> 10
&lt;/span>&lt;span class="lnt"> 11
&lt;/span>&lt;span class="lnt"> 12
&lt;/span>&lt;span class="lnt"> 13
&lt;/span>&lt;span class="lnt"> 14
&lt;/span>&lt;span class="lnt"> 15
&lt;/span>&lt;span class="lnt"> 16
&lt;/span>&lt;span class="lnt"> 17
&lt;/span>&lt;span class="lnt"> 18
&lt;/span>&lt;span class="lnt"> 19
&lt;/span>&lt;span class="lnt"> 20
&lt;/span>&lt;span class="lnt"> 21
&lt;/span>&lt;span class="lnt"> 22
&lt;/span>&lt;span class="lnt"> 23
&lt;/span>&lt;span class="lnt"> 24
&lt;/span>&lt;span class="lnt"> 25
&lt;/span>&lt;span class="lnt"> 26
&lt;/span>&lt;span class="lnt"> 27
&lt;/span>&lt;span class="lnt"> 28
&lt;/span>&lt;span class="lnt"> 29
&lt;/span>&lt;span class="lnt"> 30
&lt;/span>&lt;span class="lnt"> 31
&lt;/span>&lt;span class="lnt"> 32
&lt;/span>&lt;span class="lnt"> 33
&lt;/span>&lt;span class="lnt"> 34
&lt;/span>&lt;span class="lnt"> 35
&lt;/span>&lt;span class="lnt"> 36
&lt;/span>&lt;span class="lnt"> 37
&lt;/span>&lt;span class="lnt"> 38
&lt;/span>&lt;span class="lnt"> 39
&lt;/span>&lt;span class="lnt"> 40
&lt;/span>&lt;span class="lnt"> 41
&lt;/span>&lt;span class="lnt"> 42
&lt;/span>&lt;span class="lnt"> 43
&lt;/span>&lt;span class="lnt"> 44
&lt;/span>&lt;span class="lnt"> 45
&lt;/span>&lt;span class="lnt"> 46
&lt;/span>&lt;span class="lnt"> 47
&lt;/span>&lt;span class="lnt"> 48
&lt;/span>&lt;span class="lnt"> 49
&lt;/span>&lt;span class="lnt"> 50
&lt;/span>&lt;span class="lnt"> 51
&lt;/span>&lt;span class="lnt"> 52
&lt;/span>&lt;span class="lnt"> 53
&lt;/span>&lt;span class="lnt"> 54
&lt;/span>&lt;span class="lnt"> 55
&lt;/span>&lt;span class="lnt"> 56
&lt;/span>&lt;span class="lnt"> 57
&lt;/span>&lt;span class="lnt"> 58
&lt;/span>&lt;span class="lnt"> 59
&lt;/span>&lt;span class="lnt"> 60
&lt;/span>&lt;span class="lnt"> 61
&lt;/span>&lt;span class="lnt"> 62
&lt;/span>&lt;span class="lnt"> 63
&lt;/span>&lt;span class="lnt"> 64
&lt;/span>&lt;span class="lnt"> 65
&lt;/span>&lt;span class="lnt"> 66
&lt;/span>&lt;span class="lnt"> 67
&lt;/span>&lt;span class="lnt"> 68
&lt;/span>&lt;span class="lnt"> 69
&lt;/span>&lt;span class="lnt"> 70
&lt;/span>&lt;span class="lnt"> 71
&lt;/span>&lt;span class="lnt"> 72
&lt;/span>&lt;span class="lnt"> 73
&lt;/span>&lt;span class="lnt"> 74
&lt;/span>&lt;span class="lnt"> 75
&lt;/span>&lt;span class="lnt"> 76
&lt;/span>&lt;span class="lnt"> 77
&lt;/span>&lt;span class="lnt"> 78
&lt;/span>&lt;span class="lnt"> 79
&lt;/span>&lt;span class="lnt"> 80
&lt;/span>&lt;span class="lnt"> 81
&lt;/span>&lt;span class="lnt"> 82
&lt;/span>&lt;span class="lnt"> 83
&lt;/span>&lt;span class="lnt"> 84
&lt;/span>&lt;span class="lnt"> 85
&lt;/span>&lt;span class="lnt"> 86
&lt;/span>&lt;span class="lnt"> 87
&lt;/span>&lt;span class="lnt"> 88
&lt;/span>&lt;span class="lnt"> 89
&lt;/span>&lt;span class="lnt"> 90
&lt;/span>&lt;span class="lnt"> 91
&lt;/span>&lt;span class="lnt"> 92
&lt;/span>&lt;span class="lnt"> 93
&lt;/span>&lt;span class="lnt"> 94
&lt;/span>&lt;span class="lnt"> 95
&lt;/span>&lt;span class="lnt"> 96
&lt;/span>&lt;span class="lnt"> 97
&lt;/span>&lt;span class="lnt"> 98
&lt;/span>&lt;span class="lnt"> 99
&lt;/span>&lt;span class="lnt">100
&lt;/span>&lt;span class="lnt">101
&lt;/span>&lt;span class="lnt">102
&lt;/span>&lt;span class="lnt">103
&lt;/span>&lt;span class="lnt">104
&lt;/span>&lt;span class="lnt">105
&lt;/span>&lt;span class="lnt">106
&lt;/span>&lt;span class="lnt">107
&lt;/span>&lt;span class="lnt">108
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 未排序序列里两两交换，将最大值浮到已排序序列头部
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">bubbleSort&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&amp;amp;&lt;/span> &lt;span class="n">nums&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">len&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">nums&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="n">flag&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">len&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">flag&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">len&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">temp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">temp&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">flag&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">flag&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 从未排序序列选择最小的，放入已排序序列末尾
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">selectSort&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&amp;amp;&lt;/span> &lt;span class="n">nums&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">len&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">nums&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">len&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">min&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">len&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">min&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="n">min&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">temp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">min&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">min&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">temp&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 如果已排序序列的后一个值小于尾部，则放入已排序序列指定位置
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">insertSort&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&amp;amp;&lt;/span> &lt;span class="n">nums&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">len&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">nums&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">len&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">temp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">];&lt;/span> &lt;span class="c1">// 已排序的后一个
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 其下标
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 不断移动已排序序列
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(;&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">temp&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">--&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 先--j再判断，所以j为指定位置
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">temp&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 将未排序序列分为两半，对这两半分别使用归并排序，将排好序的两半合并成最终排序序列
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">mergeSort&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&amp;amp;&lt;/span> &lt;span class="n">nums&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 利用基准元素将序列分成小于基准元素和大于基准元素两个区间，再分别从两个区间内选择基准元素
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 划分两个区间，直到排好序
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">Partition&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&amp;amp;&lt;/span> &lt;span class="n">nums&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">low&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">high&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">pivot&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">low&lt;/span>&lt;span class="p">];&lt;/span> &lt;span class="c1">// 基准元素
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">low&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">high&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 每次最多修改两个元素，直到左右区都划分好
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 比基准元素大
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">low&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">high&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">high&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="n">pivot&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">--&lt;/span>&lt;span class="n">high&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 放到小区间里
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">low&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">high&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 比基准元素小
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">low&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">high&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">low&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">pivot&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">low&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 放到大区间里
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">high&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">low&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 区间中间放入基准元素
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">low&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pivot&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">low&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">quickSort&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&amp;amp;&lt;/span> &lt;span class="n">nums&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">low&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">high&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">low&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">high&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">pivot&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Partition&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">nums&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">low&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">high&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 序列根据基准元素划分成两个子序列
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">quickSort&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">nums&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">low&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pivot&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">quickSort&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">nums&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pivot&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">high&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 找到序列的最小最大值，并将序列元素放到哈希表里
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 再从最小到最大遍历哈希表，从头开始对序列进行赋值。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">countSort&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&amp;amp;&lt;/span> &lt;span class="n">nums&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">maxV&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">minV&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">999&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">unordered_map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">bucket&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="nl">n&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">nums&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">maxV&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">maxV&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">minV&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">minV&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">bucket&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">sortedIndex&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">minV&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">maxV&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">bucket&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">sortedIndex&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">--&lt;/span>&lt;span class="n">bucket&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="查找算法">查找算法&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">binarySearch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&amp;amp;&lt;/span> &lt;span class="n">nums&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">low&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">high&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">nums&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">low&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">high&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">mid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">low&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">high&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">low&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">mid&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">high&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mid&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="nf">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">mid&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">low&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mid&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">mid&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></content><category scheme="https://keepjolly.com/posts/" term="posts" label="posts"/><category scheme="https://keepjolly.com/posts/algorithm/" term="algorithm" label="algorithm"/><category scheme="https://keepjolly.com/tags/c-/" term="C++" label="C++"/></entry><entry><title type="text">公务员行测--判断推理</title><link rel="alternate" type="text/html" href="https://keepjolly.com/posts/learn/judgmental-reasoning/"/><id>https://keepjolly.com/posts/learn/judgmental-reasoning/</id><updated>2024-01-13T13:59:11+00:00</updated><published>2023-12-09T08:27:05+08:00</published><author><name>Rurouni</name><uri>https://keepjolly.com/</uri><email>1366475809@qq.com</email></author><rights>在保留本文作者及本文链接的前提下，非商业用途随意转载分享(我会高强度自搜的喔👊)。</rights><summary type="html">图形推理 命题形式与考点 命题形式： 一组图：从左往右找规律，极少需要跳着找规律 二组图：第……</summary><content type="html">&lt;h2 id="图形推理">图形推理&lt;/h2>
&lt;h3 id="命题形式与考点">命题形式与考点&lt;/h3>
&lt;ul>
&lt;li>命题形式：
&lt;ul>
&lt;li>一组图：从左往右找规律，极少需要跳着找规律&lt;/li>
&lt;li>二组图：第一组找规律，第二组应用规律&lt;/li>
&lt;li>九宫格：优先从第一行找规律，然后应用规律；其次从第一列找规律，然后应用规律；极少遇到米字型和S型&lt;/li>
&lt;li>分组分类：找图形的相同规律&lt;/li>
&lt;li>空间重构：三维重建&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>考点：
&lt;ol>
&lt;li>位置规律&lt;/li>
&lt;li>样式规律&lt;/li>
&lt;li>属性规律&lt;/li>
&lt;li>数量规律&lt;/li>
&lt;li>特殊规律&lt;/li>
&lt;li>空间重构&lt;/li>
&lt;li>立体图形&lt;/li>
&lt;li>利用图形特征快速找到规律&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>做题顺序：
&lt;ul>
&lt;li>元素相同找位置，元素相似找样式，否则找属性（优先对称其次曲直最后不得已开闭）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="位置规律">位置规律&lt;/h3>
&lt;p>&lt;a href="https://www.bilibili.com/video/BV12t4115735/?share_source=copy_web&amp;amp;vd_source=504045c18340a005fec8674ac78d7934&amp;amp;t=1028">视频&lt;/a>&lt;/p>
&lt;ul>
&lt;li>位置类识别：&lt;strong>元素组成相同&lt;/strong>&lt;/li>
&lt;li>考点：
&lt;ul>
&lt;li>平移
&lt;ul>
&lt;li>方向：直线平移（上下、左右、对角线）、绕圈平移（顺逆时针）&lt;/li>
&lt;li>步数：恒定、递增（等差）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>旋转
&lt;ul>
&lt;li>方向：顺时针、逆时针&lt;/li>
&lt;li>角度：45°、90°、180°&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://www.bilibili.com/video/BV12t4115735/?share_source=copy_web&amp;amp;vd_source=504045c18340a005fec8674ac78d7934&amp;amp;t=3912">翻转&lt;/a>
&lt;ul>
&lt;li>左右翻转：竖轴对称 b｜d&lt;/li>
&lt;li>上下翻转：横轴对称 $\frac{p}{b}$&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>技巧：即可以比较题干，也可以比较选项（适用所有图推）&lt;/li>
&lt;/ul>
&lt;h4 id="平移旋转翻转">平移&amp;amp;旋转&amp;amp;翻转&lt;/h4>
&lt;ul>
&lt;li>元素组成相同，优先考虑位置规律&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231204233259.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/p>
&lt;p>【例4】三角形底边在平移，并且顶点在按正方形进行平移&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231204233827.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/p>
&lt;p>【例5】看单幅图的规律，1黑点顺时针到三角形45同理，如果考虑黑点和三角形的位置为123，没答案所以不行&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231204234529.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/p>
&lt;p>【练4】一个个元素看（先横着看没规律，然后竖着看），第一个元素自上往下走，第二个往上走后从头跑，第三个位置不变，第四个从头跑。注意三角形走上去后，只会保留三角形内的方框。即梯形往上走变三角形。【练5】折返跑，是撞头后掉头不会穿越&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231205190921.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/p>
&lt;p>【练5】外圈逆时针、内圈顺时针&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231205191049.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/p>
&lt;p>【练2】九宫格优先看行，第一个到第二个是左右翻转、第二个到第三个是上下翻转。不要孤立单看白色三角形的变化和黑色三角形的变化。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="样式规律">样式规律&lt;/h3>
&lt;ul>
&lt;li>识别特征：&lt;strong>元素组成相似&lt;/strong>，相同（位置）线条重复出现&lt;/li>
&lt;li>考点：
&lt;ul>
&lt;li>加减同异
&lt;ul>
&lt;li>相加、相减：S + I = $&lt;/li>
&lt;li>求同：B + 3 = 3&lt;/li>
&lt;li>&lt;strong>求异&lt;/strong>：消消乐。B + 3 = I&lt;/li>
&lt;li>注意：位置+样式的复合考法&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>黑白运算
&lt;ul>
&lt;li>特征：图形轮廓和分隔区域相同，内部颜色不同&lt;/li>
&lt;li>方法：相同位置运算&lt;/li>
&lt;li>区分：黑块数量相同优先平移；不同优先黑白运算&lt;/li>
&lt;li>技巧：直接从选项进行比较，图1黑（白）+图2黑（白）= 图3结果&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>技巧：即可以比较题干，也可以比较选项（适用所有图推）&lt;/li>
&lt;/ul>
&lt;h4 id="消消乐黑白运算">消消乐&amp;amp;黑白运算&lt;/h4>
&lt;ol>
&lt;li>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231205194306.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/p>
&lt;p>【例5】第一行都存在平行四边形且第三幅图是消完后旋转的结果（并且顺逆旋转不变）。B是没有旋转，D是旋转后的结果。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231205194533.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/p>
&lt;p>【练2】也可以&lt;strong>自下往上&lt;/strong>看，第一列第一个为后两个相加&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231205195147.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/p>
&lt;p>【练6】发现是消消乐后，找到相同的线然后排除一个选项，知道排除所有选项，不要全消完。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231205195837.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/p>
&lt;p>【练1】发现是黑白运算后直接从第二组中&lt;strong>按顺序&lt;/strong>找对应结果，不要先从第一组找到黑白运算表后再看选项&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="属性规律">属性规律&lt;/h3>
&lt;ul>
&lt;li>识别特征：元素组成不相同、不相似，优先属性&lt;/li>
&lt;li>考点：
&lt;ol>
&lt;li>对称性（重要）
&lt;ul>
&lt;li>
&lt;p>轴对称：对称轴方向、数量&lt;/p>
&lt;ul>
&lt;li>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231205200903.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/li>
&lt;li>对称轴数量分别为1、1、5、5，注意方向变化&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.bilibili.com/video/BV12t4115735/?p=2&amp;amp;share_source=copy_web&amp;amp;vd_source=504045c18340a005fec8674ac78d7934&amp;amp;t=5328">中心对称&lt;/a>（图形旋转 180°后和原图形完全重合/找一中点，两点穿过该点距离相同）&lt;/p>
&lt;ul>
&lt;li>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231205200915.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/li>
&lt;li>一般考试的图形都是上述特征图的变形&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>轴对称+中心对称&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>曲直性
&lt;ul>
&lt;li>优先全直线/曲线组成图形&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>开闭性
&lt;ul>
&lt;li>优先全开放，全封闭（考到极少，综合考虑规律后再看开闭）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>技巧：把对称性标出来，以及方向和数量&lt;/li>
&lt;/ul>
&lt;h4 id="对称性曲直性开闭性">对称性&amp;amp;曲直性&amp;amp;开闭性&lt;/h4>
&lt;ol>
&lt;li>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231205203355.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/p>
&lt;p>【练5】结合选项看，只有D包含竖轴，图中都是既有多轴又出现中心对称&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231205204606.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/p>
&lt;p>【&lt;a href="https://www.bilibili.com/video/BV12t4115735/?p=2&amp;amp;share_source=copy_web&amp;amp;vd_source=504045c18340a005fec8674ac78d7934&amp;amp;t=7509">练8&lt;/a>】看各组成部分的对称性，134对称轴相交45°，256对称轴平行。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231205204851.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/p>
&lt;p>【练9】对称轴数量相加&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231205205625.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/p>
&lt;p>【练1】发现第一幅图不对称，立马考虑曲直性。外曲/直内直/曲，图形全为曲直，排除BD，发现AC为不同在于内外曲直性&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231205205807.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/p>
&lt;p>【练2】优先考虑对称性，发现第四幅图不对称，然后考虑曲直性。结合内部对称轴方向+外部曲直性&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231205210137.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/p>
&lt;p>【例1】优先考虑对称性，发现6不对称，曲直无法考虑，考虑开闭性。145一组，236一组&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231205210757.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/p>
&lt;p>【例2】146半开半闭。另一种更好的解释：146的面都是线连接，235面都是紧挨。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="数量规律">数量规律&lt;/h3>
&lt;ul>
&lt;li>识别特征：元素不相同不相似、并且数量规律明显&lt;/li>
&lt;/ul>
&lt;h4 id="点线一笔画">点&amp;amp;线&amp;amp;一笔画&lt;/h4>
&lt;ol>
&lt;li>点
&lt;ul>
&lt;li>考点：线与线的交点（切点也是）数、注意出现圆后的点数&lt;/li>
&lt;li>特征：线条交叉明显、一团线交叉（也有可能一笔画）、相切较多&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>线
&lt;ul>
&lt;li>考点：直线数量、曲线数量（一般不存在直线数量+曲线数量的题，需要分开数）、垂直平行关系、一笔画&lt;/li>
&lt;li>特征：多边形、单一直线；曲线图形&lt;/li>
&lt;li>一笔画
&lt;ul>
&lt;li>图形由一笔画成，&lt;a href="https://www.bilibili.com/video/BV12t4115735/?p=4&amp;amp;share_source=copy_web&amp;amp;vd_source=504045c18340a005fec8674ac78d7934&amp;amp;t=165">特点&lt;/a>：线条之间联通、奇点数=0或2（奇点：由一个点发射出奇数条线）、&lt;strong>端点必为奇点&lt;/strong>（奇点数一定是偶数个）&lt;/li>
&lt;li>考点：遇到特征图考虑笔画数&lt;/li>
&lt;li>特征：明显存在一笔画图和其特征图&lt;/li>
&lt;li>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231205231000.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">
&lt;ul>
&lt;li>五角星（遇到时可能会考查线数量、点数量、 对称性和笔画数，可以结合其他的特征图判断考点）&lt;/li>
&lt;li>“日”字及其变形&lt;/li>
&lt;li>“田”字及 其变形（“田”字共 4 个奇点，是两笔画图形）&lt;/li>
&lt;li>圆相切/相交（圆相切和相交的点均发射出偶数条线，不是奇点）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>多笔画
&lt;ul>
&lt;li>笔画数=奇点数/2+分离图形笔画数&lt;/li>
&lt;li>优先考虑一笔画，出现一笔画后，再看是不是多笔画的规律&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>题目：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231205211646.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/p>
&lt;p>【例2】不相同不相似，无全对称，考虑点。126二点，345四点。虽然134一笔画，但是6需要4笔。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231205212141.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/p>
&lt;p>【练1】4图不对称，考虑点，但是正常数点不行，发现四图中都出现圆，找曲直交点/圆切点&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231205212337.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/p>
&lt;p>【练3】都出现圆，相切没规律，考虑圆内交点&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231205223336.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/p>
&lt;p>【例4】曲直性无法分类；点不行，曲线数量不行，看直线数量不行，两者合并发现曲-直相等。建议把各类特性写出来，不要只看一点&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231205223820.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/p>
&lt;p>【例5】首尾线垂直或平行&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231205224434.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/p>
&lt;p>【练3】汉字一般考笔画，线数，面，部分。笔画不行，线数发现左撇有关系&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231205224847.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/p>
&lt;p>【练4】数黑点没规律，数边没规律，两者相减有规律&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231205225407.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/p>
&lt;p>【&lt;a href="https://www.bilibili.com/video/BV12t4115735/?p=3&amp;amp;share_source=copy_web&amp;amp;vd_source=504045c18340a005fec8674ac78d7934&amp;amp;t=7294">练6&lt;/a>】元素相同，都是三条线。三条线的移动&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231205225806.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/p>
&lt;p>【练7】同例5，但是平行的两条线方向不一致&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231205232743.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/p>
&lt;p>【练4】看对称，不能区分。看曲直不行。点肯定不行，出现一笔画24，考虑一笔画，135为多笔画，仅吉林会出现，一般都为同一规律&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="面素角">面&amp;amp;素&amp;amp;角&lt;/h4>
&lt;ol start="4">
&lt;li>面
&lt;ul>
&lt;li>封闭空间，面是白色，黑的不是面&lt;/li>
&lt;li>考点：数量，形状&lt;/li>
&lt;li>特征：图形被分隔、封闭面明显；生活化图形、粗线条图形中留空白区域&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>素
&lt;ul>
&lt;li>考点：优先看元素的种类数，其次元素的个数，最后是元素的替换&lt;/li>
&lt;li>特征：多个独立小图形&lt;/li>
&lt;li>另一考点：部分数（连续的黑色区域叫做一部分，数有几部分）
&lt;ul>
&lt;li>特征：生活化图形、黑色粗线条图形&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>角
&lt;ul>
&lt;li>考点：内角数、细分为锐角、直角、钝角&lt;/li>
&lt;li>特征：图形中出现扇形、改造图、折线图，优先考虑数角；图形中出现 直角时，可优先关注直角。&lt;/li>
&lt;li>考到很少&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>生活化、黑线条图形常见考法
&lt;ul>
&lt;li>部分数&lt;/li>
&lt;li>面（黑线条内留白较多，数字）&lt;/li>
&lt;li>属性（对称、开闭）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>题目：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231206190059.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/p>
&lt;p>【例4】对称轴没规律；点线也没规律；发现面和轴一致。要记录下所有规律的数字。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231206191213.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/p>
&lt;p>【例6】每个小图形由对称性，但是5太多。考虑面，都是5个面，但是每个图形其中最小的子图形的形状和其大轮廓一致，反之就是另3个。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231206191736.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/p>
&lt;p>【练1】非常综合，首先判断对称性，排除A，曲直性交替排除B，面数量排除D&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231206192208.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/p>
&lt;p>【练4】数字考察：面、笔画、线。发现白面2个面，黑面3个面&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231206192856.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/p>
&lt;p>【练6】面无规律，发现每幅图三角形数量递增&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231206201612.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/p>
&lt;p>【例3】三角形变少，圆形逐渐变多，且仅这种图形，考虑元素替换，发现一个⚪=3个▲，每次递增一个▲。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231206202304.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/p>
&lt;p>【练3】都包含三种元素，排除C，每幅图包含前幅图的一个元素，选A&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231206203116.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/p>
&lt;p>【练4】三种元素，五个元素，排除AD。发现每幅图形呈现311，221，311，221，311规律&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231206204910.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/p>
&lt;p>【练5】像这种内外圈图形，可以分开考虑，发现外圈2*3=6，内圈6=2*3&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231206210557.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/p>
&lt;p>【例4】第一行前两个就不符合黑白运算，考虑小元素的部分数，黑色部分为1、2、3&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231206212907.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/p>
&lt;p>【例2】注意数直角的两边都要数上&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231206213109.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/p>
&lt;p>【练1】一笔画不行、对称不行、看到改造图D，发现数角为2365，则应该数锐角而不是都数。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="特殊规律">特殊规律&lt;/h3>
&lt;h4 id="功能元素">功能元素&lt;/h4>
&lt;ol>
&lt;li>
&lt;p>点&lt;/p>
&lt;ol>
&lt;li>观察点对其他图形的标记作用（角度、交点、边长）&lt;/li>
&lt;li>观察点之间的关系，将两点连成线&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>箭头&lt;/p>
&lt;ol>
&lt;li>观察箭头的指向性&lt;/li>
&lt;li>观察箭头之间的关系（垂直、平行）&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>特征：出现小黑点或者箭头等小元素&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231206215921.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/p>
&lt;p>【例3】连接两点&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231206215958.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/p>
&lt;p>【练1】对称性只有124，其他没有规律，pass。发现点在线上和点在交点上&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231206220251.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/p>
&lt;p>【练4】标记图形中最大和最小的角&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="图形间关系">图形间关系&lt;/h4>
&lt;p>&lt;a href="https://www.bilibili.com/video/BV12t4115735/?p=5&amp;amp;share_source=copy_web&amp;amp;vd_source=504045c18340a005fec8674ac78d7934&amp;amp;t=5104">视频&lt;/a>&lt;/p>
&lt;ol>
&lt;li>相离：图形间没有公共部分&lt;/li>
&lt;li>相压：两个图形上下覆盖，被压图形有部分线条被遮盖，注意上下图形的区别&lt;/li>
&lt;li>相交：图形间有公共部分，又可细分为以下 3 个考点，分别是相交于面、 相交于点、相交于边。
&lt;ol>
&lt;li>相交于面：可考查相交面的形状、面积等&lt;/li>
&lt;li>相交于点：可考查相交点的位置（上下左右和内外）和数量&lt;/li>
&lt;li>相交于边：1. 可考查相交于边的数量。2. 可考查相交边样式：长/短、包含/交错、曲/直等&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>题型特征：题干每幅图&lt;strong>都出现两个元素&lt;/strong>或当几个封闭空间连在一起时。&lt;/li>
&lt;/ol>
&lt;p>题目：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231206230713.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/p>
&lt;p>【例4】相同元素相交&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231206230756.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/p>
&lt;p>【练1】相交边的包含和交错关系&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231206230956.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/p>
&lt;p>【练2】相切点数量&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231206231234.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/p>
&lt;p>【练4】这题应该有敏感性吧，图形由线连接和封闭图形&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="其他规律">其他规律&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231206232226.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/p>
&lt;p>【例2】每个数字只出现一次，或者9+6+8+3=2+6+？+7&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231206232249.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/p>
&lt;p>选项和题目的对应关系&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231206232915.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/p>
&lt;p>【例6】第一行=第一列；第二行=第二列；第三行=第三列&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231206233407.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/p>
&lt;p>【例8】每列线条组合是米字&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231206233659.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/p>
&lt;p>【例9】优先数格子数，空间重构也会用到，排除AC。没时间优先选不规则图形。可以尝试在选项中进行拼接&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="空间重构">空间重构&lt;/h3>
&lt;ul>
&lt;li>技巧：所有方法都是排除错误选项&lt;/li>
&lt;/ul>
&lt;h4 id="橡皮法">橡皮法&lt;/h4>
&lt;ul>
&lt;li>&lt;a href="https://www.bilibili.com/video/BV12t4115735/?p=6&amp;amp;share_source=copy_web&amp;amp;vd_source=504045c18340a005fec8674ac78d7934">视频&lt;/a>。不多说了，考场让带，直接画图即可。&lt;/li>
&lt;/ul>
&lt;h4 id="六面体">六面体&lt;/h4>
&lt;ol>
&lt;li>相对面
&lt;ol>
&lt;li>同行或同列相隔一个面&lt;/li>
&lt;li>“Z”字形两端&lt;/li>
&lt;li>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231206235005.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>相邻面
&lt;ol>
&lt;li>折叠前后相邻关系保持不变&lt;/li>
&lt;li>紧邻（挨着）的面是相邻面。外部构成直角的两条边是同一条边。四个格子的端点是相邻面&lt;/li>
&lt;li>特征：图形方向明显，可直接唯一确定其相邻面位置。&lt;/li>
&lt;li>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231207192201.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">
&lt;ul>
&lt;li>箭头为相邻法、蓝色为相对面&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>画边法
&lt;ol>
&lt;li>结合选项，找一个特殊面的&lt;strong>唯一点&lt;/strong>或&lt;strong>唯一边&lt;/strong>&lt;/li>
&lt;li>顺时针&lt;del>或逆时针方向&lt;/del>描边&lt;/li>
&lt;li>题干与选项对应面不一致——排除&lt;/li>
&lt;li>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231207194047.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">
&lt;ul>
&lt;li>A用到唯一边（&lt;del>注意是从一条边开始画，而不是点&lt;/del>），B相对面，C唯一点&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>题目：
&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231207194821.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/p>
&lt;h4 id="四面体和八面体">四面体和八面体&lt;/h4>
&lt;ul>
&lt;li>四面体
&lt;ul>
&lt;li>四面体的展开图只有两种情况，如下图，展开图中构成一条直线的两条边， 折合之后是同一条边&lt;/li>
&lt;li>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231207195430.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">
&lt;ul>
&lt;li>图 1 中的 a 和 b，c 和 d，e 和 f，折合以后是同一条边；&lt;/li>
&lt;li>图 2 中的 a 和 b，c 和 d，剩余的 e 和 f，折合以后是同一条边。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>解题技巧：箭头法（判定左、右、下三个方向的面）
&lt;ul>
&lt;li>图 1 中，在面2画箭头，则面3为其下面，面1为其左侧，面4为其右侧&lt;/li>
&lt;li>图 2 中，面3为其底面，面1为其左侧，面4为其右侧。看箭头指向的左右下&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231207202614.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>八面体
&lt;ul>
&lt;li>钝角是公共边，顶点发出四个面&lt;/li>
&lt;li>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231207203113.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">
&lt;ul>
&lt;li>点 a 发出的四个面是 5，6，7 和 8。 点 b 发出的四个面呢？由于构成“ヘ”形的两条边，折合后是同一条边，那么 b 和 c 折合后是同一个点，所以 b 点发出的四个面是 2，3，6 和 7，同理，c 点发出的四个面也是 2，3，6 和 7。&lt;/li>
&lt;li>蓝色公共边为5，8；红色为1，4；紫色为3，6&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231207205217.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="三视图截面图立体拼合">三视图、截面图、立体拼合&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://www.bilibili.com/video/BV12t4115735/?p=8&amp;amp;share_source=copy_web&amp;amp;vd_source=504045c18340a005fec8674ac78d7934&amp;amp;t=41">三视图&lt;/a>
&lt;ul>
&lt;li>题型特征：通常出现分组分类题中，图 1 通常是&lt;strong>立体图形&lt;/strong>，图 2 和图 3 通常是图 1 的三视图。&lt;/li>
&lt;li>技巧：
&lt;ul>
&lt;li>观察到的三视图均是平面图。若选项的三视图是立体图形，则选项错误。&lt;/li>
&lt;li>原图有线就有线，原图没线就没线。&lt;/li>
&lt;li>被遮挡的时候，看不见被遮挡部分。注意有时候不会标出虚线&lt;/li>
&lt;li>有些角度下弧会被压平。&lt;/li>
&lt;li>先看轮廓排选项，再看细节选答案&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231207210228.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/p>
&lt;p>【例5】选项方块数量不一致，优先数方块数&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231207210641.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/p>
&lt;p>【例9】俯视图一致&lt;/p>
&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>&lt;a href="https://www.bilibili.com/video/BV12t4115735/?p=8&amp;amp;share_source=copy_web&amp;amp;vd_source=504045c18340a005fec8674ac78d7934&amp;amp;t=1776">截面图&lt;/a>
&lt;ul>
&lt;li>
&lt;p>特征：题干中给出一个立体图形，问哪项能够（或不能）成为其截面。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>六面体的截面&lt;/p>
&lt;ul>
&lt;li>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231207211901.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/li>
&lt;li>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231207211908.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/li>
&lt;li>只能切出锐角三角形&lt;/li>
&lt;li>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231207211927.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>圆柱体（1）圆（横切）（2）椭圆（斜切）（3）矩形（竖切）&lt;/p>
&lt;ul>
&lt;li>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231207212004.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>圆锥（1）圆（横切）（2）椭圆（斜切）（3）三角形（竖切）&lt;/p>
&lt;ul>
&lt;li>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231207212037.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>圆台（1）圆（横切）（2）椭圆（斜切）（3）梯形（竖切）&lt;/p>
&lt;ul>
&lt;li>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231207212044.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231207213730.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/p>
&lt;p>【例3】可以分成两部分进行切割，A选项从对角线开始切正方体，然后到下半部分长方体后变长从而又是个梯形。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231207213715.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/p>
&lt;p>【例5】BD选复杂的&lt;/p>
&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>立体拼合
&lt;ul>
&lt;li>解题：凹凸有致：有凹必有凸，有凸必有凹。&lt;/li>
&lt;li>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231207214133.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/li>
&lt;li>【例4】其实还好，可以脑海里按它的位置摆好，因为位置肯定确定，①一定向左转，②一定开口向左&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="类比推理">类比推理&lt;/h2>
&lt;h3 id="语义关系">语义关系&lt;/h3>
&lt;ul>
&lt;li>近义关系：理想∶梦想；锲而不舍∶坚持不懈&lt;/li>
&lt;li>反义关系： 勇敢∶懦弱 言而有信∶言而无信&lt;/li>
&lt;li>如果一级关系，即看意思（近反义关系）选不出唯一答案时，需进行&lt;strong>二级辨析&lt;/strong>
&lt;ul>
&lt;li>常见二级辨析： 1.感情色彩（褒义、贬义、中性） 2.词语结构（如大同小异）&lt;/li>
&lt;li>适用任何关系&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>比喻义、象征义：把一种事物比喻成另外的事物，或者词语本身的含义同时是另外一种事物的象征。&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>大义凛然∶卑躬屈膝 &lt;br />A.安分守己∶好高骛远 B.穷奢极欲∶节衣缩食 &lt;br />C.得心应手∶百无一能 D.持之以恒∶虎头蛇尾&lt;/p>
&lt;p>先看语义：反义关系。A安分守己应该对应惹是生非；C：百无一能：什么都不会做。得心应手（又指做事顺利）对应束手无策。D：虎头蛇尾：言行不一致；有始无终。及逆行二次辨析，B是褒贬位置错误。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>沧桑∶白发 &lt;br />A.清纯∶酒窝 B.稚嫩∶乳牙 &lt;br />C.鲁莽∶健壮 D.博学∶眼镜&lt;/p>
&lt;p>白发象征沧桑，酒窝象征笑容，乳牙象征乳臭未干，健壮象征健康强壮，眼睛象征近视。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>指鹿为马：颠倒黑白 &lt;br />A．师心自用：固执己见 B．目无全牛：鼠目寸光 &lt;br />C．不以为然：不屑一顾 D．不孚众望：众望所归&lt;/p>
&lt;p>近义关系，排除BCD。师心自用：固执己见；刚愎自用：自以为是；目无全牛：技艺纯熟；不以为然：不同意；不孚众望：未符合大家的期望。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>陈词滥调：老生常谈 &lt;br />A．按部就班：循序渐进 B．博闻强识：见多识广 &lt;br />C．见义勇为：助人为乐 D．八面玲珑：面面俱到&lt;/p>
&lt;p>近义关系，排除C，二级辨析，1贬2中，排除AB。八面玲珑：为人处事圆滑，善于很周到地应付各个方面。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="逻辑关系">逻辑关系&lt;/h3>
&lt;ul>
&lt;li>全同关系：浪漫∶罗曼蒂克；老鼠∶耗子&lt;/li>
&lt;li>并列关系
&lt;ul>
&lt;li>矛盾关系：生∶死。反义关系不行，考虑并矛&lt;/li>
&lt;li>反对关系：苹果∶香蕉。水果中有这些，但是苹果不能是香蕉&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>包容关系
&lt;ul>
&lt;li>种属关系：A 是 B 的一种。苹果∶水果&lt;/li>
&lt;li>组成关系：A 是 B 的一个组成部分。轮胎∶汽车&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>交叉关系
&lt;ul>
&lt;li>女士∶公务员&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>对应关系
&lt;ul>
&lt;li>材料 例：小麦∶馒头&lt;/li>
&lt;li>工艺 例：白酒∶发酵
&lt;ul>
&lt;li>物理变化、化学变化&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>功能 例：银行卡∶支付
&lt;ul>
&lt;li>主要功能、次要功能&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>属性 例：盐∶咸
&lt;ul>
&lt;li>必然属性、或然属性&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>时间顺序 例：学习∶考试
&lt;ul>
&lt;li>主体一致、主体不一致&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>依据 例：航行∶航线&lt;/li>
&lt;li>因果 例：炎热∶中暑&lt;/li>
&lt;li>职业 例：老师∶上课&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>五行：木火土金水 &lt;br />A．五经：诗书礼易大学 B．五音：宫商韵征羽 &lt;br />C．五色：青黄赤白绿 D．五味：酸苦甘辛咸&lt;/p>
&lt;p>【全同关系-练1】诗书礼易春秋、宫商角徵羽、青赤黄白黑&lt;/p>
&lt;/li>
&lt;li>
&lt;p>动：静&lt;br />A.东∶西 B.贫：富 &lt;br />C.黑∶白 D.曲∶直&lt;/p>
&lt;p>【并列-矛盾-练1】东南西北、贫小康富...、青赤黄白黑&lt;/p>
&lt;/li>
&lt;li>
&lt;p>（ ） 之于 钢琴 相当于 马褂 之于 （ ） &lt;br />A.羌笛∶长袍 B.胡琴：西服 &lt;br />C.京剧∶长裙 D.琴键∶唐装&lt;/p>
&lt;p>【并列-反对-练3】中国之于西方。琴的种类、衣服的种类，选B&lt;/p>
&lt;/li>
&lt;li>
&lt;p>麻雀：动物：生物链 &lt;br />A.豆浆∶早餐∶豆制品 B.开水∶纸杯∶便利品 &lt;br />C.发卡∶首饰∶妆扮品 D.钢笔∶电脑∶办公品&lt;/p>
&lt;p>【包含关系-练3】麻雀是动物的一种，动物是生物链组成部分。A豆浆是豆制品的一种，B开水是水的一种，D钢笔是笔的一种。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>文物：建筑 &lt;br />A.烹饪∶佐料 B.故宫∶楼房 &lt;br />C.诗人∶教授 D.皮鞋∶布鞋&lt;/p>
&lt;p>【交叉关系-练1】文物里有建筑，建筑里有文物。A烹饪用佐料，B故宫是楼房，C诗人里有教授，教授里有诗人。D并列里的反对。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>玉石∶雕琢∶玉器 &lt;br />A.蚕丝∶织造∶丝绸 B.粮食∶酿造∶美酒 &lt;br />C.生铁∶冶炼∶钢材 D.蚊香∶点燃∶烟雾&lt;/p>
&lt;p>【对饮关系-例3】玉石物理雕琢玉器。A&lt;/p>
&lt;/li>
&lt;li>
&lt;p>木材∶抽屉∶收纳 &lt;br />A.钢铁∶剪刀∶切割 B.棉花∶毛线∶保暖 &lt;br />C.城墙∶石头∶防御 D.橡胶∶气垫∶缓冲&lt;/p>
&lt;p>【对应关系-例4】木材是抽屉的原材料，收纳是抽屉的功能。D&lt;/p>
&lt;/li>
&lt;li>
&lt;p>白醋∶消毒 &lt;br />A.热水器∶加热 B.汽油∶去渍 &lt;br />C.白糖∶调味 D.人参∶滋补&lt;/p>
&lt;p>【对应关系-例5】白醋的次要功能是消毒。B&lt;/p>
&lt;/li>
&lt;li>
&lt;p>失之毫厘∶谬以千里 &lt;br /> A.三十六计∶走为上计 B.召之即来∶挥之即去 &lt;br /> C.种瓜得瓜∶种豆得豆 D.前人栽树∶后人乘凉&lt;/p>
&lt;p>【对应关系-例14】因为毫厘，所以千里。C内部因果。D外部因果&lt;/p>
&lt;/li>
&lt;li>
&lt;p>故人西辞黄鹤楼 对于 （ ） 相当于 （ ） 对于 怀古 &lt;br />A.出游 越王勾践破吴归 B.场所 千古兴亡多少事 &lt;br />C.送别 折戟沉沙铁未销 D.离别 西出阳关无故人&lt;/p>
&lt;p>【比喻义-练7】故事象征送别，排除AB，C表怀古，D念友&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="语法关系">语法关系&lt;/h3>
&lt;ul>
&lt;li>主谓关系 例：学生∶学习&lt;/li>
&lt;li>动宾关系 例：学习∶功课&lt;/li>
&lt;li>主宾关系 例：学生∶功课&lt;/li>
&lt;li>造句子原则：（1）能不加字就不加字；能少加字就少加字。（2）加字尽量加一样的。&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>讨论∶会议∶方案 &lt;br />A.合作∶课题∶计划 B.研究∶手机∶销量&lt;br />C.分析∶汽车∶技术 D.调研∶基层∶实情&lt;/p>
&lt;p>【练2】会议里讨论方案。基层里调研实情&lt;/p>
&lt;/li>
&lt;li>
&lt;p>风险∶规避∶损失 &lt;br />A.保险∶购买∶赔偿 B.老人∶关爱∶长寿 &lt;br />C.锻炼∶加强∶肥胖 D.军队∶保卫∶战争&lt;/p>
&lt;p>【练3】规避风险减少损失。加强锻炼减轻肥胖&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="定义判断">定义判断&lt;/h2>
&lt;ul>
&lt;li>每道题先给出一个概念的定义，然后分别列出四种情况，要求报考者&lt;strong>严格依据&lt;/strong>定义选出一个最符合最不符合该定义的答案。&lt;/li>
&lt;li>解题思维：
&lt;ol>
&lt;li>看清提问方式，为“属于/符合”，“&lt;strong>不属于/不符合&lt;/strong>”定义等&lt;/li>
&lt;li>识别有效信息——找准关键词、关键句&lt;/li>
&lt;li>逐一分析选项，当纠结时采用对比的思维进行排除，最终选择更符合题干要求的选项。对比思维，择优选择&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h4 id="识别有效信息">识别有效信息&lt;/h4>
&lt;ul>
&lt;li>主体、客体
&lt;ul>
&lt;li>主客体不符合的选项一定不符合定义！&lt;/li>
&lt;li>不是每题一定都有主体和客体，但是出现了要重点看！&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>条件+结果
&lt;ul>
&lt;li>方式：通过，利用；&lt;/li>
&lt;li>原因：因为，由于；&lt;/li>
&lt;li>时间：当……时；&lt;/li>
&lt;li>结果：导致，从而；&lt;/li>
&lt;li>目的：以，达到&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>包含定义的句子优先看
&lt;ul>
&lt;li>看完定义就懂，就不需要再读后面的。一般在第一句&lt;/li>
&lt;li>读不懂，看补充说明：即、也就是说&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>多定义
&lt;ul>
&lt;li>问啥看啥。看清题干问的是哪个定义，重点看目标定义&lt;/li>
&lt;li>比较定义。纠结两个选项时，再与其他定义比较&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>经营性资产是在生产和流通中能够为社会提供商品或劳务的资产。经营性资产的使用单位是具有法人地位的企业，其运营要以追求经济效益为原则。从会计角度看，主要指企业因盈利目的而持有，且实际也具有盈利能力的资产。 &lt;br />根据上述定义，下列不属于“经营性资产”的是： &lt;br />A．某电视机厂中积压的黑白电视机 &lt;br />B．建设中尚未投入使用的水力发电站 &lt;br />C．某外贸公司用于交纳税金的银行存款 &lt;br />D．某重点中学新购入的实验室设备和器材&lt;/p>
&lt;p>【主客体-练2】主体是具有盈利能力的资产。C的存款也是具有盈利能力的资产。D是用于教学，不追求经济效益。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>人类增强就是利用生物医学技术、智能技术、神经科学技术、信息技术和纳米技术等高新技术手段使健康人类的机体功能或能力超出其正常范围，从而使人类的体貌、寿命、人格、认知和行为等能力发生根本性变化并具有全新能力的一种技术手段，其目的是显著提高人类生活的质量。 &lt;br />根据上述定义，下列选项不属于人类增强的是：&lt;br /> A．演员赵某用药剂延缓衰老 &lt;br />B．医生建议老张去做心脏搭桥手术 &lt;br />C．医生将传感器植入老陈大脑提高其记忆力 &lt;br />D．小王为了增加自己的身高服用类增高药物&lt;/p>
&lt;p>【条件+结果-练2】通过医学技术导致健康人类xxx。B做手术是治疗。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>斜杠青年：指不满足于从事单一职业，追求拥有多重职业身份及多元生活方式的年轻人。他们在自我介绍时往往喜欢用斜杠来区分自己的不同身份，如：张三，金牌律师/企划师/专栏作家。&lt;br /> 下列属于斜杠青年的是： &lt;br /> A 最近两三年，八零后导演黄某某先后出演了 10 多次男配角，去年在一个著名的国际电影节上斩获了最佳男配角奖 &lt;br /> B 小丁在国外获得博士学位后，任职于国内一所著名高校，因科研成就突出， 被破格聘为教授，并入选省“双百”人才计划 &lt;br /> C 某公司程序员小陈爱好广泛，性格温和，人际关系融洽，节假日常邀上三五个好友一起登山、打球、游泳 &lt;br /> D 李总做过保安，送过快递，当过安装工，开过小杂货店，他经常自豪地向员工讲述自己 30 多年来丰富的职业经历&lt;/p>
&lt;p>【练5】多重身份。B单教授职业，C爱好≠生活方式D年轻人。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>文化自觉是指生活在一定文化中的人，对自己的文化有“自知之明”，即明白它的来历、形成过程、特色和发展趋向，从而增强自身文化转型的能力，并获得在新的时代条件下进行文化选择的能力和地位。此外， 文化自觉还表现为应具有世界眼光，能够理解别的民族的文化，增强与不同文化之间接触、对话、相处的能力。 根据上述定义，下列选项属于文化自觉的是： &lt;br />A．经谈判，中方同意增加美国电影进入中国市场的配额 &lt;br />B．为保护贵州梭嘎苗族文化习俗建立了梭嘎生态博物馆 &lt;br />C．赵武灵王的“胡服骑射”与北魏拓跋氏的“禁断胡语” &lt;br />D．湖北省襄樊市与河南省南阳市都自称是“诸葛亮故里”&lt;/p>
&lt;p>【包含定义-练5】即进行补充说明。A没提文化，B没提文化转型，D不了解自身来历。C学习其他文化并提高自己。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>农业干旱是指在作物生育期内，由于土壤水分不足而造成作物体内水分亏缺，影响作物正常生长发育。水文干旱是指由于降水的长期短缺而造成某段时间内地表水或地下水收支不平衡，出现水分短缺，使江河流量、 湖泊水位、水库蓄水等减少的现象。社会经济干旱是指由自然系统与人类社会经济系统中水资源供需不平衡造成的异常水分短缺现象，如果需大于供，就会发生社会经济干旱。 &lt;br />根据上述定义，下列选项属于社会经济干旱范畴的是： &lt;br />A．一月未雨，某著名河流流域出现大规模的河床裸露现象 &lt;br />B．地铁建设施工队不慎挖破水管，导致几个小区停水一天 &lt;br />C．常年少雨致使某工业区推行按时段浮动征收水费的办法 &lt;br />D．半月不曾下雨，某地水稻出现穗长缩短、穗粒减少现象&lt;/p>
&lt;p>【多定义-练1】优先看社会经济干旱，选C。A水文干旱，D农业干旱，B挖破水管与自然系统无关。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="同构选项排除法">同构选项排除法&lt;/h4>
&lt;ul>
&lt;li>同构选项——意思相似、结构相似的选项。&lt;/li>
&lt;li>解题思维：同构选项如果出现，直接排除。 往往出现在选&lt;strong>非&lt;/strong>题中，只能选择一个答案。&lt;/li>
&lt;li>何时使用同构选项： （1）题干读不懂，需要比较选项。 （2）题干可以读懂，但利用同构可以加速解题。&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>沉锚效应，指的是人们在对某事作出判断时，易受第一印象或第一信息支配，就像沉入海底的锚一样把人们的思想固定在某处。第一印象和先入为主是其在社会生活中的表现形式。 &lt;br />根据上述定义，下列选项没有应用到沉锚效应的是（）。 &lt;br />A.一家粥店服务员为客人盛粥后总问：“加一个鸡蛋还是两个？”另一家服务员总问：“加不加鸡蛋？”头一家店日销售额总高于后一家 &lt;br />B.男孩邀请心仪女生说：“出去玩好吗？”女孩觉得拒绝好像很自然，答应显得太主动，所以就说：“下次吧。”男孩认为女孩无意与他交往 &lt;br />C.邻居偷走华盛顿的马被发现拒不承认，华盛顿捂住马的双眼问邻居：“马哪只眼是瞎的？”邻居说：“右眼。”事实上，马的两只眼睛都没毛病 &lt;br />D.你去商场闲逛，导购小姐诱导说：“反正今天是出来买鞋的，甲或者乙都很适合你的气质，请选一双吧。”然后你就挑选了其中一双&lt;/p>
&lt;p>【同构-例1】学撩妹技巧。ACD都给定选项让人选择，B只是提供宏观选择。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>二难推理是由两个假言判断和一个选言判断作前提构成的推理。假言判断是断定一个事物情况的存在（称为前件）是另一个事物情况存在（称为后件）的条件判断。选言判断是断定在几种可能情况下，至少有一种情况存在的判断。二难推理是通过运用选言判断来肯定或否定假言判断，从而来肯定或否定假言判断的后件或前件存在或不存在的一种推理形式。 &lt;br />根据上述定义，下列不属于二难推理的是： &lt;br />A.如果刺激老虎，它是要吃人的；如果不刺激它，它也是要吃人的；或是刺激它，或是不刺激它，所以老虎总是要吃人的 &lt;br />B.如果张三是杀人犯，那么他有作案时间；如果张三是杀人犯，那么他有作案动机；张三或者没有作案时间，或者没有作案动机，所以他不是杀人犯 &lt;br />C.如果今天下午下大雨，那么操场就要积水；如果操场积水，那么球赛就要延期；所以，如果今天球赛不延期，那么今天下午没有下大雨 &lt;br />D.如果打人的行为触犯了法律，那么要受到法律处罚；如果打人的行为没有触犯法律，也要受到社会舆论的谴责；打人的行为或是触犯了法律，或者没有触犯法律，所以或是要受到法律处罚，或者要受到社会舆论的谴责&lt;/p>
&lt;p>【练1】A如果...如果，B如果...那么，C如果...那么，D如果...那么&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="逻辑推理">逻辑推理☆&lt;/h2>
&lt;h3 id="翻译推理基础">翻译推理（基础）&lt;/h3>
&lt;ul>
&lt;li>特征：明显的逻辑关联词；提问方式：“可以推出”、“不能推出”&lt;/li>
&lt;li>解题：先翻译，再推理&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>“前推后”&lt;/p>
&lt;ol>
&lt;li>关键词：如果/就/都/一定
&lt;ul>
&lt;li>如果...那么...&lt;/li>
&lt;li>只要...就...（区分只有...才）&lt;/li>
&lt;li>为了...一定...&lt;/li>
&lt;li>所有...都...&lt;/li>
&lt;li>...是...的充分条件&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>逆否&lt;strong>等价&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>A→B 等价于 否B→否A&lt;/li>
&lt;li>肯前必肯后；否后必否前；否前肯后不确定&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>“后推前”&lt;/p>
&lt;ol>
&lt;li>关键词：只有...才
&lt;ul>
&lt;li>不...不...&lt;/li>
&lt;li>除非...否则不...（除非..否则... 转换成 否后）&lt;/li>
&lt;li>...是...的基础/假设/前提/关键&lt;/li>
&lt;li>...是...的必要/必不可少的条件
&lt;ul>
&lt;li>谁关键/必不可少谁放在箭头后面&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>且/或&lt;/p>
&lt;ol>
&lt;li>A 且 B：二者同时成立
&lt;ul>
&lt;li>并列关系：和、既…又…&lt;/li>
&lt;li>递进关系：甚至/而且/还...&lt;/li>
&lt;li>&lt;strong>转折关系&lt;/strong>：但是/然而/却...&lt;/li>
&lt;li>标点符号：、，；&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>A 或 B：二者至少一个成立
&lt;ul>
&lt;li>...和...至少有一个&lt;/li>
&lt;li>&lt;a href="https://www.bilibili.com/video/BV12t4115735/?p=12&amp;amp;share_source=copy_web&amp;amp;vd_source=504045c18340a005fec8674ac78d7934&amp;amp;t=386">或关系确定&lt;/a>时，否1→1&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>要么 A，要么 B：二者只有一个成立
&lt;ul>
&lt;li>要么…要么…：…和…只有一个。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>德·摩根定律&lt;/p>
&lt;ul>
&lt;li>-（A 且 B）＝ -A 或-B&lt;/li>
&lt;li>-（A 或 B）＝ -A 且-B&lt;/li>
&lt;li>非号放进去，“且”变“或”，“或”变“且”&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>某学生考试作弊被学院监考老师发现。如果老师将此事向学校上报，这个学生会被学校开除；如果这个学生被开除，学院的年终考核会被一票否决。如果老师未将此事向学校上报，学生考试作弊现象将愈演愈烈。 &lt;br />由此可以推出（）。 &lt;br />A.如果学院的年终考核未被一票否决，则学生考试作弊现象将愈演愈烈 &lt;br />B.如果学院的年终考核被一票否决，作弊现象不会愈演愈烈 &lt;br />C.如果该学生被开除，说明老师已将此事向学校上报 &lt;br />D.如果作弊现象愈演愈烈，说明该学生没有被开除&lt;/p>
&lt;p>【前推后·例2】上报→开除；开除→否决；-上报→现象 等价于 -现象→上报，即-现象→上报→开除→否决。A：-否决→-开除→-上报→现象&lt;/p>
&lt;/li>
&lt;li>
&lt;p>【后推前·练1】己所不欲，勿施于人。施于人→己所欲&lt;/p>
&lt;/li>
&lt;li>
&lt;p>只要不起雾，飞机就能起飞。 以下哪项正确地表达了上述断定： &lt;br />（1）如果飞机按时起飞，则一定没有起雾&lt;br /> （2）如果飞机不按时起飞，则一定起雾&lt;br /> （3）除非起雾，否则飞机按时起飞&lt;/p>
&lt;p>【后推前·练4】不起雾→起飞。（1）起飞→不起雾。（2）不起飞→起雾。（3）起飞 转换成 不起飞→起雾。（2）（3）逆否等价题目&lt;/p>
&lt;/li>
&lt;li>
&lt;p>某高校外语教研室新招进五位外语老师，每位老师只教授一门外语。并且满足以下条件：&lt;br />（1）如果小钱教德语，那么小孙不教俄语 &lt;br />（2）或者小李教德语，或者小钱教德语 &lt;br />（3）如果小孙不教俄语，那么小赵不教法语&lt;br /> （4）或者小赵教法语，或者小周不教英语 &lt;br />以下哪项如果为真，可以得出“小李教德语”的结论？（） &lt;br />A.小孙不教俄语 B.小钱教德语 &lt;br />C.小周教英语 D.小赵不教法语&lt;/p>
&lt;p>【且或·例2】（1）钱德→孙不俄（2）李德或钱德（3）孙不俄→赵不法（4）赵法或周不英。周英→赵法（否1推1）→孙俄（逆否）→钱不德（逆否）→李德（否1推1）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>只要企业信用风险上升和有效信贷需求不足，银行就会陷入“资产荒”。 &lt;br />如果上述断定为真，银行没有陷入“资产荒”，那么？&lt;/p>
&lt;p>【德摩根·例3】风险且需求→银行 等价于 否银行→否风险或否需求&lt;/p>
&lt;/li>
&lt;li>
&lt;p>苗苗是某少儿舞蹈班学生，她喜欢民族舞。对于该舞蹈班学生，她们或者喜欢拉丁舞，或者喜欢芭蕾舞；喜欢民族舞的，则不喜欢芭蕾舞。&lt;br /> 以下哪项如果为真，可推出苗苗喜欢街舞这一结论？ &lt;br />A．舞蹈班有些喜欢拉丁舞的学生也喜欢街舞&lt;br />B．舞蹈班学生中，喜欢拉丁舞的都喜欢街舞 &lt;br />C．舞蹈班学生喜欢的舞蹈只局限于民族舞、拉丁舞、芭蕾舞和街舞 &lt;br />D．民族舞和街舞比芭蕾舞更容易学&lt;/p>
&lt;p>【综合·练1】题目：拉丁或芭蕾；民族→不芭；苗→民族→不芭→拉丁。A拉丁或街舞。B拉丁且街舞即拉丁→街舞&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="组合排列">组合排列&lt;/h3>
&lt;ul>
&lt;li>特征：两组及两组以上对象，以及之间的关系&lt;/li>
&lt;li>解题：排除法、代入法
&lt;ul>
&lt;li>题干条件确定，优先排除&lt;/li>
&lt;li>不确定，尝试代入&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>辅助解题
&lt;ul>
&lt;li>最大信息（条件中出现次数最多的词）作为推理起点&lt;/li>
&lt;li>符号：“＞”、“＜” 往往涉及年龄、成绩、收入、身高等大小比较&lt;/li>
&lt;li>列表格&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>某单位要选拔人才下乡挂职。符合条件的人有甲、乙、 丙、丁、戊、己，人事部门、组织部门和办公室分别提出了自己的要求： &lt;br />人事部门：丙、丁两人中只能去一人&lt;br /> 组织部门：若丁不去，则戊也不能去 &lt;br />办公室：甲、丙和己三人必须留下一个 &lt;br />由此可以推出，能够同时满足三个部门要求的派出方案是（）。 &lt;br />A.乙、丙、丁、戊 B.乙、丙、戊 &lt;br />C.甲、乙、丙、己 D.甲、乙、丙&lt;/p>
&lt;p>【排除法·例2】人事排除A；组织：丁不→戍不 &amp;lt;=&amp;gt; 戍→丁，排除B；办公室：排除C&lt;/p>
&lt;/li>
&lt;li>
&lt;p>三人在一起猜测晚会节目的顺序。甲说：“一班第一个出场，二班第三个出场。”乙说：“三班第一个出场，四班第四个出场。”丙说：“四班第二个出场，一班第三个出场。”结果公布后，发现他们的预测都只对了一半。 &lt;br />由以上可以推出，节目的正确出场顺序是（）。 &lt;br />A.四班第一，三班第二，一班第三，二班第四 &lt;br />B.二班第一，一班第二，三班第三，四班第四 &lt;br />C.三班第一，四班第二，二班第三，一班第四&lt;br />D.一班第一，二班第二，四班第三，三班第四&lt;/p>
&lt;p>【代入法·例3】都只对一半，不确定对的条件，选择代入法。A一班第三，二班第四，甲全错，排除。B一班第二，三班第三，甲丙全错，排除。D四班第三，三班第四，乙全错，排除。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>大学毕业的张、王、李、赵 4 人应聘到了同一家大型 公司，每人负责一项工作，其中一人做行政管理，一人做销售，一人做研发，另 一人做安保。 已知： &lt;br />①张不做行政管理，也不做安保； &lt;br />②王不做行政管理，也不做研发； &lt;br />③如果张没有做研发，那么赵也没有做行政管理； &lt;br />④李不做行政管理，也不做安保； &lt;br />⑤赵不做研发，也不做安保。 &lt;br />由此可以推出（） &lt;br />A.张做销售，李做研发 B.赵做研发，李做销售 &lt;br />C.李做销售，张做研发 D.李做研发，赵做安保&lt;/p>
&lt;p>【最大信息·例1】无法直接排除选项，选择最大信息。行政管理4次，安保三次，从行政管理开始推，张王李不做行政→赵行政→张研发③&lt;/p>
&lt;/li>
&lt;li>
&lt;p>上半年，国家食品药品监督管理局对市面上常见的 6 种抗生素进行了药效比较，得到结果如下：甲药比乙药有效，丙药的毒副作用比丁药大，戊药的药效最差，乙药与己药的药效相同。 &lt;br />由此可知（ ）。&lt;br />A.甲药与丁药的药效相同 B.戊药的毒副作用最大 &lt;br />C.甲药是最有效的药物 D.己药比甲药的药效差&lt;br />&lt;/p>
&lt;p>【符号·例2】药效：甲&amp;gt;乙=己&amp;gt;戍，毒副：丙&amp;gt;丁&lt;/p>
&lt;/li>
&lt;li>
&lt;p>甲、乙、丙、丁、戊 5 位摄影专业大学生为参加毕业 摄影大赛分赴黑龙江、西藏、云南、福建、江苏 5 地摄影采风。他们 5 人各有偏 爱的摄影题材：人物、花卉、风景、野生动物、古建筑，这次采风他们相约就上 述题材每人各拍一种。已知： （1）如果甲去黑龙江，乙就去江苏； （2）只有丙去福建，丁才去云南； （3）或者乙去江苏拍古建筑，或者戊去福建拍人物； （4）去江苏拍古建筑的大学生临行前曾与乙、丁话别。&lt;/p>
&lt;p>&lt;a href="https://www.bilibili.com/video/BV12t4115735/?p=12&amp;amp;share_source=copy_web&amp;amp;vd_source=504045c18340a005fec8674ac78d7934&amp;amp;t=6004">表格法·例4&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>某办公室有王莉、李明和丁勇 3 名工作人员，本周有分别涉及网络、财务、管理、人事和教育的 5 项工作需要他们完成。关于任务 安排，需要满足下列条件： &lt;br />①每人均需至少完成其中的一项工作，一项工作只能由一人完成； &lt;br />②人事和管理工作都不是由王莉完成的； &lt;br />③如果人事工作由丁勇完成，那么财务工作由李明完成； &lt;br />④完成教育工作的人至少还需完成一项其他工作。 &lt;br />到了周末，3 人顺利地完成了上述 5 项工作。 &lt;br />以下哪项中的任务不可能均由丁勇完成？ &lt;br />A．财务、管理 B．网络、人事 &lt;br />C．管理、人事 D．教育、管理&lt;/p>
&lt;p>&lt;a href="https://www.bilibili.com/video/BV12t4115735/?p=13&amp;amp;share_source=copy_web&amp;amp;vd_source=504045c18340a005fec8674ac78d7934&amp;amp;t=1168">练4&lt;/a>只有③推出丁人事→李财。并且题目为不可能由丁完成，说明有三个正确答案，优先考虑使用选项中有人事的。选B&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="日常结论">日常结论&lt;/h3>
&lt;ul>
&lt;li>特征：题干：类言语、无逻辑关联词。问题：由此可以推出/不能推出？&lt;/li>
&lt;li>解题：代入法&lt;/li>
&lt;li>&lt;a href="https://www.bilibili.com/video/BV12t4115735/?p=13&amp;amp;share_source=copy_web&amp;amp;vd_source=504045c18340a005fec8674ac78d7934&amp;amp;t=1580">思路&lt;/a>
&lt;ul>
&lt;li>不选：逻辑错误、无中生有、偷换概念&lt;/li>
&lt;li>慎选：比较关系、绝对词、程度、范围的扩大&lt;/li>
&lt;li>优选：可能性的词汇&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>据介绍，北半球人口相对密集，燃烧化石燃料等人类活动不断推高碳排放量，因此北半球大气中的二氧化碳浓度在 2013 年已达到 400PPM 这一标杆水平。相对来说，南半球人类活动较少，而南极洲更是人烟稀少，但即便如此，2017 年 6 月南极洲的二氧化碳浓度也达到了 400PPM 这一标杆值。 &lt;br />根据以上信息，下列推论正确的是（）。 &lt;br />A.人类活动对地球的影响已经深入到极地 &lt;br />B.二氧化碳浓度升高对南极洲地貌有深远影响 &lt;br />C.南极洲二氧化碳浓度不会再降到 400PPM 以下 &lt;br />D.北极的二氧化碳浓度在 4、5 年前就远超南极&lt;/p>
&lt;p>【例4】B地貌无中生有。C不会无中生有。D北极偷换概念，应该是北半球。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>铝既能溶于酸，又能溶于碱，是人体维持正常运转 所需的微量元素。实验表明，红烧肉在铝锅里存放一夜，铝在肉中的含量每公斤 可高达 120 毫克至 250 毫克。但人体吸收铝元素后很难再从体内排出，容易造成 早衰和老年痴呆症。&lt;br />由此我们可以得出： &lt;br />A．铝是人体的必需元素 &lt;br />B．老年痴呆症是由于过量摄入铝造成的&lt;br />C．红烧肉不能隔夜吃 &lt;br />D．铝在人体内的含量很容易超标&lt;/p>
&lt;p>【练3】 微量=必需。B范围扩大，容易造成变为造成。C在铝锅里放一夜。D很容易，程度太大，并且没说超标的量&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="逻辑论证">逻辑论证&lt;/h3>
&lt;ul>
&lt;li>论证的基础知识： 1.论点：观点、态度、结论 2.论据：证明观点正确的条件、原因、例子 3.论证：论点与论据之间的联系
&lt;ul>
&lt;li>找论点：
&lt;ul>
&lt;li>关键词：因此，所以，认为，由此推出，据此可知……&lt;/li>
&lt;li>首尾句原则&lt;/li>
&lt;li>结合提问方式（问啥找啥）找专家/某个人的观点&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>题型：加强削弱类&lt;/li>
&lt;/ul>
&lt;h4 id="加强类">加强类&lt;/h4>
&lt;ul>
&lt;li>常见提问方式： 如果以下各项为真，最能加强/支持/赞同/证明上述论断的是？ 以下哪项为真，是上述论断的前提/假设/必要条件 如果以下各项为真，最不能加强上述论断的是？&lt;/li>
&lt;li>解题方法
&lt;ul>
&lt;li>搭桥（力度最强）
&lt;ul>
&lt;li>题型特征： 1.论点与论据话题不一致 2.提问方式为前提、假设、必要条件时，优先考虑搭桥&lt;/li>
&lt;li>选项特征： 同时包含论点和论据中的关键词，并肯定论点和论据之间的关系&lt;/li>
&lt;li>解题思维： 找论点→找论据→对比选项&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>补充论据
&lt;ul>
&lt;li>提问方式为前提、假设、必要条件且无搭桥选项&lt;/li>
&lt;li>解题思维
&lt;ul>
&lt;li>必要条件：选项为论点成立的必要条件（没它不行）&lt;/li>
&lt;li>解释：说明论点成立的原因&lt;/li>
&lt;li>举例：证明论点成立的例子&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>搭桥&amp;gt;必要条件&amp;gt;解释&amp;gt;举例&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>扬子鳄是中国特有的一种鳄鱼，主要分布在长江中下游地区，它是古老的、现存数量非常稀少的爬行动物。在扬子鳄身上，至今还可以找到恐龙类爬行动物的许多特征，常被称为“活化石”。因此，扬子鳄对于人们研究古代爬行动物的兴衰以及研究古地质学和生物的进化，都有重要意义。&lt;br /> 以下哪项如果为真，是上述论证所需的前提？（） &lt;br />A.扬子鳄是世界上最珍稀的爬行动物之一 &lt;br />B.扬子鳄生活的年代和恐龙生活的年代大抵相当 &lt;br />C.现存的具有恐龙类爬行动物特征的动物已经为数不多 &lt;br />D.研究恐龙类爬行动物的特征是研究古代爬行动物兴衰的关键&lt;/p>
&lt;p>【搭桥·例2】论据：扬子鳄有恐龙类爬行动物特征，因此论点：研究古代爬行动物有意义。为什么恐龙特征对爬行动物有意义？搭桥。D特征和爬行动物有关系，联系上了。基本就是选项中找这两个关键词（特征/爬行）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>一个没有普通话一级甲等证书的人不可能成为一个主持人，因为主持人不能发音不标准。 &lt;br />上述论证还需基于以下哪一前提？ &lt;br />A．没有一级甲等证书的人都会发音不标准 &lt;br />B．发音不标准的主持人可能没有一级甲等证书 &lt;br />C．一个发音不标准的人有可能获得一级甲等证书 &lt;br />D．一个发音不标准的主持人不可能成为一个受人欢迎的主持人&lt;/p>
&lt;p>【搭桥·练5】论据：主持人发音标准，所以论点：主持人要证书。证书和发音标准的关系。秒A，BC削弱&lt;/p>
&lt;/li>
&lt;li>
&lt;p>开车斗气、胡乱变线、强行超车等“路怒症”是一种被 称为间歇性、暴发性障碍（IED）的心理疾病。有研究发现，IED 患者弓形虫检测呈阳性的比例是非 IED 组的两倍。研究者认为，弓形虫感染有可能是导致包括 “路怒症”在内的 IED 的罪魁祸首。 &lt;br />以下哪项如果为真，无法支持研究者的观点？（） &lt;br />A.感染了弓形虫的老鼠往往更大胆、更敢于冒险，也因此更容易被猫抓到 &lt;br />B.弓形虫使大脑中控制威胁反应的神经元受到过度刺激，易引发攻击行为 &lt;br />C.对弓形虫检测呈阳性的 IED 患者施以抗虫感染治疗之后，冲动行为减少 &lt;br />D.弓形虫是猫身上的一种原生动物寄生虫，但猫是比较温顺的动物&lt;/p>
&lt;p>【补充·例6】注意题目是无法，看见无类词，花圈。A举例；B原因解释，搭桥。C补充实验。D削弱&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在一项针对 216 名 6 到 12 月的婴儿进行测试中，研究人员教给婴儿新的手指木偶玩耍的三个本领，有一半的宝宝在学习之后的四个小时就睡了一大觉，但是另外的宝宝则没有睡觉或者只小憩了不到 30 分钟。研究显示平均说来，有充足睡眠的宝宝能记住 1.5 个本领，但是没有怎么睡觉的宝宝则一项本领都没有记住。可见，婴儿学习本领后保持充足睡眠有利于增强记忆。 &lt;br /> 下列哪项是上述论证最可能依赖的假设。 &lt;br />A．该研究结果在青少年群体中同样适用 &lt;br />B．充足睡眠有利于宝宝正常的身体发育 &lt;br />C．实验前两组宝宝的智力水平状况相当 &lt;br />D．有其他研究验证了这项结果可靠性&lt;/p>
&lt;p>【补充·练3】婴儿充足睡眠增强记忆。A青少年，无关。B发育，无关。C控制变量法，前提条件。D举例效果最弱。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>素数是指只含有两个因子的自然数(即只能被自身 和 1 整除)，孪生素数是指两个相差为 2 的素数。比如，3 和 5，17 和 19 等。所 谓的孪生素数猜想，是由希腊数学家欧几里得提出的，意思是存在着无穷对孪生 素数。该论题一直未得到证明。近期，美国一位华人讲师的最新研究表明，虽然 还无法证明存在无穷多个之差为 2 的素数对，但存在无数多个之差小于 7000 万 的素数对。有关方面认为，如果这个结果成立，那么将是数论发展的一项重大突破。 &lt;br />以下哪项如果为真，最能支持有关方面的观点： &lt;br />A.这位华人讲师长期从事数学领域的相关教学和科研工作 &lt;br />B.关于孪生素数猜想的证明需要一个漫长的、逐步推进的过程&lt;br />C.这是第一次有人正式证明存在无穷多组间距小于定值的素数对 &lt;br />D.7000 万这个数字很大，离孪生素数猜想给出的 2 还有很大距离&lt;/p>
&lt;p>【练14】A教学跟突破无关。BD削弱。C无穷变有限，重大突破。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="削弱类">削弱类&lt;/h4>
&lt;ul>
&lt;li>常见提问方式： 如果以下各项为真，最能质疑/反驳/削弱/反对上述论断的是？ 如果以下各项为真，最不能质疑上述论断的是？&lt;/li>
&lt;li>削弱之否定论点（力度最强&amp;amp;最常考）
&lt;ul>
&lt;li>选项特征：与论点表述的意思相反&lt;/li>
&lt;li>解题步骤： （1）找出论点 （2）想出与论点相反意思的表述 （3）寻找对应选项&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>削弱之拆桥
&lt;ul>
&lt;li>题型特征：
&lt;ul>
&lt;li>论点、论据话题不一致&lt;/li>
&lt;li>提问方式为“削弱论证”时，优先考虑拆桥&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>选项特征： 同时包含论点和论据中的关键词，并否定论点和论据之间的必然联系&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>削弱之否定论据
&lt;ul>
&lt;li>题型特征：
&lt;ul>
&lt;li>题干中出现支持方、反对方观点相反的情况，经常采用否定论据来削弱&lt;/li>
&lt;li>结论是预测（预测无法验证的历史或者未来）或者建议（典型提示词：建议、应该等）时，经常采用否定论据来削弱&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>选项特征：与论据表述的意思相反&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>因果论证的削弱
&lt;ul>
&lt;li>题型特征：论点中包含因果关系。
&lt;ul>
&lt;li>常见句式：……是……的原因；……导致……；……使得……；……有助 于……；……有效增加（减少）……。 削弱方式：&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>因果倒置削弱：因果互换削弱题目的因果关系。&lt;/li>
&lt;li>另有他因削弱：对现有因果不赞成也不反对，而是指出还存在另外一种原因， 也同样导致了相同的结果。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>研究员将六百多位老年痴呆症患者分为三个组，一组补充一定剂量的维生素 E，另一组接受药物治疗，第三组服用安慰剂。在接下来 两年多的时间里，与服用安慰剂的患者相比，服用维生素 E 的患者从事制订计划、做饭和购物等日常活动的能力下降较慢。服用药物的患者没有获得类似的临床效果。因而研究员认为，维生素 E 补充剂有望成为治愈老年痴呆症的特效药。 &lt;br />以下陈述如果为真，哪项最能质疑研究员的结论？（） &lt;br />A.维生素 E 为脂溶性，不易代谢，一次性大量服用会导致中毒&lt;br /> B.老年痴呆是不可逆性疾病，症状的发生只可能延缓而无法逆转&lt;br /> C.正常人体每日所需的维生素 E 可以从饮食中摄取，不必额外补充&lt;br /> D.现有的抗老年痴呆的药物中均未添加维生素 E&lt;/p>
&lt;p>【否论-例4】维E能治愈。B否定论点。D只是举例，并且并未提到治愈。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>随着气候变化，肥料和供水导致了极大的能源和环境成本，如何让作物更好地吸收营养和水就显得极其重要。因此不少人认为只要增加植物根毛的长度，就可以更有效地吸收水和养分，从而提高作物产量。 &lt;br />下列哪项如果为真，最能削弱上述结论？ &lt;br />A．实践证明，合理控制光照时间，并保证同一块田地间隔播种作物能极大地提高产量 &lt;br />B．根毛的寿命很短，仅能存活 2~3 周便自行脱落，由于更新很快，植物的根部总能保持一个数量相对稳定的根毛区 &lt;br />C．如果植株过于密集而养料不足，即使增加了根毛长度，也无法保证植物的营养供应 &lt;br />D．根毛的长度与植物生长激素密切相关，当植物生长激素分泌旺盛时，根毛也变长；而生长激素分泌减少时，根毛也逐渐萎缩&lt;/p>
&lt;p>【否论-练2】增加长度，就能吸收水和养分。C增加了长度，也无法保证营养供应，否定论点。A无关，B没有提到吸收，D无关，不要脑部。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>某网购平台发布了一份网购调研报告，分析亚洲女性的网购特点。分析显示，当代亚洲女性在网购服饰、化妆品方面的决定权为 88%， 在网购家居用品方面的决定权为 85%。研究者由此认为，那些喜爱网购的亚洲女性在家庭中拥有更大的控制权。 &lt;br />以下哪项如果为真，最能反驳上述结论？ &lt;br />A．喜爱网购的亚洲女性的网购支出只占其家庭消费支出的 25% &lt;br />B．亚洲女性中，习惯上网购物的人数只占女性总人数的 30%左右 &lt;br />C．亚洲女性在购买贵重商品时往往会与丈夫商量，共同决定 &lt;br />D．一些亚洲女性经济不独立，对家庭收入没有贡献&lt;/p>
&lt;p>【拆桥-练3】主语选A。网购支出大→控制权。A直接拆桥。B人数少跟控制权无关。CD没有说明喜爱购物的女性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>有研究表明，要成为男性至少需要拥有一条 Y 染色体。 3 亿年前，男性特有的 Y 染色体在产生之际含有 1438 个基因，但现在只剩下 45 个。按照这种速度，Y 染色体将在大约 1000 万年内消失殆尽。因此，随着 Y 染色体的消亡，人类也将走向消亡。&lt;br />如果以下各项为真，最不能质疑上述论证的是（）。 &lt;br />A.恒河猴 Y 染色体基因确实经历过早期高速的丧失过程，但在过去的 2500 万年内则未丢失任何一个基因 &lt;br />B.男性即使失去 Y 染色体也有可能继续生存下去，因为其他染色体有类似基因可以分担 Y 染色体的功能 &lt;br />C.人类进化过程中，可以找到单性繁殖或无性繁殖后代的方法，从而避免因基因缺失引发的繁殖风险 &lt;br />D.Y 染色体存在独特的回文结构，该结构具有自我修复功能，可以保持丢失基因的信息，实现基因再生&lt;/p>
&lt;p>【否据-例3】男性必须有Y，按照这种速度，Y消失，导致人类灭亡。BC否论，D否据。A类比推理最弱&lt;/p>
&lt;/li>
&lt;li>
&lt;p>数据资料表明：“不让一个孩子落后”法案实施后，四年级、八年级学生的英语阅读科目和数学科目平均得分确实明显提高了。因此， 得出结论：这一教育改革法案在美国各地中小学取得了惊人的成就。&lt;br /> 以下哪项如果为真，对上述论证的质疑力度最弱？（） &lt;br />A.十二年级学生的英语阅读科目平均得分在同一时期出现了明显下降 &lt;br />B.只关注英语阅读和数学成绩的变化，并把它作为评价教育改革成果的标志， 这是很片面的 &lt;br />C.改进教育体制确实很难，想要在这个带有极大惰性的庞大官僚体制上作一番改动，需要大量金钱、努力和时间 &lt;br />D.四年级、八年级学生的英语阅读科目和数学科目平均得分从 20 世纪 90 年代开始就在逐年按基本相同的比例提高，这种状况早在法案通过前就出现了&lt;/p>
&lt;p>【例4】无关项秒选C。A否据，B否据，D否论&lt;/p>
&lt;/li>
&lt;li>
&lt;p>某专家对已故诺贝尔经济学奖得主的寿命进行统计， 发现他们的平均寿命是 85 岁其中超过 90 岁的占多数，还有不少过百岁的，去世时年龄最小的也高达 74 岁。该专家由此认为，获得诺贝尔经济学奖能使人长寿。 &lt;br />以下哪项如果为真，最能削弱上述专家的观点？ &lt;br />A．诺贝尔经济学奖只颁给在世的学者，这一颁奖规则对已经长寿的学者极为有利 &lt;br />B．获得诺贝尔奖能带来功成名就的巨大身心愉悦，而愉悦的身心状态可延年益寿 &lt;br />C．宏观经济学之父凯恩斯年仅 63 岁就去世了，很遗憾他没有获得诺贝尔经济学奖 &lt;br />D．获得诺贝尔物理学奖的学者寿命也很长，但他们都没有获得过诺贝尔经济学奖&lt;/p>
&lt;p>【因果-例1】经济奖使人长寿。A在世才能得到经济奖，因果倒置削弱。CD无关。B加强。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>研究显示，约 200 万年前，人类开始使用石器处理食物，例如切肉和捣碎植物。与此同时，人类逐渐演化形成较小的牙齿和脸型， 以及更弱的咀嚼肌和咬力。因此研究者推测，工具的使用减弱了咀嚼的力量，从而导致人类脸型的变化。 &lt;br />以下哪项如果为真，最能削弱上述研究者的观点？ &lt;br />A．对与人类较为接近的灵长类动物进行研究，发现它们白天有一半时间用于咀嚼，它们的口腔肌肉非常发达、脸型也较大 &lt;br />B．200 万年前人类食物类型发生了变化，这加速了人类脸型的变化 &lt;br />C．在利用石器处理食物后，越来越多的食物经过了程度更高的处理，变得易于咀嚼 &lt;br />D．早期人类进化出较小的咀嚼结构，这一过程使其他变化成为可能，比如 大脑体积的增大&lt;/p>
&lt;p>【例2】工具的适用导致脸型变化。A咀嚼跟脸型有关，工具减弱咀嚼类比增强观点。B他因削弱。C没有提到脸型。D无关。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="真假推理">真假推理&lt;/h3>
&lt;ul>
&lt;li>题型特征：题干中的论述有真有假，且真假未知&lt;/li>
&lt;li>真假破案的解题突破口有两个逻辑关系，分别是矛盾关系和反对关系。
&lt;ol>
&lt;li>找突破口：先矛盾，再反对&lt;/li>
&lt;li>看其余：一真其余&lt;strong>全假&lt;/strong>，一假其余&lt;strong>全真&lt;/strong>&lt;/li>
&lt;li>判断突破口中两句话的真假（可选）。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>矛盾关系
&lt;ul>
&lt;li>特点：矛盾包含一真一假&lt;/li>
&lt;li>找矛盾的技巧：对象一致 （我没考一百分，全班所有人都考了一百分，不是矛盾，因为对象不一致）&lt;/li>
&lt;li>四组矛盾关系：
&lt;ul>
&lt;li>A 与-A&lt;/li>
&lt;li>A∩B 与-(A∩B) = -A 或-B
&lt;ul>
&lt;li>星期一和星期二我都去上班，矛盾后，不都去上班&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>A→B 与 A∩-B
&lt;ul>
&lt;li>如果他好，我就好，他好→我好，矛盾后，他好且我不好&lt;/li>
&lt;li>只有他好，我才好，我好→他好，矛盾后，我好且他不好&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>有的是与所有不是；有的不是与所有是
&lt;ul>
&lt;li>所有人都有钱，矛盾后，有的人有钱&lt;/li>
&lt;li>所有人都没钱，矛盾后，有的人有钱&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>注意区分矛盾和逆否，矛盾是对立面，逆否是等价面&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>反对关系
&lt;ul>
&lt;li>有的是 和 有的不是 （必有一真）
&lt;ul>
&lt;li>可以同真，不可同假&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>所有都是 和 所有都不是 （必有一假）
&lt;ul>
&lt;li>可以同假，不可同真&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>一般题目是只有一个为真/假，所以一个为真另一个必为假，然后利用假的矛盾关系&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>四位球迷在某球赛的晋级赛开始之前对几个队伍的赛况进行预测，他们比较关注其中的两支球队，分别作了如下预测： &lt;br />方某说：如果甲队不能晋级，那么乙队也不能晋级。 &lt;br />白某说：不管甲队能不能晋级，乙队都不能晋级。&lt;br /> 夏某说：乙队能晋级，但甲队不能晋级。 &lt;br />邓某说：我看这几支球队都不能晋级。 &lt;br />比赛结果证明，四位球迷中只有一位的预测是正确的。 &lt;br />根据上述情况，以下哪项一定为真？ &lt;br />A．白某预测是正确的 &lt;br />B．邓某预测是正确的 &lt;br />C．如果甲队能够晋级，那么方某的预测是正确的 &lt;br />D．如果甲队不能晋级，那么方某的预测是正确的&lt;/p>
&lt;p>【矛盾-例8】方：-甲→-乙 $\Leftrightarrow$ 乙→甲（矛盾乙且-甲）；白：-乙；夏：乙且-甲 （矛盾-甲→-乙）；邓：全否。方，夏矛盾，必一真一假，白邓全为假，则乙队晋级，有的队伍晋级。C&lt;/p>
&lt;/li>
&lt;li>
&lt;p>下面是某冬日我国北方某些城市的天气情况：&lt;br />（1） 有些城市有降雪；&lt;br />（2）有些城市没有降雪；&lt;br />（3）北京和邯郸没有降雪。 &lt;br />如果三个断定中只有一个为真，那么以下选项中哪个断定一定为真？（ ） &lt;br />A．北京有降雪，但邯郸没有 &lt;br />B．所有这些城市都有降雪 &lt;br />C．所有这些城市都没有降雪 &lt;br />D．以上各选项都不一定为真&lt;/p>
&lt;p>【反对-例1】12必有一真，3为假，北京或邯郸降雪→&lt;strong>1真→2假&lt;/strong>→都降雪&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="集合推理">集合推理&lt;/h2>
&lt;ul>
&lt;li>有的：有一个、有一部分、全部&lt;/li>
&lt;li>第一大误区：有的①是② 推不出 有的①不是②&lt;/li>
&lt;li>第二大误区：有的①是② 不能进行逆否&lt;/li>
&lt;li>&lt;strong>核心考点&lt;/strong>
&lt;ul>
&lt;li>有的①是② = 有的 ②是①&lt;/li>
&lt;li>所有①是② → 有的①是② = 有的②是①&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>有的 只能作为递推的起点
&lt;ul>
&lt;li>①→②，有的 ②→③ $\overset{×}{\rightarrow}$①→③&lt;/li>
&lt;li>有的①→②， ②→③ $\rightarrow$①→③&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>终于行测四大模块全部结束了，后天也考试了，不为自己为大家(实际上自己太菜了哈哈哈)，希望看到的人可以提提意见，如果好的话也可以转发。感谢您的观看，祝您考公顺利！！！&lt;/p></content><category scheme="https://keepjolly.com/posts/" term="posts" label="posts"/><category scheme="https://keepjolly.com/posts/learn/" term="learn" label="learn"/><category scheme="https://keepjolly.com/tags/civilservant/" term="CivilServant" label="CivilServant"/></entry><entry><title type="text">记录第一次团建</title><link rel="alternate" type="text/html" href="https://keepjolly.com/posts/life/team-building-1/"/><id>https://keepjolly.com/posts/life/team-building-1/</id><updated>2024-01-13T13:59:11+00:00</updated><published>2023-12-01T23:04:34+08:00</published><author><name>Rurouni</name><uri>https://keepjolly.com/</uri><email>1366475809@qq.com</email></author><rights>在保留本文作者及本文链接的前提下，非商业用途随意转载分享(我会高强度自搜的喔👊)。</rights><summary type="html">早上 早上坐车做了好久，从单位一直到山中乐园，看了一路的风景，感觉怎么南方的乡下（杭州……</summary><content type="html">&lt;h2 id="早上">早上&lt;/h2>
&lt;p>早上坐车做了好久，从单位一直到山中乐园，看了一路的风景，感觉怎么南方的乡下（杭州偏僻地方算乡下吗哈哈哈）房子都差不多呢。然后到达目的地啦。首先做了下小船，去看喀斯特地貌了，但是个人感觉没啥好看的⛰，里面甚至有用散光灯伪装萤火虫，笑死。然后拍了张必须要花钱才能看清的照片（小寸只能看见黑溜溜的👀）。到点盖章！然后做了按摩屁股的天梯（我有脚臭？好像是消化不良导致的屁股臭，偏偏以前和之后都没有的，尴尬啊），决不再景区消费，好贵的说。&lt;/p>
&lt;h2 id="中午下午">中午&amp;amp;下午&lt;/h2>
&lt;p>草草的吃了两个面包，好干啊。然后走了玻璃长廊，感觉没下一个玻璃圆廊吓人，我看一些女生都好怕哈哈哈，但是有个女生一马当先，一直走到终点，而我闲庭信步的走过去，在终点拍了俯瞰下面的照片（好喜欢全景照，适合拍照白痴），到点盖章！又是驿站，不吃！，直奔空中秋千，哇塞第一下真的好吓人，还好叫的不是特别神经哈哈哈，后两下也有点后劲，后面就是看风景啦，然后就是玻璃圆廊了，这个吓人多了，看下面根本不敢，甚至在上面拍了张集体照（后来居然没发出来）。然后就是开卡丁车🏎了，出门就被撞停了笑死，然后秋名山车神附体，又被撞停，然后安稳达到终点嘿嘿。坐了木马上山🎠，好幼稚哈哈哈，然后就是水上漂流了，临时跟一个女生组队，我想做前面啊，然后过了几段激流，到了终点，发现他们坐前面的都被水打脸了（还好没有坐前面）。对了，盖章盖章。&lt;/p>
&lt;p>开始休息，看他们森林冒险，可惜没去啊。听他们说经济形势不行啊，it好难。休息完毕，开挖掘机，不，看他们开挖掘机，上，挖头朝下，左挖头开挖，右拉起，下放土。我会了！集章换奖品，拿到就想扔了，笑死。又是集体照，正好就我没拍进去，可恶啊（好吧，最好别拍进去，我不上镜哈哈哈）。出发去吃饭，又是领头羊，还好我不是路痴，路上路过江，拍照！吭哧吭哧吃饭，都是辣的，不吃，上车，到晚上了，睡觉。到单位了，骑车走人！&lt;/p>
&lt;h2 id="晚上">晚上&lt;/h2>
&lt;p>看电影，聊天。&lt;/p>
&lt;p>一天结束了，团建一次就少一次啊。可惜上个没去，但确实没时间，还全是互动，社恐本人哪会互动啊。&lt;/p></content><category scheme="https://keepjolly.com/posts/" term="posts" label="posts"/><category scheme="https://keepjolly.com/posts/life/" term="life" label="life"/><category scheme="https://keepjolly.com/tags/life/" term="Life" label="Life"/></entry><entry><title type="text">公务员行测--言语理解下</title><link rel="alternate" type="text/html" href="https://keepjolly.com/posts/learn/speech-understanding-2/"/><id>https://keepjolly.com/posts/learn/speech-understanding-2/</id><updated>2024-01-13T13:59:11+00:00</updated><published>2023-11-26T00:30:16+08:00</published><author><name>Rurouni</name><uri>https://keepjolly.com/</uri><email>1366475809@qq.com</email></author><rights>在保留本文作者及本文链接的前提下，非商业用途随意转载分享(我会高强度自搜的喔👊)。</rights><summary type="html">类中心理解 (语句排序，语句填入，下文推断，细节判断，关键词提取） 语句排序 做题思路： 先……</summary><content type="html">&lt;h2 id="类中心理解">类中心理解&lt;/h2>
&lt;p>(语句排序，语句填入，下文推断，细节判断，关键词提取）&lt;/p>
&lt;h3 id="语句排序">语句排序&lt;/h3>
&lt;ul>
&lt;li>做题思路： 先排除（首句和不可能独立可混合使用，不分先后），最后验证&lt;/li>
&lt;li>22布局：选项首个为aabb型，判断是否符合首个以排除50%
&lt;ol>
&lt;li>&lt;strong>确定首句&lt;/strong>
&lt;ul>
&lt;li>下定义、背景知识引入常为首句的特征词、以及两个首句之间有内部的逻辑关系，常优先考虑其为首句&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>43布局：选项首个都不相同，或者就两个相同，abcd、aabc型
&lt;ul>
&lt;li>22布局、43布局时，也可以直接去文段寻找“不可能独立出现的词语”，即一定是处于脉络的铺垫引出部分。可以一眼锁定或者利用选项
&lt;ul>
&lt;li>转折之后的部分：但、但是、而、而是、不料等&lt;/li>
&lt;li>并列之后的部分：也、并且、或、还、另外、另一方面等&lt;/li>
&lt;li>结论性的部分：所以、显然、于是、以至于、以便、充分证明等&lt;/li>
&lt;li>举例论证部分：比如、如、例如等&lt;/li>
&lt;li>代指词：这个、这些、它们、其、该等&lt;/li>
&lt;li>优先看&lt;strong>并列和代指&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>题目：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>①另一位加拿大科学家发现，植物缺水时发出的响声大小和缺水程度是有相关性的，缺水越严重，发出的响声越大 &lt;br />②倘若是因为植物缺水而有意发出这种声音的话，这种具有意识性的表现实在令人惊叹&lt;br />③通过进一步的测量和收集数据，他发现声音的源头在植物体内的输水管上，植物在缺水的情况下会发生微小的震动 &lt;br />④20 世纪 70 年代，一位澳大利亚科学家研究了植物对气候环境的反应，发现在严重干旱时期，植物会发出一些奇特的声音 &lt;br />⑤但是，当时还无法对这种现象进行合理的解释 &lt;br />将以上 5 个句子重新排列，语序正确的是（ ）。 &lt;br />A.②③⑤④① &lt;br />B.②①④③⑤ &lt;br />C.④①③②⑤&lt;br />D.④③①⑤②&lt;/p>
&lt;p>22布局，看②④，肯定④，不要看到另一位就觉得是并列，④③是问题+结果的脉络。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>①这就会让人产生对阶层问题的焦虑感，因为教育包含财富和知识的传递问题，它也更能反映这种焦虑 &lt;br />②他们在保住自身阶层的同时，担心孩子不能继承自己的“能力”，不能迈向更高阶层，反而滑落到更低阶层&lt;br />③一方面，一些人渴望跨越自身阶层限制，实现人生“逆袭” &lt;br />④在社会转型期，阶层分化加速，伴随而来的往往是经济增速放缓和阶层流动趋势下降的问题，由此产生许多人对阶层问题的幻想 &lt;br />⑤另一方面，一些人恐惧于从自身阶层跌落，尤其是刚刚迈入中等收入群体的一批人&lt;br />⑥其中最简单的办法还是考取北清这一级别的名校，进而跻身更高的知识层次和经济层次&lt;br />将上面的句子组成语意连贯的语段，排序最恰当的一项是（ ）。&lt;br />A.④③⑤⑥②① &lt;br />B.②④③⑥⑤① &lt;br />C.④③⑥⑤②①&lt;br />D.⑥④③⑤②①&lt;/p>
&lt;p>43布局，优先看这、其中。①的前面必定是⑤，因为害怕跌落。⑥的前面必定③。如果看的是其中，排除AD后，看首个是否能总领。选C。③⑤不是并列。选完后，有时间可以按顺序读是否通顺。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="语句填入">语句填入&lt;/h3>
&lt;p>讲的一般，可以看看其他的&lt;/p>
&lt;ol>
&lt;li>横线在开头
&lt;ol>
&lt;li>总结全文（中心理解，首先考虑）&lt;/li>
&lt;li>背景引入&lt;/li>
&lt;li>衔接后文&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>横线在中间
&lt;ul>
&lt;li>承上启下&lt;/li>
&lt;li>承上或启下&lt;/li>
&lt;li>上下文的粘合剂&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>横线在结尾
&lt;ul>
&lt;li>总结全文（中心理解）&lt;/li>
&lt;li>衔接上文（导致的最终结果）&lt;/li>
&lt;li>针对问题，提出对策&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>题目：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>____。据了解，在 M 国，每 3 个上网的老年人中就有1 个有社交网络的账号。两年间，65 岁以上的社交网络用户增长了 150%。越来越多的老年人开始使用社交网络寻找老朋友，结识新朋友。一些 M 国老年人还会访问视频或者音频取代文字的社交网络，分享抗衰老心得。另外，一些社交网站除了为老年人提供线上交流服务外，还会定期组织同城活动，提供交通、房屋维修等服务。 &lt;br />下列最适合填入横线处的是（ ）。 &lt;br />A.社交网络为老年人的生活打开了一扇窗户 &lt;br />B.社交网络在人们日常生活中应用越来越广&lt;br />C.社交网络使不少老年人越来越热衷于交友 &lt;br />D.社交网络让老年人更便捷地享受各种服务&lt;/p>
&lt;p>观点：老年人通过社交网络找朋友、分享新的、组织服务。CAB型，AB太长，选项肯定分别放入增加干扰，如CD。C没有体现老年人，即主体。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>____，最能代表一个时代的风貌，最能引领一个时代的风气。“文变染乎世情，兴废系乎时序。”在欧洲文艺复兴运动中，但丁、彼特拉克、薄伽丘、达·芬奇、拉斐尔、米开朗琪罗、蒙田、塞万提斯、莎士比亚等文艺巨人，发出了新时代的啼声，开启了人们的心灵，在谈到文艺复兴运动时，恩格斯说，这“是一个需要巨人而且产生了巨人——在思维能力、热情和性格方面，在多才多艺和学识渊博方面的巨人的时代”。在我国发展史上，包括文艺在内的文化发展同样与中华民族发展紧紧联系在一起。先秦时期，我国出现了百家争鸣的兴盛局面，开创了我国古代文化的一个鼎盛期，20 世纪初，在五四新文化运动中，发端于文艺领域的创新风潮对社会变革产生了重大影响，成为全民族思想解放运动的重要引擎。&lt;br />填入画横线部分最恰当的一项是： &lt;br />A.文艺是铸造灵魂的工程 &lt;br />B.文化是民族生存和发展的重要力量&lt;br />C.文艺是时代前进的号角 &lt;br />D.文艺创新是与时代脉搏同频共振的&lt;/p>
&lt;p>&lt;a href="http://www.xinhuanet.com/politics/2015-10/14/c_1116825558.htm">原文&lt;/a>，时代的xx，又强调文艺，选C，D是同等地位了。B只是我国的情况。感觉语句填入得看另一个老师。注意是逗号需要粘合后文。而句号是引领全文&lt;/p>
&lt;/li>
&lt;li>
&lt;p>____。新中国成立以来，很多画家借用西方的一些画法创作山水画，大多不太成功，也很难得到国人的认可。在这方面较为成功的是李可染和赖少其。他们都有深厚的传统文化功底，年轻时向传统大家学习，精研书法，长期写生。在打牢传统的各种基础后，李可染将光引入艺术表现，尤善用积墨画逆光；赖少其学习西方印象派等画法，借鉴西洋画的着色方式，和传统融合得很好。所以，他们笔下的祖国河山仍然体现出雄浑厚重、大气磅礴的中国精神。 &lt;br />填人画横线部分最恰当的一项是：&lt;br /> A.中西融合是二十世纪中国画面对的世纪课题&lt;br /> B.中国画具有独特的文化特质和内在发展逻辑&lt;br /> C.中国画家借鉴外来艺术时需有良好的传统功底 &lt;br />D.借鉴西洋画艺术手法取得成功的中国画家很少&lt;/p>
&lt;p>A即指问题，又提到中西融合。C对策放开头不太行吧。另外在打牢基础&lt;strong>后&lt;/strong>，引入艺术表现；融合传统。所以他们笔下的xxx可以体现顺承出融合重要。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>随着我国科技对经济社会发展贡献率的增大，以及科技介入生活程度的加深，普通人与科技的关系也变得更加密切。科普走进生活，越来越成为人们的普遍期待。而这又对科普创新提出了更高的要求。科普创新当然首先是要及时更新科普的理念和内容，把日新月异的科技发展成果通俗易懂地告诉民众。同时，它也意味着科普形式和手段的创新。增添文艺的元素，则是其题中应有之义，____。老一辈科学工作者十分善于借用文学艺术的力量。例如，当我们翻阅竺可桢先生《说飓风》《说云》等科普文章时，就会被其准确而又生动的文字所折服。&lt;br />填入画横部分最恰当的一项是： &lt;br />A.人们对科普作品文艺性的期，越来越高 &lt;br />B.文学艺术是推动科普创新的重要驱动力&lt;br />C.事实上，科普本身就具有文学性 &lt;br />D.如何兼顾科普内容和形式的创新是当务之急&lt;/p>
&lt;p>前文增添（原先没有），后文借用文学（借）。缺少拥有的阶段，选C，科普有文学性。BD读起来不通顺啊，还是看语感。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>浪漫的古人，常借助一些动植物来表达爱情，常见的有鸳鸯、凤凰、大雁、红豆、梧桐等。为什么梧桐会成为爱情的象征呢？可能原因有二，一是梧桐雌雄异株，其中“梧”为雄株，“桐”为雌株，因此古人看见梧桐树，便联想到比翼双飞的爱情。另外一个原因，梧桐树高大茂密，常引来一些鸟儿共筑爱巢，____。&lt;/p>
&lt;p>是逗号，应该顺承上文（树鸟），而不是总结全文。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>宝石颜色有三个影响要素，即光源、宝石和观察者。不同的光源具有不同的光谱能量分布，因而照射到宝石上会使宝石呈现出不同的颜色；宝石由于自身内部的致色离子对光源光波的选择性吸收、反射、透射而呈现出不同的颜色；对于观察者而言，虽然人眼具有对可见光的灵敏分辨力，但对具体波长可见光的感知是因人而异的。也就是说，对同一宝石品种与观察者来说，____。 &lt;br />填入画横线部分最恰当的一句是（ ）。 &lt;br />A.宝石颜色会随照明光源的不同而发生改变 &lt;br />B.标准光源的选定对宝石颜色评价尤为关键&lt;br />C.提高观察者对可见光的灵敏分辨力十分必要 &lt;br />D.选择透光性好的宝石能获得更高的市场利润&lt;/p>
&lt;p>CAB结构，CD干扰选项。A其实有点废话，因为前文已经提到了。而B可以很好的顺承：在同一条件下，选择好光源。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="下文推断">下文推断&lt;/h3>
&lt;ul>
&lt;li>做题策略：全文阅读，明白&lt;strong>大致&lt;/strong>讲什么，不可直接锁定尾句，如选不出来，可以选项进行稍微造句，带回原文看看是否顺承。&lt;/li>
&lt;/ul>
&lt;h4 id="尾句引出新主体">尾句引出新主体&lt;/h4>
&lt;ul>
&lt;li>当尾句出现前文从来没有论述过的主体，抓住它，后文大概率是围绕其展开的。本质仍然是脉络的铺垫引出
&lt;ol>
&lt;li>
&lt;p>2021 年 4 月 8 日，国家发展改革委印发《2021 年新型城镇化和城乡融合发展重点任务》，落实适用、经济、绿色、美观的新时期建筑方针，严格限制建设500 米以上超高层建筑，严禁建设“丑陋建筑”。&lt;/p>
&lt;p>建筑→丑陋建筑（新主体），并且应先介绍再展开再意义的脉络。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h4 id="话题思维">话题思维&lt;/h4>
&lt;ul>
&lt;li>话题思维是下文推断的核心思维，即你原本的话题是否讲完了？你选择这个选项是否换话题了？&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>注重逻辑性和时间性&lt;/p>
&lt;ul>
&lt;li>按照事物的事件发生顺序：本话题→原因，主体展开，意义危害，对策。之后再换话题 (接连引出）&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>现在生活条件越来越好，除了家里常备的油盐酱醋，蚝油也是一款家家必备的调料品之一，蚝油顾名思义是以鲜蚝为原料，经过煮熟取汁浓缩，加上辅料精制而成，色泽呈红褐色，形态呈半流质状，黏稠度比较适中，相比于酱油来说，营养价值就更高一些，鲜味也就更加浓郁。平时在家做菜时放一点蚝油，不但可以起到增香、提鲜的作用，还能增加菜品的色泽。由于蚝油可以作为日常提鲜、增鲜的主要调料，因此很多人把蚝油拿来代替生抽使用，不管做什么菜都会用上蚝油。但蚝油无论是制作工艺还是原材料，都和生抽的大为不同，使用方法也是有较大的区别。如果随便放蚝油，不仅起不到提鲜的效果，甚至会影响身体健康。&lt;/p>
&lt;p>末尾提出耗油的危害，后文应该优先衔接对策，其次是为什么出现这个危害。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>多对自己提问&lt;/p>
&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>自问自答，猜测后文会是什么内容。
&lt;ol>
&lt;li>
&lt;p>葡聚糖是现在人气极高，食品科学和工业界很看好的一种可溶性纤维。某些葡聚糖也似乎对于增强免疫力更有效果——但是任何的膳食纤维都会对健康大有裨益。与其花大钱去买“特别的”“增强免疫力”的纤维，多吃一些经济实惠的富含膳食纤维的食物是不是更划算?&lt;/p>
&lt;p>主体是膳食纤维食物。因为膳食纤维会让人类生活更好，有点生硬，并且是其意义。（哪些食物呢？）膳食纤维有蔬菜水果，感觉顺承通顺，对主体展开。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>食品行业是关系人民群众切身需求和经济社会和谐稳定的民生行业。但目前来看，我国食品供给体系总体呈现出中低端产品过剩、中高端和个性化产品供给严重不足的问题，消费者对国外产品的依赖程度越来越高。特别在当前速度换挡、结构调整、动力转换的经济新常态下，深入推进食品行业供给侧改革，是实现食品行业健康长远发展的必然选择。食品标准既是国家食品安全治理体系中的重要组成部分，又是引导食品生产质量的主要风向标，因此，深化食品行业供给侧结构性改革的关键在于构建一套先进的食品行业标准。&lt;/p>
&lt;p>引出新主体食品行业标准。那么应该如何构建这个标准呢？先看重点关注的问题，再解决这些问题，从国外案例吸取经验。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h4 id="宏观具体展开难题">宏观具体展开（难题）&lt;/h4>
&lt;ul>
&lt;li>很多同学做下文推断题有一种误区，那就是上文论述过的东西下文就一定不能论述了，其实这是一种错误的思维，它可以进行宏观具体的展开。&lt;/li>
&lt;li>宏观具体展开的难题， 往往本质上还是你的理解能力，读题的时候就要感觉出来作者写得很宏观，宽泛。看前句甚至前文来推断主要内容。&lt;/li>
&lt;li>个人建议放弃，又难又浪费时间，或者从选项反推造句看看合不合适。&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>医学摄影是利用普通或特殊摄影成像设备，将被摄人体生命活动影像记录于感光材料或电子元件，它是用于医学科学的摄影技术，是科技的重要分支，也是摄影技术与医学科学交融的产物。随着科学技术的发展、医疗设备的进步，摄影技术在医学科学领域的应用日益广泛，医学科学进入了读图时代。医学摄影可以纵向延伸人们的视线，让你看到人体生命活动的微观世界；它又能横向拓宽人们的视野，让你看到平时看不到的生命活动影像。&lt;br />文章接下来最有可能介绍的是（ ）。 &lt;br />A.人体生命活动的微观世界 &lt;br />B.摄影技术在医学中的应用&lt;br />C.读图时代对摄影技术的要求&lt;br /> D.摄影技术在非医学领域的优势&lt;/p>
&lt;p>观点：医学摄影很重要。后文应该也是紧扣医学摄影，选B；C的读图时代是因为摄影而引出来，只是附带品（个人理解，宏观具体展开不好理解）。 &lt;a href="https://epaper.gmw.cn/gmrb/html/2013-03/26/nw.D110000gmrb_20130326_1-12.htm">原文&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="出题人的小心思-先礼后兵">出题人的小心思， 先礼后兵&lt;/h4>
&lt;ul>
&lt;li>出题人经常把一个文段里面两个联系紧密的内容给你从中间剪开，只保留一半，此时要把另一半补齐，形成一套完整的行文脉络&lt;/li>
&lt;li>出题人常见的小心思
&lt;ol>
&lt;li>总分文段：开头告诉你了总+分1+分2，后文只提及分1，则后文会有分2以形成完整的行文脉络。&lt;/li>
&lt;li>古今时间对比文段：文段告诉你了过去怎样（常是有xx问题），则后文会叙述现在怎么样。（或者现在有问题，将来怎么样）&lt;/li>
&lt;li>新旧事物对比文段：文段告诉你旧的事物是什么，则后文会叙述新的差异性事物是什么。&lt;/li>
&lt;li>说话说一半，需要提升理解能力，灵活理解。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>迄今为止，在地面实验中，量子密钥分发的点对点距离可达500 千米星级，而量子隐形传态可达 100 千米，那么如何在此基础上继续增加量子通信的距离呢？一个阶段性的解决方案是可信中继传输，我国建设的光纤总长超过 2000 千米的“京沪干线”是采用了这一方案，在可信中继方案中，需要人为保障中继站点的安全，而中继之间的线路则是安全的。这比传统通信手段中整条线路处处都是面临着信息泄露的风险而言，大幅提高了安全性。&lt;/p>
&lt;p>一个阶段性方案→一个长远的方案&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="最不可能讲述">最不可能讲述&lt;/h4>
&lt;ul>
&lt;li>当文段问你以下最不可能论述的是哪个选项时， 常选上文已经完整具体论述过的或者选项本身离谱的，也可以排除可能会论述的&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>联想到当今跨文化接触中的问题，我们可以一如既往地视利玛窦为一个先驱，他使两个文明的沟通成为可能，他使用的工具是把理解中国文化视为己任（首先是掌握语言），努力在中国寻找和西方共通的思想和机制。以后几代的西方人，从传教士、外交家到商人，告别了利玛窦的信念，致力于寻找中西之间的差异，而中国也开始更多地强调中国文化的独特性。作者接下来最不可能讲述的是：（ ） A.利玛窦是如何寻找中西方共通的思想和机制的 B.中国相关学者是如何确定中国文化的独特性的 C.我们如何看待利玛窦的共通性和其他人的差异性 D.利玛窦之后的西方人是如何寻找中西之间差异的&lt;/p>
&lt;p>尾句已经说到差异性，不可能又掉头再将共通。并且其他选项都是讲差异。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="关键词填入">关键词填入&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>题型：文段是完整文段，但是问你以下哪些是文段的关键词&lt;/p>
&lt;/li>
&lt;li>
&lt;p>这种题型正确率往往&lt;strong>极低&lt;/strong> ，个人建议放弃难题&lt;/p>
&lt;/li>
&lt;li>
&lt;p>关键词提取的秒杀技巧，就是把它当成中心理解题来做，提取观点，从观点选关键字。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>实用技巧：&lt;/p>
&lt;ol>
&lt;li>观点锁定&lt;/li>
&lt;li>不排除不确定的，排除一定不能选的&lt;/li>
&lt;li>同等地位排除（以人为本）&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>根据新的刑事证据规则，鉴定检材的真实性和同一性已经成为鉴定意见转化为定案根据的前提条件。这显然是我国刑事证据制度发生的重大变化。透过这一变化，我们可以发现司法改革的决策者们已经具有了一种新的理论认识：实物证据鉴真是司法鉴定程序启动的前提和基础；未经鉴真过程，任何专业人士对实物证据所作的“司法鉴定意见”都将是没有法律意义的；实物证据作为一种“送检材料”，在其真实性和同一性存在合理疑问的情况下，鉴定意见将不具有作为定案根据的资格。 &lt;br />这段文字中提取的关键词最恰当的是 &lt;br />A.刑事证据 实物证据鉴真 定案根据 &lt;br />B.司法改革 司法鉴定意见 定案根据&lt;br />C.鉴定检材 刑事证据制度 司法改革&lt;br /> D.证据制度 司法鉴定程序 送检材料&lt;/p>
&lt;p>&lt;a href="https://m.sh.huatu.com/2023/0414/1264040.html">文段&lt;/a>首先提出了新的刑事证据规则的内容是“鉴定检材的真实性和统一性”是“定案根据”的“前提条件”，接着根据“重大变化”和“这一变化”都可以得出后文的内容都是对第一句的解释说明，因此可以确定重点句就是第一句，而第一句中我们可以提取的关键词有“刑事证据规则”、“鉴定检材的真实性和统一性”和“定案根据”，对比选项，发现只有A选项提到了重点句中的其中两个关键词，根据话题一致这时就可以确定正确答案是A选项了。再来验证“鉴定检材的真实性和统一性”是否是“实物证据鉴真”的同义替换。后文说到了“实物证据鉴真”是“司法程序启动”的前提，对应第一句所说的前提，再往后看，“实物证据作为一种“送检材料”，即“检材”，而“鉴真”就是“鉴定真实性和同一性”，所以通过这两个对比可以确认“鉴定检材的真实性和统一性”就是“实物证据鉴真”的同义替换。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>农村金融需求是否满足，对农村发展的进程有极大影响。全面疏解农村地区信贷供给，是我国推进农业农村优先发展的重要一环。要不断完善金融支农的激励约束机制，加快农村金融回归“三农”本源的进程，促进金融资源向农业农村流动，以打通农村金融供需“梗阻”。持续推进农村金融供给侧结构性改革，增强农村金融服务农村实体经济的能力。同时，大力发展农村普惠金融，鼓励各金融机构为农业农村优先发展提供多层次、广覆盖、低成本、可持续的金融服务。 &lt;br />这段文字中提取的关键词最恰当的是： &lt;br />A.农村金融 农村发展 金融支农 &lt;br />B.农村金融 金融机构 金融服务&lt;br />C.农村金融 金融资源 农业农村 &lt;br />D.农村金融 普惠金融 服务农村&lt;/p>
&lt;p>我猜的：全篇强调农村金融，以及金融对农村发展的影响，以及金融支持农村的措施。上帝视角：A都是动词。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>精准扶贫不能仅仅专注个别事实，埋头解决个别问题，而不知道把个别贫困或特殊贫困同经济社会发展的宏观背景联系起来。应当明确地认识到，虽然各种特殊贫困都有特殊的因素，但特殊贫困也是在当下信息社会背景下存在的。信息化和网络化中蕴含了十分丰富的资源和能量，应当大力扶持贫困人口或贫困群体尽快了解和适应信息化与网络化的新形势，通过技术培训和典型示范，把远离信息化和网络化的贫困人口引入这个历史进程之中。&lt;/p>
&lt;p>观点：精准扶贫如何做；认识到特殊贫困在信息社会下存在；应扶持xxx适应信息化，通过技术培训和典型示范。信息社会优于特殊贫困，因为有前者才有后者。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>树木年轮是气候学研究里最重要的代用指标，其定年方法准确可靠，气候敏感性与分辨率较高，被国际气候学研究广泛应用。干旱区与半干旱区是树木年轮研究工作的重点区域，我国在阿勒泰区域已经开展了大量的树木年轮研究工作，不过采样样本较少，气象数据年份较短，数据处理的精度存在问题，因此有必要开展新的树木年轮采样工作。随着全球气候变暖，阿勒泰区域的气候条件变化深刻，研究西伯利亚落叶松在气候变化下的生长情况，对于研究西利亚落叶松在应对全球变暖背景下如何发展和变化具有重要意义，对森林生长环境保护具有重要的借鉴和指导作用。&lt;/p>
&lt;p>首局的限定相对来说没那么重要，需要从选项反窥首句。文段主要引出阿勒泰区域的情况。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>有学者认为，巫觋的地位在夏朝已经急剧下降。不过，巫觋在官方和民间的各种祭祀中仍然发挥作用，其参与的名称各异的前戏剧活动，一直延续到今天。现在我们在江西、贵州等地看到的“傩戏”或“地戏”，其将鬼神祭祀与戏剧融为一体的仪式，就多少包含了远古仪式的遗存。诚然，国家在每年春夏秋冬和各节令大典，及遇有战争之类重大事件时，还是会按例举行严肃的祭祀仪礼，但这些仪礼的效用与功能，早就发生了巨大变化。苏轼认为早在夏商周三代，各种祭祀性活动，就已包含非常明显的游戏或戏剧的因素，而祭祀神灵、祖先这一原初动机，反渐渐演变为依附性的功能。 &lt;br />这段文字所在的文章，论述主题最可能是：（ ）。 &lt;br />A.巫术 B.祭祀 C.戏剧 D.礼仪&lt;/p>
&lt;p>观点：（仪礼的）效用发生变化，祭祀转换为戏剧。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="细节判断">细节判断&lt;/h3>
&lt;h4 id="常见错误">常见错误&lt;/h4>
&lt;ul>
&lt;li>细节判断中，找正确的选项不难，难的是如何判断一个选项是否是错误的。需要注意的是，一定不可以本末倒置，做题的时候不是去思考它属于哪种错误，真真切切感受它有错就可以。&lt;/li>
&lt;li>做题的时候，先读文段还是先读选烦没有绝对的说法，具体题目具体分析&lt;/li>
&lt;li>错误类型：偷换时态、偷换概念、偷换范围、偷换逻辑、强加对比、绝对化、语义相悖、无中生有&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>偷换时态
&lt;ul>
&lt;li>过去时、现在时、将来时的替换
&lt;ul>
&lt;li>过去时态：已经，已，曾，了，过...&lt;/li>
&lt;li>现在时态：正，正在，在...中，现，现在...&lt;/li>
&lt;li>将来时态：将，要，不久，很快...&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>中国妇女发展基金会&lt;strong>将&lt;/strong>委托专业金融机构对中国女足发展基金进行管理和运作，其收益部分用于资助中国女子足球队改善生活和训练条件，开展交流合作，培养选拔后备力量。 &lt;br />D.中国女足发展基金，已确定了管理机制和运作规则&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>偷换概念
&lt;ul>
&lt;li>文段提到相关概念，但是对所提到的主客体及其动作、状态等相关要素进行替换&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>一战结束以后，中国海外移民掀起第三个高潮，其主要流向仍是东南亚，直接动力是东南亚的经济繁荣。20 世纪初以来，西方工业革命所带动的新兴产业的发展，陆续波及其东南亚的殖民地。东南亚经济发展刺激了对劳动力的需求的增长，廉价劳动力从中国南方不断&lt;strong>涌入东南亚&lt;/strong>。&lt;br />B.华人廉价劳工移民东南亚主要从事工业革命以来的新兴产业&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>偷换范围
&lt;ul>
&lt;li>要确保选项和原文讨论的是同一件事，不能缩小、扩大、更换话题&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>5G 时代的到来，标志着中国移动通信技术跃升至全球领先地位。这对&lt;strong>中国网络文化&lt;/strong>抓住中国技术领先契机、“引领全球文化”具有划时代的历史意义。5G 时代是智能终端应用更为广泛、智能思维极尽挥洒、创意创新充分涌现的好时机，“智能制造”“智能服务”“智能产业”“智能文化”“无人文化”等无处不在。&lt;br />B.5G 时代中国引领全球文化&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>偷换逻辑
&lt;ul>
&lt;li>偷换因果关系、前提关系、并列关系、转折关系等逻辑关系&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>生长在水中或水边的动植物的遗体是最易被保存下来的，因为保存动植物遗体的必要条件是快速掩埋，而在淤泥不断淤积的海洋、河流乃至湖泊中，动植物的遗体以及其他东西能够被快速掩埋。 &lt;br />B.只有生长在水中或水边的动植物的遗体才能被保存下来&lt;br />D.只要被快速掩埋，动植物遗体就能被保存&lt;/p>
&lt;p>D保存遗体必须快速掩埋，&lt;a href="https://wx.huatu.com/beikao/20161116/184838.html">倒置&lt;/a>了。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>强加对比
&lt;ul>
&lt;li>文段并没有进行主体、程度的对比，但是选项添加了对比&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>一项新研究发现，低温能通过将所谓的“坏”脂肪转化为“好”脂肪帮助人体燃烧卡路里。这一理论基于两种脂肪的不同特性。我们都再熟悉不过的讨厌的白色脂肪会吸收额外的卡路里并将它们储存在肚子、腰间和大腿中。但成年人还有少量的另一种“健康脂肪”，这种褐色脂肪专门燃烧卡路里同时产生热量。婴儿有&lt;strong>大量褐色脂肪&lt;/strong>来保暖，褐色脂肪多的成年人也更苗条。&lt;br />D.婴儿体内的褐色脂肪更多&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>绝对化
&lt;ul>
&lt;li>绝对化指个体认为某一事物必定会发生或一定不会发生等程度过重的错误&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>当众羞辱学生，以冷酷的惩罚性体验“培养”了学生的自卑，仇恨甚至社会攻击倾向，而&lt;strong>侵害了自尊心，信任能力和集体归属感&lt;/strong>。一次当众羞辱就是对人的尊严的一次践踏，反复的羞辱体验则将导致人格尊严的丧失。而人类社会最重要的价值——爱，道德，公民品格与社会凝聚力——都有赖于人对自我，对他人的尊严的确认与珍视。&lt;br />C.学生有了自卑，仇恨甚至社会攻击倾向，就会走向犯罪&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>语义相悖
&lt;ul>
&lt;li>指完全错误的表达，和文段表达的意思相悖&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>比目鱼的眼睛为什么会长到同一边去呢？有人认为，比目鱼眼睛的移动是由&lt;strong>头骨变形&lt;/strong>造成的，但比目鱼的额骨位于眼睛的上方，与眼睛没有直接接触。有学者推测，比目鱼眼睛的移动是由于眼睛下方有限区域内分裂的细胞之间空间拥挤，驱使其上方的眼睛向上移动。最新研究通过在比目鱼移动眼下方区域注射细胞分裂抑制剂，培养出了眼睛不移动、两眼保持对称的比目鱼稚鱼，并发现其左右额骨仍然保持对称。而且发现比目鱼眼睛哪一方分裂细胞数明显多于上方区域，则那一方的眼睛会移动，如鲆类是右眼，鲽类则是左眼。&lt;br />B.比目鱼额骨的扭转不仅是眼睛向上移动的结果，而且会影响比目鱼眼睛的移动&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>无中生有
&lt;ul>
&lt;li>文段中完全没有提及某一概念&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>近些年来，我国网络游戏市场规模不断扩大，行业版图快速扩张，“搞代码”“做游戏”“写程序”的 IT 工程师，都成了众人口中的“香饽饽”职业。一份最新的报告数据显示，2018年第一季度，中国网络游戏市场维持稳定增长，市场规模达 643.3 亿元，各大游戏厂商纷纷加大网游出海业务布局。毫无疑问，我国网络游戏市场正在快速奔跑。&lt;br />C.越来越多企业选择跨行业&lt;strong>加入网络游戏市场&lt;/strong>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h4 id="特殊题型">特殊题型&lt;/h4>
&lt;ol>
&lt;li>有无提及
&lt;ul>
&lt;li>题型：以下哪项有没有被提及。不要求你判断正误，选项往往是很短的，可优先看选项&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>鬼斧神工，天机独运。别处的山，都是亲亲热热地手拉着手，臂挽着臂，唯有张家界的山，彼此保持头角峥嵘的独立，谁也不待见谁。别处的峰，再陡再险也能踩在脚下，唯有张家界，以她的危崖崩壁，拒绝从猿到人的一切趾印。&lt;strong>每柱岩峰，都青筋裸露、血性十足地直插霄汉&lt;/strong>。而峰巅的每处缝隙，每尺泥士，又必定有苍松或翠柏，亭亭如盖地笑傲尘寰。银崖翠冠，站远了看，犹如放大的苏州盆景。曲壑蟠涧，更增添无限空蒙幽翠。风吹过，一啸百吟；云漫开，万千气韵。 &lt;br />上述语段对张家界的山水描写没有提到的是（ ）。 &lt;br />A.山峰的形态 &lt;br />B.峰顶的松柏 &lt;br />C.岩峰的走向&lt;br />D.山壑与山涧&lt;/p>
&lt;p>“走向”为地质学名词，指地质构造上岩层、矿层、山脉等延伸的方向&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>难题的对比择优
&lt;ul>
&lt;li>细节判断题的难题，很多时候都是需要对比择优的，即有的选项是小瑕疵，有的选项是大问题，这种情况下，小瑕疵也能选&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>一个地区物质的贫困，往往与其&lt;strong>精神的贫乏、文化的落后&lt;/strong>息息相关。正是时下很多地方乡村文化的整体性衰落，导致民众很难获得足够丰富、正常的文化滋养和精神润泽。 &lt;br />由上述文字不能推出： &lt;br />A.乡土中国的发展亟需精神扶贫 &lt;br />B.中国乡村出现了物质与精神的“双重贫困” &lt;br />C.与硬件建设相比，流动在硬件背后的“文化流”更为重要 &lt;br />D.有必要从文化层面重建乡土中国&lt;/p>
&lt;p>虽然B没有强调精神，但是C没有乡村必错。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h2 id="逻辑填空">逻辑填空&lt;/h2>
&lt;ul>
&lt;li>逻辑填空要学好，三方面少不了，一是提升理解能力，读懂作者所表达；二是分析文段脉络找对应；三是投入精力勤积累。&lt;/li>
&lt;li>要对比择优，很多成语实词的选填往往是不完美的，甚至可能出现错误和小错误这种情况&lt;/li>
&lt;li>辨析的前提是多者在宏观意思上相同才辨析，不要一上来直接抓辨析点&lt;/li>
&lt;li>多个词语先挑简单的空，实词和成语先看成语&lt;/li>
&lt;/ul>
&lt;h3 id="四大契合">四大契合&lt;/h3>
&lt;h4 id="契合解释说明">契合解释说明&lt;/h4>
&lt;ul>
&lt;li>文段出现举例子等解释说明时（常出现如，例如，比如等）,空格所填成语实词要契合后文的解释说明&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>除了“设计最短路线”“避开交通拥堵”之外，部分提供导航服务的企业，在安排线路时还渗入了其他_____，比如他们会让用户绕行一些企业暂时缺乏数据的路线，以_____收集信息。 &lt;br />依次填入画横线部分最恰当的一项是（ ）。 &lt;br />A.理念 尝试 B.想法 上报 &lt;br />C.思路 补充 D.考量 协助&lt;/p>
&lt;p>让用户绕行，企业有点小心思，排除AC。上报是向上级汇报，而不是用户才是上级。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="契合具体展开">契合具体展开&lt;/h4>
&lt;ul>
&lt;li>文段出现后文完整语句可以填进空格，同样可以形成一个完整句子时，所填成语诗词要和后文完整语句契合。&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>迭代思维，大数据思维……关于互联网思维的众多阐释尤其是实践心得，都有价值。不过，互联网思维并不是万能的救命稻草，抓住了就能_____。如果罔顾互联网思维的本质，迷惑于它的表象，盲目套用这个“万能公式”，结果只会_____。用好互联网思维，还要洗去它被打扮的妆容，看清“素颜”，需要立足于“互联网给我们带来的改变”去思考，也需要_____，从自身的特点来挑选和利用。 &lt;br />依次填入画横线部分最恰当的一项是（ ）。 &lt;br />A.起死回生 适得其反 量体裁衣 B.化险为夷 事与愿违 随机应变&lt;br />C.转危为安 拔苗助长 随遇而安 D.妙手回春 欲速不达 量力而行&lt;/p>
&lt;p>救命-&amp;gt;起死回生；从自身的特点来利用（量体裁衣）&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="契合主谓宾性质">契合主谓宾性质&lt;/h4>
&lt;ul>
&lt;li>文段横线的内容，主语、谓语、宾语三者的性质要相同，可以跳出题目思考具体有什么性质。&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>移动终端快餐化、碎片化阅读受到大学生的推崇，但松散的阅读习惯很难使人构建_____的思想体系。在浮躁的社会环境中，经典著作虽然能够对人有潜移默化的影响，但却不能像实用书籍那样_____，这也是部分读者远离经典的原因。&lt;br />A.完整 立竿见影 B.深刻 行之有效 &lt;br />C.系统 屡试不爽D.宏大 学以致用&lt;/p>
&lt;p>松散的习惯-&amp;gt;完整的体系&lt;/p>
&lt;/li>
&lt;li>
&lt;p>甲骨文发现后，学者们通过对殷墟甲骨文的研究，证明了《史记•殷本纪》的可信，证实了司马迁撰写的商代历史绝非_____，从而极大地提高了《史记》中有关夏朝历史记载的可信度。考古学家和历史学家正以《史记•夏本纪》的记载为_____，探寻夏代的历史文化，目前已取得了可观的成绩。因此，用出土文物去印证古代典籍，重建夏商周三代文明的可信历史，甲骨文起了举足轻重的作用。&lt;br />A.虚构 线索：探寻（寻找）线索&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在一些城市的流调报告中，相继出现了“只提地点不提人”的信息公布新方式，得到了舆论的高度_____。在新增确诊病例的流调报告中隐去患者的个人信息，改为以涉及区域和场所信息披露为主，这一做法受到了不少媒体和网民的称赞，“不提人”更显对人的_____。&lt;br />A.关注 体谅 B.认可 尊重 &lt;br />C.评价 关爱 D.肯定 重视&lt;/p>
&lt;p>“不提人”-&amp;gt;尊重隐私权-&amp;gt;尊重&lt;/p>
&lt;/li>
&lt;li>
&lt;p>从企业成长理论的角度分析，多元化经营是企业成长的结果，是企业实现发展壮大的重要途径。多元化的经营能够帮助企业实现规模经济向范围经济转变的目标，同时又可以降低资产的_____，提高企业能力。在利益和效率的_____下，多元化经营成为众多企业的选择。 &lt;br />A.流动性 推动 B.封闭性 带领 &lt;br />C.风险性 引领 D.专属性 驱动&lt;/p>
&lt;p>多元化-&amp;gt;单一性-&amp;gt;专属性。封闭性对应开放。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="契合比喻">契合比喻&lt;/h4>
&lt;ul>
&lt;li>当文段出现了很形象的比喻用法时，抓准比喻，契合比喻性质，往往可以秒杀题。&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>从符号化到数字化，信息在人类进化和文明发展中的重要性毋庸置疑。如果说符号化产生了知识的“宝库”，那么作为数字化的产物，大数据将成为人类的“超级矿藏”，其资源性、基础性与战略性的价值已经_____。为应对大数据时代的到来，国际竞争正在悄然展开。&lt;br />A.略胜一筹 B.初露峥嵘 &lt;br />C.不可胜数 D.今非昔比&lt;/p>
&lt;p>&lt;a href="https://hb.huatu.com/hbgwy/1571100.html">文中&lt;/a>提到了“信息是很重要的”，“大数据将成为‘超级矿藏’”，因此该空应体现“大数据价值巨大”的含义。A项“略胜一筹”指两相比较，稍微好一些，文中未体现“大数据与其他事物相比而自身优越”的含义，排除。C项“不可胜数”形容数量很多，显然此处没有“数量多少”的含义，且与空前的“价值”不搭配，排除。D项“今非昔比”形容现在比起过去，变化很大，文中未体现“今昔”“变化”的含义，排除。B项“初露峥嵘”指不寻常之处刚刚显露出来，符合文意。因此答案为B。&lt;strong>尊重原文&lt;/strong>，怎么能选C？？，比喻形容矿藏资源丰富&lt;/p>
&lt;/li>
&lt;li>
&lt;p>前驱者们深厚的学养和科学态度，对_____当下学界弥漫着的浮泛学风，有着深刻的现实意义。他们严谨扎实的作风和科学求实的态度，永远也不会过时，仍然是当代比较文学研究者应当继承和学习的。但这绝不意味着，我们要重复前人的劳动，_____地重走前人已经走过的道路。 &lt;br />A.改正 按部就班 B.矫正 如法炮制&lt;br /> C.纠正 心安理得 D.匡正 亦步亦趋&lt;/p>
&lt;p>道路-&amp;gt;走路-&amp;gt;亦步亦趋&lt;/p>
&lt;/li>
&lt;li>
&lt;p>电影是“文化名片”，生动地展示着一个国家的形象；也是“文化底片”，形象地显影着一个国家的_____；电影是“文化芯片”，深刻地_____着一个国家的精神密码。电影并不提供解决方案，但却让陌生的心灵相通，成为我们彼此贴近、_____对方的“通行证”。&lt;br />A.内涵 传递 理解 B.底蕴 揭示 抵达 &lt;br />C.神采 谱写 拥抱 D.气质 建构 接纳&lt;/p>
&lt;p>文化底片-&amp;gt;底蕴；通行证-&amp;gt;抵达&lt;/p>
&lt;/li>
&lt;li>
&lt;p>让学生接受马克思主义，离不开必要的灌输，但这不等于搞填鸭式的“硬灌输”。要注重启发式教育，引导学生发现问题、分析问题、思考问题，在不断启发中让学生_____得出结论。&lt;br /> A.潜移默化 B.举一反三&lt;br /> C.水到渠成 D.融会贯通&lt;/p>
&lt;p>硬灌输-&amp;gt;软灌输-&amp;gt;渠-&amp;gt;水到渠成&lt;/p>
&lt;/li>
&lt;li>
&lt;p>科技是国家强盛之基，科技成果是科技发展水平的外在表现。当下，我国在多个关键核心技术上依旧面临“卡脖子”的问题，如何用好科技成果评价这个（），支持一线科技人员潜心研究，激发科技人员（ ），是加快实现国家科技自立自强的关键。&lt;br />A.指挥棒 积极性 B.发动机 内驱力 &lt;br />C.火车头 新动能 D.风向标 创造性&lt;/p>
&lt;p>&lt;a href="https://www.chinagwy.org/files/20230904103409_52810.pdf">第一空&lt;/a>，横线处是对“科技成果评价”的比喻，能够形象生动地体现出“科技成果评价”的作用。根据文段“我国在多个关键核心技术上依旧面临‘卡脖子’的问题”，而“如何用好科技成果评价”“是加快实现国家科技自主自强的关键”，&lt;strong>可知“科技成果评价”有助于我国有针对性的解决“卡脖子”的问题，故“科技成果评价”具有一定的指引作用、引领作用&lt;/strong>。A 项“指挥棒”原指乐队指挥﹑交通警指挥棍之意，现比喻能起指挥、引导作用的事物，符合文意，保留；B 项“发动机”原指提供动力的机械，可也比喻为动力源泉，文中“科技成果评价”并非源头性作用，不合文意，排除；C 项“火车头”比喻起带头作用或领导作用的人或事物，文段并未表明“成果评价”是领导带头人物，程度过重，排除；D 项“风向标”本意为一种测定风来向的设备，后来引申为某种事物的发展趋势和方向，不合文意，排除。第二空，代入验证，“激发科研人员积极性”，符合文意，当选。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="三大注重">三大注重&lt;/h3>
&lt;ul>
&lt;li>注重主谓宾
&lt;ul>
&lt;li>一定要看准一个完整语句里面，谁是主语，谁是谓语，谁是宾语，很多同学往往读得很快，很容易忽略这个点。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>注重程度轻重
&lt;ul>
&lt;li>横线中填入的成语实词，一定要和文段的程度轻重匹配，不可过轻或过重&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>注重情感色彩
&lt;ul>
&lt;li>要注重文段的褒贬，中性的情感色彩，不能褒贬混用&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>注重主谓宾&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>访古是十分感人的经历，尤其是当我们踏上古代文献中_____的地点时。亲手触摸庄重威严的利簋，秀丽铭文好像把我们拉回到三千年前牧野之战的场景，_____中描绘的古代社会面貌在脑海中清晰了起来，我们感受到了历史迎面扑来的强烈震颤。这种感觉，对于考古学家来说可谓一种致命的“诱惑”。然而，身为一名严谨科学的从业者，必须对这种诱惑保持足够的警惕，维护考古记录的_____，这是一名考古学者的自警，也是整个考古学学科的自尊。&lt;br />A.如雷贯耳 刀光剑影 客观性 B.如数家珍 白纸黑字 严肃性&lt;br />C.司空见惯 鼓角齐鸣 主体性 D.耳熟能详 只言片语 独立性&lt;/p>
&lt;p>铭文(主语)-&amp;gt;文字-&amp;gt;只言片语(白纸黑字指的是证据)&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>注重程度轻重&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>横线中填入的成语实词，一定要和文段的程度轻重匹配，不可过轻或过重&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>随着年轻人不断搬至新城，古城的活力日减，如何用新鲜血液激活（）的古城？恐怕没有比组织年轻人徒步“走读”更好的方式了，通过开展一系列活动来激发年轻一代的主人翁意识，是（ ）古城的重要一步。 &lt;br />A.濒危 还原 B.衰颓 挽救 &lt;br />C.退化 重启D.落寞 复苏&lt;/p>
&lt;p>活力日减-&amp;gt;还未消亡-&amp;gt;排除ABC（（身体、精神等）衰弱颓废。）。活力复苏。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>注重情感⾊彩&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>要注重文段的褒贬，中性的情感色彩，不能褒贬混用&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>国学如果停留在如此浅层次的形式复古，无异于_____，甚至会把国学弄成与现代文明相对抗的姿态，凡事不问好坏对错，一切以东西古今划界。凡是古人的都是好的，哪怕骑驴;凡是现代的都是“非我族类”,都该保持距离。如此下去，国学非但不会被这些人“发扬光大”，相反可能会走入狭隘化、极端化、边缘化的境地，钻进狭小天地里_____，与文明发展割断脉络，把自己变成了一块“化石”。 &lt;br />A.缘木求鱼 蓬荜生辉 B.掩耳盗铃 纤尘不染&lt;br />C.刻舟求剑 皮里阳秋 D.买椟还珠 孤芳自赏&lt;/p>
&lt;p>贬义-&amp;gt;孤芳自赏。（皮里阳秋：藏在人们心中的褒贬。）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>诗歌是一门语言艺术，它的材料就是语言，而任何一种语言系统都有巨大的（），诗歌语言也不例外，诗人生活在特定的语言环境中，要表达任何审美意识，都不得不运用（）的语言，即广义的“陈言”，因为从理论上讲，前人从未使用过的崭新语言是无法进行交流的。&lt;br />A.严密性 相沿成习 B.稳定性 循规蹈矩 &lt;br />C.严谨性 陈陈相因 D.稳固性 约定俗成&lt;/p>
&lt;p>约定俗成：指某种事物的名称或社会习惯是由人们通过长期实践而认定或形成的；相沿成习：成为习惯；陈陈相因：沿袭老一套，没有改进。稳固才不容易改变。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>渲染：言词、文字过度吹嘘夸大。&lt;/li>
&lt;/ul>
&lt;h3 id="三大内部关系">三大内部关系&lt;/h3>
&lt;h4 id="前后文递进">前后文递进&lt;/h4>
&lt;ul>
&lt;li>当出现表达递进的关键词时，注意体现这种递进，拿不准时排除一定不是递进的。&lt;/li>
&lt;li>常见的递进关键词：甚至、更、更加、尤其等&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>人工智能听起来很遥远，其实已经_____到我们的日常工作和生活中了。人工智能的应用，让生活更便捷、更有乐趣，节约时间、解放体力，甚至未来机器将_____人类进行一些基础性的劳作，这个场景令人憧憬。 &lt;br />A.渗透 替代 B.融入 协助 &lt;br />C.深入 取代 D.运用 辅助&lt;/p>
&lt;p>主动替代，被动取代。机器应该智能到主动替代。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="同义并列及不绝对性">同义并列及不绝对性&lt;/h4>
&lt;ul>
&lt;li>当题干中出现一个成语实词后紧跟顿号的情况，为同义并列的表达。&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>中国古代技术的西传，为欧洲农业、手工业的改进和提高创造了条件，这成为后来英国工业革命兴起的隐形因素。同时，我们有理由相信，一个民族越是思想活跃、眼界开阔，技术的产生越如雨后春笋，从而（ ）时代；越是（ ）、满足现状，技术越会被禁锢，从而被时代遗弃。 A.引领 固步自封 B.推动 畏首畏尾 C.超越 墨守成规 D.开启 抱残守缺&lt;/p>
&lt;p>与满足现状并列-&amp;gt;固步自封：比喻保守，安于现状，不求进步；抱残守缺：形容思想保守，不肯接受新事物。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>踏上实现第二个百年奋斗目标新的赶考之路，交出更加优异的答卷，就要使理想信念强大无比，全党的马克思主义信仰_____，共产主义远大理想豪迈澎湃，理想信念的洪流冲决一切阻碍我们前进的围堰和堤坝。交出更加优异的答卷，就要常怀远虑、_____，始终谦虚谨慎、不骄不燥、艰苦奋斗，不为任何风险所惧，不为任何干扰所惑，不懈推进中华民族伟大复兴。&lt;br />A.坚定无比 忧国忧民 B.坚如磐石 居安思危&lt;br />C.坚强如铁 殚精竭虑 D.毫不动摇 常思过往&lt;/p>
&lt;p>思考未来-&amp;gt;居安思危。常思过往反义词了。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>“为调研而调研”等现象的出现，很大程度上就在于调研不深入、不具体。现实中，有人了解情况习惯于大而化之、_____;有人调研习惯于走设计路线，_____。这些心中不揣问题、脚下不沾泥土的错误做法，导致调研不深、不实、不细、不准，最终也会无效。&lt;br />A.粗枝大叶 按部就班 B.走马观花 表里不一 &lt;br />C.轻描淡写 循规蹈矩 D.避重就轻 按图索骥&lt;/p>
&lt;p>大而化之：形容做事马虎，不仔细。粗枝大叶同义词&lt;/p>
&lt;/li>
&lt;li>
&lt;p>情绪是本能，每个人每天都会有各种情绪产生。情绪产生之后，是被情绪_____，还是运用情绪优化自己，这就考验一个人的情商。情商绝对不是逢迎拍马，口是心非，_____，也绝对不是否认自己的情绪，或者认为自己不高兴是无所谓的。 &lt;br />A.摆布 滔滔不绝 B.俘虏 巧言令色 &lt;br />C.折磨 人云亦云 D.控制 能言善辩&lt;/p>
&lt;p>逢迎拍马：迎合；口是心非：虚假-&amp;gt;贬义。巧言令色：形容花言巧语，假装和善，向人讨好。人云亦云：&lt;strong>别人&lt;/strong>说什么，自己也跟着说什么。形容没有主见，随声附和。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>居天下之广居，立天下之正位，行天下之大道。面对国家间、文化间的差异，中国主张_____、开放包容、互学互鉴；面对经济全球化大潮，中国致力于_____开放合作、开放创新、开放共享的世界经济；面对人类共同挑战，中国秉持共商共建共享的的全球治理观，_____国际关系民主化······习近平总书记强调：我们要_____时代风云，把握时代大势，站在人类发展前沿积极探索关系人类前途命运的重大问题，为应对当今世界面临的全球性挑战、解决人类面临的共性问题贡献中国智慧、中国方案。 &lt;br />A.携手共进 建造 推进 紧跟 B.合作共赢 打造 促进 关注&lt;br />C.求同存异 共建 倡导 洞察 D.和平崛起 构建 力挺 识别&lt;/p>
&lt;p>开放包容：开放，递进到互学互鉴：互相学习。从不同中找相同，然后包容，然后互相学习。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果你的生活中没有伟大、高贵的人和有智慧的人怎么办?请不要变得麻木，不要_____，不要放弃向生活学习的机会。因为至少在你的周围还有树，特别是大树，它会教会你许多东西。一棵大树，就是你的亲人和老师，而且也可以毫不夸张地说，它就是伟大、高贵和有智慧的人。 &lt;br />A.自以为是 B.茫然失措 &lt;br />C.随波逐流 D.自暴自弃&lt;/p>
&lt;p>根据文段“不要变得麻木，不要……，不要放弃向生活学习的机会”可知空格处应该填一个与变得麻木、放弃学习并列的成分。A项“自以为是”指总以为自己是对的，这与文段的语意明显偏离，排除；B项“茫然失措”指心中迷惑，不知怎么办才好，本身有麻木之意，对应的正是“不要变得麻木”，排除；C项“随波逐流”比喻没有坚定的立场，缺乏判断是非的能力，只能随着别人走。能够作为并列成分填入且符合题干语意。D项“自暴自弃”指自己瞧不起自己，甘于落后或堕落，本身有放弃学习之意，对应的正是“不要放弃向生活学习”，排除。故&lt;a href="https://www.zongyang.org/133079.html">正确答案为C&lt;/a>。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>顿号表达同义并列，其实是一种“底线抓手”，没有任何对应的时候，可考虑同义并列，当出现&lt;strong>更明显的对应&lt;/strong>时，可以不同义，也就是顿号的同义并列有“不绝对性”。&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>从个人无意识、（）的影像记录，到组织严密、目标明确、系统全面的深度追踪，纪实摄影体现出见证人类社会发展的历史价值。个人生存状态、家庭生活变迁、社会文明进程、国家发展历程、时代步伐变迁等，纪实摄影建构的“记忆银行”，（）了人们的视觉感官，为我们提供了生动逼真的历史见证。 &lt;br />A.碎片化 延伸 B.零散化 重塑 &lt;br />C.浅表化 拓展D.娱乐化 刺激&lt;/p>
&lt;p>根据“从个人...系统全面”可知，横线处所填词语应该与横线后语义相反，表示缺乏严密的组织、明确的目标以及非系统全面的意思，存在对应关系。A项“碎片化”、B项“零散化”均可表示不够全面、不够系统之意，保留。C项“浅表化”、D项“娱乐化”不符合语境，且不能形容“影像记录”，排除。延伸感官。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="前后文反义">前后文反义&lt;/h4>
&lt;ul>
&lt;li>当出现引导反义的关键词时， 注重前后的意思相反。&lt;/li>
&lt;li>常见的引导反义的关键词：但是、但、然而、却等&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>2019 年以来，“双百行动”与“综合改革试点”为地方国企改革注入了新动力，踩下了加速器。地方国企改革正推向纵深，包括从单项改革向综合改革推进，从容易改的层面向较难改的层面推进，从修修补补向（）推进。 &lt;br />A.脱胎换骨 B.洗心革面 &lt;br />C.清身洁己 D.阳春白雪&lt;/p>
&lt;p>“国企改革”，由“向”可知，待填词与“修修补补”构成递进，词义相近，程度更重，待填词应表示改革程度深。对应选项，A项“脱胎换骨”比喻痛改前非，重新来过，侧重强调&lt;strong>改变程度深&lt;/strong>，与“修修补补”构成递进，当选。B项“洗心革面”指去除旧思想，改变旧面貌，比喻&lt;strong>坏人物&lt;/strong>彻底悔改，文中搭配对象为“国企改革”，搭配不当，排除；C项“清身洁己”比喻保持自身节操，身体力行，D项“阳春白雪”比喻高深的不通俗的文学艺术，两项均不符合文意，&lt;a href="https://cq.m.jinbiaochi.com/cqgwy/news_236894.html">排除&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>我们通过守正创新形成了中国特色社会主义理论体系，守正就不能偏离马克思主义、社会主义，但不是（），还要往前发展、与时俱进，否则就是僵化的、陈旧的、过时的。 &lt;br />A.刻舟求剑 B.缘木求鱼 &lt;br />C.邯郸学步 D.削足适履&lt;/p>
&lt;p>（）对比往前发展，与时俱进。刻舟求剑：比喻办事刻板拘泥，不知根据实际情况的&lt;strong>发展&lt;/strong>处理问题。削足适履：比喻不合理地迁就现有条件，或不顾具体条件地生搬硬套。缘木求鱼：行事的方向、方法不对，必将劳而无功，贬义。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>年轻人应该更好地认识自己、了解各个专业，选择自己真正擅长、真正愿意去（）的方向。热情善谈的人适合当老师，天生大大咧咧的人可能不太适合做医生。不感兴趣的话，在影视鉴赏或媒体创意中也会（），感兴趣的话，在复杂的数学公式和化学方程式中也一样可以自得其乐。 &lt;br />A.努力 束手无策 B.追求 心猿意马 &lt;br />C.实践 郁郁寡欢 D.钻研 索然无味&lt;/p>
&lt;p>自得其乐-&amp;gt;不快乐-&amp;gt;郁郁寡欢。索然无味还要再推一步才能得到不快乐。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="特殊语境相反">特殊：语境相反&lt;/h4>
&lt;ul>
&lt;li>文段有可能出现分成两个大部分，两个大部分整体相反，要有宏观思维。&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>心理学上有个概念叫曝光效应，是指人们会对自己熟悉的事物产生好感，会有“（）”的感觉。曝光效应就是广告营销的心理学基础。不过（），心理学上还有一个概念叫“过度曝光”，研究发现，一个事物在被试面前连续呈现 10 到20 次后会增加好感度，但是超过这个次数，反而会让被试产生厌烦感。 &lt;br />A.似曾相识 不言而喻 B.情有独钟 无独有偶&lt;br />C.心旷神怡 如出一辙 D.如沐春风 物极必反&lt;/p>
&lt;p>不过，转折出不好-&amp;gt;物极必反&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="三大谬误">三大谬误&lt;/h3>
&lt;ul>
&lt;li>局部谬误
&lt;ul>
&lt;li>很多同学逻辑填空做不好，找不到对应，最大的一个问题便是眼光过于的&amp;quot;局限&amp;quot;，只盯着一个局部看，没有宏观的文章把握，我把这种错误称作&amp;quot;局部谬误&amp;quot;。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>搭配不当
&lt;ul>
&lt;li>顾名思义，所填入的成语实词和原文的搭配是有问题的。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>分割谬误
&lt;ul>
&lt;li>当文段有大量内容并列时，很多同学往往将其割裂开来看，往往会犯错误，应该注意其&amp;quot;整体性&amp;quot;。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>局部谬误&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>1915 年，爱因斯坦提出了广义相对论，他认为引力是时空扭曲的结果。在过去的一个世纪，广义相对论的那些看似（）的预言一一被验证。其中一个最（）的预言是，当中子星和黑洞等大质量天体相互碰撞时，时空结构会出现波动。这类事件引发的涟漪会渗透到时空中，（）到很远的地方。&lt;br /> A.石破天惊 别出心裁 扩散 B.荒诞不经 雄心勃勃 投射&lt;br />C.异想天开 引人注目 传播 D.遥不可及 广为人知 弥漫&lt;/p>
&lt;p>第一步，分析第一空。根据文意可知，文中介绍的广义相对论预言在当时是非常超前大胆，难以被人所理解的。A项“石破天惊”比喻诗文、议论不同凡响或&lt;strong>事件发展&lt;/strong>出奇而惊人，和“预言”搭配不当，排除A项。B项“荒诞不经”指非常荒谬，&lt;strong>不合情理&lt;/strong>，符合文意。C项“异想天开”比喻想法离奇，实现不了，&lt;a href="https://m.ah.huatu.com/2022/0524/2308488.html">符合文意&lt;/a>。D项“遥不可及”指很远很远，非常遥远、&lt;strong>难以得到&lt;/strong>的东西，不符合文意，排除D项。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在我国逻辑哲学的研究刚刚起步时，人们致力于引进、学习西方逻辑哲学理论。因此，部分学者产生一种（），似乎西方逻辑哲学的理论就是逻辑哲学的唯一真理。他们对待西方逻辑哲学理论，不是采取批判的态度，去其糟粕，取其精华，并以之作为构建我国逻辑哲学的素材，而是全盘照搬，（）。 &lt;br />A.错觉 奉为圭臬 B.误解 肃然起敬 &lt;br />C.倾向 人云亦云 D.认识 顶礼膜拜&lt;/p>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/568146377">第一空&lt;/a>，由“似乎西方逻辑哲学的理论就是逻辑哲学的唯一真理”可知，部分学者对逻辑哲学的认知发生了偏差，待填词应表示出现偏差之意，且感情色彩&lt;strong>消极&lt;/strong>。对应选项，C项“倾向”和D项“认识”侧重对逻辑哲学有了了解，感情色彩中性，不符合文意，排除。第二空，由“，”可知，待填词与“全盘照搬”构成&lt;strong>并列&lt;/strong>，词义相近，感情色彩一致，应表示把西方逻辑哲学理论全部当成我国构建逻辑哲学的素材之意。对应选项，A项“奉为圭臬”指把某些言论或事物奉为准则，感情色彩消极，置于文段可以体现出我国构建逻辑哲学时全部照搬西方理论，符合文意，当选。B项“肃然起敬”形容产生严肃敬仰的感情，感情色彩积极且不符合文意，排除。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>教师是课堂的主导，因此，教学信息化软硬件系统的使用大多取决于教师。但教师在常年的教学中，已形成了一套（）、驾轻就熟的教学方法，如果让他们放弃现成的方法，去学习新的软硬件系统，需要花费大量的时间和精力，有时甚至要（）整门课程的教学组织方式和内容。因此，如果没有合理的激励机制，很多老师对于新系统是（）的。&lt;br />A.完整 颠覆 望而却步 B.严密 改变 踌躇不前&lt;br />C.系统 推翻 漠不关心 D.复杂 重构 畏首畏尾&lt;/p>
&lt;p>第一空，由“、”可知，待填词与“驾轻就熟”并列，“驾轻就熟”意为对事情熟悉，做起来轻松便捷，再由“如果让他们放弃现成的方法”可知，目前教师在教学中已经有了一套熟悉的、完备的的教学方法，待填词应体现完备之意。对应选项，A项“完整”、B项“严密”、C项“系统”均可以体现教师目前有适合自己的教学方法，保留。D项“复杂”意为繁多而杂，代入文段强调目前的教学方式多且杂，不符合文意，排除。第二空，由“甚至”可知，待填词与“花费大量的时间和精力”构成&lt;strong>递进，程度更重&lt;/strong>，应表示重新形成新的教学组织方式和内容之意。对应选项，A项“颠覆”、C项“推翻”均可体现重新形成新的教学方法，保留。B项“改变”强调在旧教学方法上作出变动，程度较轻，排除。第三空，由“因此，如果没有合理的激励机制”可知，待填词表示没有激励机制造成的结果，由文意可知，教师有自己熟悉的教学方式，且适应新系统代价很大，如果奖励机制不合理，教师不会愿意尝试新系统，待填词应表示&lt;strong>不敢、不想做某事之意&lt;/strong>。A项“望而却步”意为遇到力不能及的事而往后退缩，能体现教师由于付出的代价大而内心不愿意去主动适应新系统之意，符合文意，当选。C项“漠不关心”指对人或事物冷淡，一点也不关心，文段并无体现关心之意，不符合文意，排除。故本题答案为A项。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>搭配不当&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>顾名思义，所填入的成语实词和原文的搭配是有问题的。&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>大多数人都是围绕要做的事情而非身体的自然节奏来安排自己的时间。每天的工作任务、上下班的交通、社交活动和孩子的日程安排经常（）了我们，我们的时间安排不可避免地与人体生物钟发生（）。 &lt;br />A.支配 冲突 B.干扰 矛盾&lt;br /> C.影响 混淆 D.主宰 混乱&lt;/p>
&lt;p>大多数人、经常-&amp;gt;程度深，排除BC，发生冲突搭配。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>分割谬误&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>当文段有大量内容并列时，很多同学往往将其割裂开来看，往往会犯错误，应该注意其&amp;quot;整体性&amp;quot;。&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>基础研究是科技创新的（），除了探索自然奥秘、拓展人类的认知边界，基础研究也是破解“卡脖子”难题的关键开关。根深才能叶茂，基础认知不（），原理机制不清楚，就很难做出原创性、革命性、颠覆性的关键核心技术。以我国的“人造太阳”为例，它之所以能（）创造出 1.2 亿摄氏度“燃烧”101 秒，1.6 亿摄氏度“燃烧”20 秒的世界纪录，就源自科研人员对核物理规律更深层次的理解与把握。 &lt;br />A.源头 清晰 接连 B.核心 深入 迅速&lt;br /> C.基石 全面 持续D.结果 完整 一直&lt;/p>
&lt;p>第三空，应该是接连出现成果。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="特殊技巧">特殊技巧&lt;/h3>
&lt;ul>
&lt;li>原因导致后果，保持⼀致
&lt;ul>
&lt;li>当题干出现因果逻辑时，原因导致了某个结果，则这个结果一定要和原图吻合。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>敏感于固定搭配
&lt;ul>
&lt;li>掌握常见的固定搭配，有时候可帮助解题&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>保障基础性
&lt;ul>
&lt;li>没有相应的语境时，不求最好和完美，确保基础保障即可&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>多对多对应
&lt;ul>
&lt;li>经常会出现多者并列和多者并列的对应，此时要注意一一对应。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>原因导致后果，保持⼀致&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>使用大数据，一旦安全无法保障，大数据就会产生极大的（），不仅侵害广大用户的切身利益，也会给行业发展蒙上阴影。数据隐私保护固然离不开技术，但我们也不能过于（）技术。只有加强顶层设计，多方形成合力，才更靠谱。&lt;br />A.破坏力 青睐 B.杀伤力 迷信 &lt;br />C.威慑力 推崇 D.冲击力 倚仗&lt;/p>
&lt;p>&lt;a href="https://m.sydw8.com/2021/0205/372775.html">第一空&lt;/a>。根据第一句提示信息“不仅侵害广大用户的切身利益，也会给行业发展蒙上阴影”可知，大数据会对用户和行业带来巨大的损失和危害，第一空词语情感&lt;strong>偏消极&lt;/strong>。A项“破坏力”是指使损害，损坏，符合文意。B项“杀伤力”指射杀目标，破坏目标的能力，符合文意。C项“威慑力”通常指用武力或威势使对方感到恐惧的力量；D项“冲击力”是指物体相互碰撞时出现的力，这两项均&lt;strong>无法直接导致危害&lt;/strong>的产生，排除C项和D项。第二空。根据文段语义信息，可知我们不能太过于依赖大数据技术，第二空情感倾向应&lt;strong>偏消极&lt;/strong>。A项“青睐”是用正眼相看，指喜爱或重视，且多为褒义词，排除A项。B项“迷信”多指迷失自性，而盲目地信从，表述情感和语义符合文意。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>敏感于固定搭配&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>作为智能城市基础设施的重要组成，雄安新区区块链的开发应用一直在悄然进行，从基础架构的 （）到应用落地的（），无不昭示打造“智能之城”的雄心抱负。&lt;br />A.规划 成功不居 B.搭建 牛刀小试&lt;br /> C.建立 初露锋芒 D.运行 崭露头角&lt;/p>
&lt;p>搭建架构&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>保障基础性&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>近年来，一批优秀的中国企业和中国品牌在国际市场成功（），品牌美誉度和忠诚度快速提升。这充分说明，只要依靠创新、下足功夫，中国品牌一定可以（）世界知名品牌。 &lt;br />A.转型 媲美 B.崛起 超越&lt;br /> C.突围 比肩 D.亮相 领先&lt;/p>
&lt;p>超越，领先不符合现实。市场中突围。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>多对多对应&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>管理者往往对直观信息熟视无睹，对数字情有独钟。结果，他们就可能（）一些关键线索，不能真正了解到对方的优势和劣势。由此导致的结果，要么是“ （）”，要么是“交友不慎”。 &lt;br />A.遗漏 铤而走险 B.轻视 畏首畏尾 &lt;br />C.丢失 误入歧途 D.忽略 坐失良机&lt;/p>
&lt;p>劣势-&amp;gt;交友不慎，优势-&amp;gt;坐失良机&lt;/p>
&lt;/li>
&lt;li>
&lt;p>习近平总书记指出：“环境就是民生，青山就是美丽，蓝天也是幸福。要像保护眼睛一样保护生态环境，像对待生命一样对待生态环境，把不损害生态环境作为发展的（）。”“在生态环境保护上一定要算大账、算长远账、算整体账、算综合账，不能因小失大、寅吃卯粮、急功近利、（）。” &lt;br />A.基础 一叶障目 B.根本 杀鸡取卵 &lt;br />C.目标 沽名钓誉 D.底线 顾此失彼&lt;/p>
&lt;p>大帐-&amp;gt;因小失大；长远账-&amp;gt;寅吃卯粮；综合帐-&amp;gt;综合-&amp;gt;顾此失彼：只考虑单个&lt;/p>
&lt;/li>
&lt;li>
&lt;p>传统戏曲中所蕴含的价值理念以及（）的表演节奏，很难与当代青年人的生活节奏与审美趣味相合拍。因而，关于戏曲衰亡的声音（）。事实上，戏曲相对于互联网时代知识文化的（）、快餐式传播，其可重复欣赏和耐咀嚼的品格显得更为可贵，其特有的艺术价值决定了它不可能退出历史舞台，更不会走向消亡。 &lt;br />A.不疾不徐 如雷贯耳 碎片化 B.从容不迫 不绝于耳 肤浅化&lt;br />C.四平八稳 甚嚣尘上 机械化 D.慢条斯理 此起彼伏 泡沫化&lt;/p>
&lt;p>第三空：本空为并列关系。根据顿号可知，本空为并列关系。空处与“快餐式传播”对应，应与其语义相近，又根据“可重复欣赏和耐咀嚼的品格显得更为可贵”可知，&lt;strong>空处与“可重复欣赏”语义相反，表达“快且不重复”的意思&lt;/strong>。 A选项“碎片化”指完整的东西破成诸多零块；B选项“泡沫化”指像泡沫一样，外表光鲜，容易转瞬即逝。二者均符合文意，保留。C选项“肤浅化”指局限于表面的、浅薄，不深刻，常用于观点、认识、体会、理论等等；D选项“机械化”指使用机械装备以节省人力的生产方式，也指事物如机械动作般缺少变化。二者均不能体现“快且不重复”的意思，不合文意，排除。第二空：本空为修饰关系。空处与“声音”搭配。B选项“此起彼伏”指这里起来，那里下去；形容接连不断，可以与“声音”搭配，符合文意，保留。A选项“如雷贯耳”形容&lt;strong>人的名声大&lt;/strong>。与“声音”搭配不当，排除。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="如何学逻辑填空">如何学逻辑填空&lt;/h3>
&lt;ol>
&lt;li>学好前文的出题逻辑&lt;/li>
&lt;li>成语实词的积累
&lt;ol>
&lt;li>&lt;a href="https://dict.baidu.com/">学习词义&lt;/a>&lt;/li>
&lt;li>辨析类似词语&lt;/li>
&lt;li>总结适用&lt;a href="http://search.people.cn/">语境&lt;/a>，精确匹配&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>恭喜你结束了言语理解，🎊，最后做一道题吧&lt;/p>
&lt;p>美好只是个幻影，我们总是尝试着把生活中所有美好的一切，都据为己有。总是觉得世间万物的馈赠都是理所应当。而当现实的残酷降临在自身的时候，我们总是在抱怨上天的不公平。而我们不知不觉地发现身边总是有些默默无闻的人，他们不骄不躁，总是在失败中学会总结。不是不说故事的人没有故事，即使你的故事辛酸坎坷，让聆听者潸然泪下，不会在故事中汲取教训，你也永远都是一个说故事的人。站在二十年后，你是否会对今天的喟叹而唏嘘不已，对不满足如今的自己而悲伤流泪，而对这样的曾经演变成二十年后的自己万般无奈?&lt;/p>
&lt;p>这段文字想要表达的是：&lt;/p>
&lt;p>A.与其过度期望膨胀的自己，将过错归结于上天的命运，还不如积极地面对现实，活在当下&lt;/p>
&lt;p>B.抱怨会将自己与现实的遭遇撇清关系，让事实的存在变得与自己毫无瓜葛&lt;/p>
&lt;p>C.美好对于现实生活而言，是可望而不可及的&lt;/p>
&lt;p>D.太多的苛求和心安理得只会让现实变得更加不切实际&lt;/p></content><category scheme="https://keepjolly.com/posts/" term="posts" label="posts"/><category scheme="https://keepjolly.com/posts/learn/" term="learn" label="learn"/><category scheme="https://keepjolly.com/tags/civilservant/" term="CivilServant" label="CivilServant"/></entry><entry><title type="text">公务员行测--言语理解上</title><link rel="alternate" type="text/html" href="https://keepjolly.com/posts/learn/speech-understanding/"/><id>https://keepjolly.com/posts/learn/speech-understanding/</id><updated>2023-12-27T22:08:51+08:00</updated><published>2023-11-19T22:34:44+08:00</published><author><name>Rurouni</name><uri>https://keepjolly.com/</uri><email>1366475809@qq.com</email></author><rights>在保留本文作者及本文链接的前提下，非商业用途随意转载分享(我会高强度自搜的喔👊)。</rights><summary type="html">这个老师不细讲选项的其他错误地方，有点不好，考试肯定要所有选项都看（做多了除外），讲……</summary><content type="html">&lt;ul>
&lt;li>&lt;a href="https://m.cctalk.com/inst/sdcbgbdg">这个老师&lt;/a>不细讲选项的其他错误地方，有点不好，考试肯定要所有选项都看（做多了除外），讲完六大观点，却不在后面深化（有时候会），偏正讲的怪怪的。&lt;strong>可能需要多看多理解吧。建议早几个月多看几遍，临考确实来不及深化&lt;/strong>。不喜欢阿里木江，对比下来还是继续看完吧。另外付费加群后，有好心的小伙伴可以帮你解答问题，或者&lt;del>忽略你的问题&lt;/del>&lt;/li>
&lt;li>逻辑填空不行，只讲知识点，直接利用知识点看选项，不会解释每个选项。有没有推荐的逻辑填空。需要积累。&lt;/li>
&lt;li>没时间推荐不看，凭语感选择，毕竟你是中国人。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>以人文本，具体为主&lt;/strong>&lt;/p>
&lt;h2 id="准备知识">准备知识&lt;/h2>
&lt;p>国考主要考逻辑填空、中心理解&lt;/p>
&lt;ol>
&lt;li>逻辑填空
&lt;ul>
&lt;li>形式：题干+问法+选项&lt;/li>
&lt;li>题干为文段但是其中挖去1-4个成语/实词 形成空格&lt;/li>
&lt;li>问法为填入画横线/括号部分最恰当的一项是？&lt;/li>
&lt;li>选项为单选，四个选项 需理解文段，选出被挖去的成语/实词&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>中心理解
&lt;ul>
&lt;li>形式：题干+问法+选项&lt;/li>
&lt;li>题干是完整文段，需要整体阅读理解&lt;/li>
&lt;li>问法常为这段文字给我们的启示是？这段文字主要介绍？这段文字的核心观点是？这段文字意在强调？最适合做这段文字标题的是？等等目的是让你理解文段的问法&lt;/li>
&lt;li>选项为单选，四个选项，需理解文段，选出文段核心意思&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>语句填入
&lt;ul>
&lt;li>形式：题干+问法+选项&lt;/li>
&lt;li>题干为文段，但是挖去了其中的一句完整句子，形成空格&lt;/li>
&lt;li>问法为填入画横线/括号部分最恰当的一句是？&lt;/li>
&lt;li>选项为单选，四个选项，需理解文段及空格上下文，选出被挖去的句子&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>语句排序
&lt;ul>
&lt;li>形式：题干+问法+选项&lt;/li>
&lt;li>题干是多个独立且乱序的句子，需要对句子按照合理顺序进行排序&lt;/li>
&lt;li>问法是将以上句子重新排列，顺序最恰当正确的一组是？&lt;/li>
&lt;li>选项为选项为单选，四个选项，每个选项都是一组句子顺序&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>下文推断
&lt;ul>
&lt;li>形式题干+问法选项&lt;/li>
&lt;li>题干是完整的文段，需要整体阅读理解&lt;/li>
&lt;li>问法为这段文字接下最可排讲述/谈论的是？&lt;/li>
&lt;li>选项为单选，四个选项，需要选出下文可能出现的完整语句&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>细节判断
&lt;ul>
&lt;li>形式：题干+问法+选项&lt;/li>
&lt;li>题干是完整的文段，需要整体阅读&lt;/li>
&lt;li>问法为下列说法与原文相符/不符的是？以下无法从上述文字得知的是？以下概括文中未涉及的是？等等需要和文段部分内容一一对应的问法。&lt;/li>
&lt;li>选项为单选，四个选项，需要和文段进行一一对应&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="脉络剖析-基础">脉络剖析-基础&lt;/h2>
&lt;ol>
&lt;li>基本概述
&lt;ol>
&lt;li>什么叫脉络？其实就是写文章的思维，如果你要表达你的观点，在一篇完整的文章里面，不可能一上来什么都不说，直接说观点，一定是一步一步引出来的，因为写文章的基础思路，就是让读者能够充分体会你想表达的东西，所以一定要尽可能铺垫。&lt;/li>
&lt;li>常见的脉络顺承方式：代指（这，其，之，此）;转折（但是，而，而是...)；结论（所以，由xx可得...）；相同话题等&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>三大原则
&lt;ol>
&lt;li>顺承说意义，后面的意义不重要，这是观点提出的方式（重要性提观点）&lt;/li>
&lt;li>顺承引出新话题，若后文反复论述新话题，则后文内容重要；若夏然而止提一下，则不重要
&lt;ol>
&lt;li>珊瑚的每一“树”可能包含着数十万计的微小珊瑚个体。每个珊瑚虫又带有少量的光合藻类，这些藻类为珊瑚提供食物，帮助其保持健康。当水温仅比平常上升几度时，面对环境压力的珊瑚虫会把藻类驱逐出去，先前的整支珊瑚群会变白——&lt;code>这就是珊瑚白化&lt;/code>。如果水温不能及时回冷，那么珊瑚可能会死于饥饿或感染。即使珊瑚能逃过一劫，也要耗费约十年时间才能完全复原。 &lt;br />这段文字意在说明： &lt;br />A.白化是珊瑚主动应对环境压力的结果 &lt;br />B.光合藻类对于珊瑚保持健康至关重要&lt;br />C.珊瑚礁是一个复杂又脆弱的生态群落 &lt;br />D.海洋升温对珊瑚的生存产生严重威胁&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>顺承引出新话题，但是处于结尾，则重要不重要都有可能，具体情况具体分析，这里考虑出题人截取文章的思维&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h2 id="中心理解">中心理解&lt;/h2>
&lt;h3 id="以人为本">以人为本&lt;/h3>
&lt;ol>
&lt;li>基本概述&lt;br />何为以人为本？这里的人指的就是出题人 很多同学都有一个误区，言语理解主观理解去做题，其实这个是不对的，言语理解确实是理解为王，但是这个理解一定不能和出题人相悖，&lt;strong>你怎么想的并不重要，出题人表达的才是最重要的&lt;/strong>，也就是我常说的不要和出题入扳手航。&lt;br />但是难点就在于，什么才是出题人想表达的东西呢？为此，宝哥总结了&lt;strong>观点提出&lt;/strong>的六大方式，旨在让大家直接和出题人进行对话。主要看观点，中心思想。 （一旦观点找错，直接选错）&lt;/li>
&lt;li>万能解题公式
&lt;ol>
&lt;li>熟练掌握观点提出的六大方式，分析文段结构，锁定观点。&lt;/li>
&lt;li>找到观点发出的主语和宏观限定。&lt;/li>
&lt;li>匹配选项，排除干扰。（主要匹配观点的同义词，同词，如题目的神经元）&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h4 id="观点提出的六大方式">观点提出的六大方式&lt;/h4>
&lt;h5 id="必要性提出观点">必要性提出观点&lt;/h5>
&lt;ul>
&lt;li>当题干中出现：&lt;code>只有（G观点）才&lt;/code>，&lt;code>除非（G）否则不&lt;/code> 等标志词以及&lt;code>基础&lt;/code>，&lt;code>假设&lt;/code>，&lt;code>前提&lt;/code>，&lt;code>关键&lt;/code>，&lt;code>必不可少&lt;/code>，&lt;code>依赖&lt;/code>，&lt;code>离不开&lt;/code>等词语，&lt;strong>可表达必要性，被必要主体是观点&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h5 id="设问提出观点难题">设问提出观点（难题）&lt;/h5>
&lt;ul>
&lt;li>需要关注文段是否在解释设问，若&lt;strong>重点在于解释设问&lt;/strong>，设问直接锁定观点，答案就是对问题的解释/回答&lt;/li>
&lt;li>本质就是作者的主观性，也就是写作的目的性&lt;/li>
&lt;/ul>
&lt;p>题目：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>提到青少年面临的威胁，引人注目的新科技总是比那些熟悉和难以改变的问题更容易成为人们关注的焦点，这种偏差可能会使我们的感知发生偏离。除了使用手机导致糟糕的睡眠质量，家庭冲突也是造成青少年心理健康问题的一个重要原因，艾伦说：“不仅冲突和压力会影响大脑，缺乏温暖和社会支持同样会影响大脑”，有这么多证据都表明，其他因素会对青少年产生影响，为什么我们还只是担心手机？ &lt;br />这段文字旨在强调（ ）。 &lt;br />
A.手机成瘾并非我们唯一需要关注的问题 &lt;br />
B.当今青少年的身心健康面临着诸多威胁 &lt;br />
C.熟悉和难以改变的问题对青少年的健康威胁更大 &lt;br />
D.青少年缺乏温暖和社会支持的问题亟待引起重视&lt;/p>
&lt;/li>
&lt;li>
&lt;p>很多动物有着颜色古怪的眼睛，为什么人没有呢？眼睛的颜色其实是指虹膜的颜色，即眼睛中的一圈环状肌肉的颜色。如果虹膜中含有大量的色素，眼睛就会呈现黑褐色。随着黑色素含量的降低，眼睛就会呈现出淡褐色、绿色或蓝色。当瞳孔扩张时，虹膜处于收缩状态，由于黑色素的密度变大，眼睛的颜色便会加深一些；当瞳孔收缩时，虹膜便会舒张，眼睛的颜色也会因此变浅。不过，无论虹膜如何舒张或收缩，人类的眼睛也不可能是五颜六色的。&lt;br />
这段文字主要解释了（ ）。 &lt;br />
A.为什么是黑色素决定人眼颜色的深浅 &lt;br />
B.为什么是瞳孔的张缩决定眼睛的颜色&lt;br />
C.为什么人的眼睛不可能是五颜六色的 &lt;br />
D.为什么人眼颜色不会像动物那样古怪&lt;br />&lt;/p>
&lt;p>&lt;a href="https://www.chinagwy.org/html/stzx/qt/202206/98_510726.html">解释&lt;/a>，有点不符合设问解题，选D了。注意转折，”不过“&lt;/p>
&lt;/li>
&lt;li>
&lt;p>与其他物种相比，人类拥有非凡的认知能力。人脑究竟有什么独到之处，使得我们脱颖而出呢？脑容量是一个显而易见的候选者：如果大脑是产生意识认知的部位，更大的脑容量则意味着更高的认知能力，但大象有着比人类更大的脑容量，却不具备像我们一样灵活而复杂的行为。这是为什么呢？对于这个问题有一个简单的解释，首先，我们是灵长类，能够将大量神经元装进较小的大脑皮层里；其次，人类大脑的能量消耗可谓奢侈，只占不到2%的体重，却占了至少 20%的代谢率。而其他动物在野外摄取生肉中获取的能量，并不足以支持如此丰富的大脑皮层神经元活动。 &lt;br />
这段文字旨在说明（ ）。 &lt;br />
A.脑容量不能决定物种的认知水平 &lt;br />
B.人类在认知能力上有绝对的优越性&lt;br />
C.人脑认知能力的形成十分复杂 &lt;br />
D.生理因素决定了人类认知水平的优势&lt;/p>
&lt;p>用提炼的观点/论证结果锁定选项，再利用选项反窥观点的正确性。要回答问题，选B不应该&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h5 id="提对策给观点三大">提对策给观点(三大)&lt;/h5>
&lt;h6 id="开门见山给对策直接对策">开门见山给对策（直接对策）&lt;/h6>
&lt;ul>
&lt;li>当出现要 、需、需要、亟需、必须、应该、能够等；以及：如果（D对策）就；只要（D）就时，直接表明作者观点&lt;/li>
&lt;/ul>
&lt;p>题目：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>小剧场的“小”首先体现在物理空间的“小”。一般来讲，小剧场在物理空间的容纳度上是小的，演出空间基本上在 2000 平方米左右，观众席在 500 座以下，最为常见的为200至300个座位。参演人数不多，一般为 2 至 6 人，有时也会有独角戏。这就决定了演剧空间的紧凑性和观演关系的紧密性。因此，小剧场不宜过度渲染舞台美术的宏阔与震撼效果，而应该关注思想性、艺术形式表达或创新探索维度等戏剧艺术的本体呈现。用英国著名戏剧家彼得·布鲁克的话来说：“你若要看到什么有质量的东西，就得创造一个空的空间。”小剧场便是以鲜活的、新颖的方式传递内容、意义、表达、语言和音乐等核心艺术元素的存在。 &lt;br />
这段文字意在说明（ ）。 &lt;br />
A.小剧场营造出了一个空的艺术创作空间 &lt;br />
B.物理空间的小决定了小剧场创作的特点&lt;br />
C.小剧场创作应更关注戏剧艺术本体呈现 &lt;br />
D.小剧场具有更加多元化方向的创作取向&lt;/p>
&lt;p>反复强调艺术 是重点&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h6 id="做法危害意义给对策">做法+危害/意义给对策&lt;/h6>
&lt;ul>
&lt;li>阐述一个做法或者没有一个做法，会导致负面/正面结果。对策就是做法，危害/意义不重要&lt;/li>
&lt;/ul>
&lt;p>题目：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>网络语言，尤其是当下流行的一些新潮网络语言，对汉语的发展是促进还是阻碍，是汉语文化的精华还是糟粕，得让其在不断的冲突中接受时间和实践的检验。而为了保护汉语，保证其固有的纯洁性而一味地摒弃打压某些带有消极影响的网络语言，甚至制定相关规定性条文条款来限制网络语言的发展，有时非但不能抑制，反而会起到相反的作用。&lt;br />这段文字意在说明： &lt;br />A.网络语言的发展不宜通过行政手段干预&lt;br /> B.汉语的传承离不开网络语言的不断创新&lt;br />C.网络语言的生命力需要依靠时间来检验&lt;br /> D.新生的网络语言可能影响汉语的纯洁性&lt;/p>
&lt;p>”甚至“标递进，看递进的内容&lt;/p>
&lt;/li>
&lt;li>
&lt;p>当人脑在发育阶段接触到视觉刺激，也就是通过眼睛看到外界事物时，视皮层上的神经元会被激活，也就是说这些神经元会对不同的图像特征如颜色、形状、亮度、朝向、距离等进行加工。如果人正处于视觉功能的发育关键期，而视觉神经元未被充分激活，未来在看到某些图像特征时就不会产生反应或反应比较弱，导致看不见或看不清。&lt;br />这段文字最适合作为下列哪个观点的论据？ &lt;br />A.人体的不同机能存在着不同的发育关键期 &lt;br />B.人体功能发育不充分有可能造成终生影响&lt;br />C.图像特征对视皮层神经元的激活至关重要 &lt;br />D.错过发育关键期有可能丧失部分人体机能&lt;/p>
&lt;p>&lt;a href="https://shenzhen.huatu.com/tiku/3579934.html">解释&lt;/a>，人体机能是什么意思：可以指神经元。这题太牵强了&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h6 id="否定型对策">否定型对策&lt;/h6>
&lt;ul>
&lt;li>直接否定这个对策，常见的有不可以（做），不能（做），不要（做），禁止（做）&lt;/li>
&lt;/ul>
&lt;p>题目：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>科举是一种复杂的文化现象。然而，在现代中国人对传统事物的看法中，科举大概也是被误解最深的制度。我们不应忽略科举制的历史性，试想在传统社会，能构想出其他更好的选才制度来吗？古代的中国统治者和许多文化巨人并不是没有看到科举制的局限和弊端，也不都是因循守旧之辈。但经过反复比较，最后还是选择了科举制，这实际上是一种择善而从。古代一些学者批评科举取士并不等于反对科举制度。从古代到近代的学者对科举制的批判主要是对应试现象、对考试内容和形式的批判，特别是对八股取士的批判，很少有人否定科举制本身。&lt;br />这段文字意在强调（ ）。&lt;br /> A.古代学者对科举制的肯定多过否定&lt;br /> B.科举制的弊端并非来自其制度本身&lt;br />C.科举制是当时历史条件下的理性选择 &lt;br />D.应从现实情况出发多角度评价科举制&lt;/p>
&lt;p>&lt;a href="https://cq.m.jinbiaochi.com/sydw/news_450928.html">解释&lt;/a>，但表转折。后面是其补充&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h5 id="利用他者经验提观点">利用他者经验提观点&lt;/h5>
&lt;ul>
&lt;li>只要他者经验是成功的，可借鉴的，且文段作者没有提出自己的观点，则重点借鉴&lt;/li>
&lt;/ul>
&lt;p>题目：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>关于“天鹅都是白色的”这一假说，通常我们应该一只一只地调查天鹅的颜色。这种通过积累个别观察来验证假说或推导出定律的方法称为“归纳法”。但基于归纳法的推论不能带来可靠的正确性，哲学家波普提出了不依赖于归纳法的科学方法。他认为，试图证明假说是错误的才是科学的研究。例如，即使只找到了一只黑天鹅，也能证明“天鹅都是白色的”这一假说是错误的。虽然基于归纳法的验证通常是不可靠的，但如果证伪的话，则是可靠的。通过反复“设定一个用来解决问题的假说，寻找其反例来证伪假说，再设立新的假说······”，就可以进行科学的研究。 &lt;br />这段文字意在说明（ ）。 &lt;br /> A.科学的方法应是“可归纳” &lt;br />B.科学的方法应是“可证伪” &lt;br />C.科学的方法应是“不可证伪” &lt;br />D.科学的方法应是“不可归纳”&lt;/p>
&lt;p>不可证伪？要符合观点：试图证明假说是错误的才是科学的研究&lt;/p>
&lt;/li>
&lt;li>
&lt;p>人在社会上生活，当然有适应现实的必要，但这不该是教育的主要目的，蒙田说，“学习不是为了适应外界，而是为了丰富自己。”孔子也主张学习是“为己”而非“为人”的事情。古往今来的哲人都强调，学习是为了发展自己内在的精神能力，从而在外部现实面前获得自由。当然，这只是一种内在自由，但是，正是凭借这种内在自由，这些独立人格和独立思考的能力，那些优秀的灵魂和头脑对于改变人类社会的现实发生了伟大的作用。&lt;br />这段话想表达（ ）。 &lt;br />A.教育的目的是让人适应社会 &lt;br />B.学习是为了发展个人的内在精神能力&lt;br /> C.人的内在自由对改变人类社会的现实具有伟大的作用&lt;br /> D.教育的主要目的是让学生摆脱现实的束缚，而非适应现实&lt;/p>
&lt;p>注意脉络顺承，他者观点(学习是为了发展自己内在的精神能力)不一定就是答案&lt;/p>
&lt;/li>
&lt;li>
&lt;p>传统的文明标准有三个，即文字、青铜器和城市。但后来许多考古学家发现，由于区域不同，文明的差异也很大，这个判断标准不但行不通，还会给考古工作带来阻碍。现如今，国际上对文明的判断标准主要是：已进入国家社会形态，具有一套礼仪系统和统治管理制度。良渚文化虽没有青铜器和较为成熟的文字，但具有早期国家社会形态和较为完整的礼仪系统以及管理制度，还具有许多东方文明的因素。有良渚文化考古研究员甚至认为，良渚文化是东方早期一个集大成的文明。&lt;br /> 这段文字意在强调：&lt;br /> A.城市应该成为认定文明的首要标准&lt;br /> B.良渚文化符合通行的文明判断标准&lt;br />C.传统的文明评判标准仍具有现实意义&lt;br /> D.良渚文化颠覆了传统上对文明的认识&lt;/p>
&lt;p>D应该是文明标准，全文都在强调文明标准&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h5 id="重要性提观点">重要性提观点&lt;/h5>
&lt;ul>
&lt;li>其一：当题干中出现：事物+意义，没有事物+危害时，事物名词&lt;/li>
&lt;li>其二：当题干中出现表达xx很重要的标志词，如：独特优势，显著提升，重要角色，有很大帮助，带来很多意义等等，可以以重要性表达观点（需灵活理解）&lt;/li>
&lt;li>给找不到观点兜底&lt;/li>
&lt;/ul>
&lt;p>题目：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>传统村落是珍贵的农耕文明遗产。当前，传统村落面临的当务之急依然是严格保护。随着信息化、智能化时代的到来，让传统村落融入未来，在新格局下进行功能定位，重新融入城乡发展，是今后的一个重要议题。因为发展才能体现传统村落的价值，发展才会让传统村落传承下去。未来，历史村镇将和现代城市更加紧密地融合在一起，并作为乡村振兴战略中的特色保护类和重要聚焦点，在未来的城乡格局中扮演重要的角色，带动城乡发展。&lt;br />
这段文字意在说明： &lt;br />
A.发展才会让传统村落传承下去 &lt;br />
B.传统村落将在未来的城乡格局中扮演重要的角色&lt;br />
C.传统村落要在城乡融合背景下实现不断发展&lt;br />
D.传统村落急需严格保护&lt;/p>
&lt;p>强调融入，并且保护是宏观概念&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h5 id="本身观点性-本源">本身观点性 (本源）&lt;/h5>
&lt;ul>
&lt;li>出现作者认为、我认为、由此观之等标志词以及&lt;/li>
&lt;li>&lt;strong>总结、转折以后引出评价性、观点性的句子&lt;/strong>，本身就是观点句&lt;/li>
&lt;/ul>
&lt;p>题目：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>在互联网风靡的当下，直播不再是“网红”和明星的专利，作家直播卖书，已经在一些电商平台悄然兴起。在不久前的“世界读书日”，国内文学界、出版界迎来了直播最密集的一天。多位作家来到直播间，和读者分享知识，有的也带货售书。只不过，就卖书数量而言，作家们的直播效果还是比不上“顶流”专业主播。 &lt;br />
这段文字意在说明（ ）。 &lt;br />
A.作家们也开始走进直播间 &lt;br />
B.作家直播带货不敌专业主播&lt;br />
C.作家直播的前景非常看好 &lt;br />
D.专业主播的带货能力非常强&lt;br />&lt;/p>
&lt;p>选观点，不是文段意思，A只是现状&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="观点的深刻剖析">观点的深刻剖析&lt;/h4>
&lt;h5 id="观点的统一性">观点的统一性&lt;/h5>
&lt;ul>
&lt;li>没有任何规定一个文段中作者只能表达一次观点，为了让大家对于作者表达的观点印象深刻，真实情况是一个文段里面往往会反复提及观点。&lt;/li>
&lt;li>也没有任何规定一个文段中作者只能用一种方式表达观点，所以真实情况是一个文段多种观点的表达形式并存。&lt;/li>
&lt;li>但是有一个核心不变的是，&lt;strong>多次表达，只是为了强调&lt;code>重复&lt;/code>或相互补充&lt;/strong>，不可能一个文段出现多种截然不同的观点，称之为观点的统一性。&lt;/li>
&lt;/ul>
&lt;p>题目：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>科学研究起源于哲学，而哲学研究所建立的逻辑化正是科学方法的一个关键内容。在使用哲学的逻辑化开展科学研究的过程中，定量化是必不可少的。没有定量化，就无法通过归纳建立模型，也无法通过对模型的演绎做出预言，并被进一步的观测或者实验检验。数学研究所建立的各种计算方法和工具，使得科学研究和现在一般意义上的哲学研究分道扬镳，而科学研究的定量化又使得科学研究的成果能够得到实际应用，这是科学和哲学彻底分离的最显著标志。&lt;br />这段文字意在强调： &lt;br />A.科学与哲学的渊源及区别 &lt;br />B.定量化在科学研究中的意义&lt;br />C.开展科学研究的基本方法&lt;br /> D.哲学和数学对科学研究的贡献&lt;/p>
&lt;p>必要性+顺承提出观点=&amp;gt;逻辑化关键，定量化关键。并且反复强调定量化。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h5 id="观点的要素性">观点的要素性&lt;/h5>
&lt;ul>
&lt;li>在中心理解中，所有的要素可以按照以下重要程度进行排序：对策&amp;gt;观点&amp;gt;问题&amp;gt;其他，核心是一种工作思维，注意是在文中的观点，而不是选项的重要程度
&lt;ul>
&lt;li>对策中，以直接对策（开门见山）最为重要&lt;/li>
&lt;li>观点中，表达重要性的弱观点，不一定比问题重要，具体情况具体分析（本质是谈意义选观点和谈危害选问题）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>题目：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>在科研领域，人们也喜欢庆祝大新闻，比如证实了黑洞的存在、发明了编辑DNA 的方法等。与之相比，一些耗时多年、极其艰辛的研究却鲜为人知，因为它们没有带来决定性的结果，似乎不能为解决科学问题提供任何证据，尽管它们能让我们离答案更近一步。这些没有得到预期结果的研究被称为“零结果”，它们驱使我们前进，让我们避免重复同样的错误，为未来的研究指引方向。如果没有它们，科学的发展可能放缓甚至受阻。我们可以从中学到很多东西，然而它们通常不会被发表。这不仅会导致科研效率低下，也显示当前的科学出版流程可能存在很大问题。&lt;br />这段文字意在（ ）。 &lt;br />A.揭示“零结果”的价值 &lt;br />B.指出科研领域存在的偏见&lt;br />C.反思忽视“零结果”的问题 &lt;br />D.说明科研发展过程中的复杂性&lt;/p>
&lt;p>做法+危害提出观点=&amp;gt;没有它们和不会发表，导致效率低下；。主要讲的是危害，问题；强调零结果。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>科学技术的迅猛发展带来日益突出的信息安全问题。信息安全事关国家安全和社会稳定。互联网核心技术是我们最大的“命门”，核心技术受制于人是我们最大的隐患。据海关数据显示，2018 年全年我国进口芯片数量为 4175.7 亿件，进口金额达到3120.58 亿美元。这一数字不仅超过原油这一战略物资，还超过了农产品、铁矿石、铜、铜矿石和医药品的总和。这充分说明，我们的芯片制造水平比世界先进水平还落后很多。而互联网企业即便规模再大、市值再高，如果核心元器件严重依赖外国，那么这个供应链的命门就掌握在别人手里。&lt;br />这段文字意在强调（ ）。 &lt;br />A.当前我国信息安全问题日益严峻 &lt;br />B.应该加快对互联网核心技术的掌握&lt;br />C.芯片技术受制于人将带来巨大隐患 &lt;br />D.自研核心技术是我国企业的发展方向&lt;/p>
&lt;p>重要性、必要性提出观点=&amp;gt;信息安全重要，核心技术重要。强调核心；芯片在&lt;code>而&lt;/code>前面，并且芯片是问题，文中提出解决办法了，选对策。&lt;br />&lt;a href="http://hgwljy.com/article/1687.html">文段开篇&lt;/a>介绍了科技发展带来信息安全问题的大背景，并提出网络安全的重要性。接着通过程度词‘最”,强调互联网 核心技术的重要性及我国存在互联网核心技术受制于人的隐患。之后列举芯片进口数量这一数据，进一步强调我国互联网核心技术落后于世界先进水平。尾句通过反面论证“如果……那么……”,再次强调互联网核心技术不能依赖国外。因此，文段 为“提出问题+提出对策”的行文脉络，意在强调我国应将互联网核心技术掌握在自己手中，对应B项。&lt;br />A项，“安全问题”为问题表述，且对应文段首句背景铺垫部分，非重点，排除；&lt;br />C项，“巨大隐患”为问题表述，且“芯片技术”对应列数据部分的内容，非重点，排除；&lt;br />D项，“核心技术”及“我国企业*范围扩大，脱离主题词“互联网””,排除。故正确答案为B。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h5 id="观点的具体性">观点的具体性&lt;/h5>
&lt;ul>
&lt;li>当文段存在多个观点时，哪个观点&lt;strong>更微观，更具体&lt;/strong>，就重点在哪个观点，反之。&lt;/li>
&lt;/ul>
&lt;p>题目：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>据有关报道，基因编辑技术可被用于彻底治疗抑郁症或早年性痴呆症。但专家提醒，这有可能抹杀患者的创造力，基因编辑技术的应用也或将引发道德方面的问题。因为基因编辑技术一旦得到普及，父母就会利用它“优化”自己的孩子，经过改造的基因必然会遗传给后代，就会出现电影中的“转基因人”。研究人员说，“一旦开始了这种做法，就无法回头了，我们绝不能跨越这个界限。”人类可以利用基因编辑技术来治疗疾病，生产出造福于人类的食物、药品等，但这项技术若得不到合理利用便会造成各类问题。在科学技术迅猛发展的今天，只有保持清醒的头脑，才能使人类不断进步。 &lt;br />这段文字意在强调： &lt;br />A.滥用基因编辑技术后果不堪设想&lt;br />B.“转基因人”将引发严重的伦理问题&lt;br />C.使用科学技术的前提是保持清醒的头脑&lt;br /> D.基因编辑技术在医学方面存在一定局限性&lt;/p>
&lt;p>他者提观点=&amp;gt;基因技术双刃剑；必要性提观点=&amp;gt;保持清醒的头脑。保持清醒的头脑去利用基因编辑技术，后者更具体，并且多处提到。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在 20 世纪 90 年代，地面蜂窝移动通信（GSM 和CMDA）和低轨道卫星通信（铱星系统）在全球是竞争关系。虽然地面移动通信从 2G 到3G、4G 和5G 得到了快速发展及广泛应用，但只覆盖约 20%的陆地面积和 6%的地球表面积。由于人类活动空间日益拓展，行业及军事应用愈发广泛，人们对具有覆盖范围广、受地理条件限制小等特性的卫星通信的需求越来越强烈。因此，卫星通信与地面移动通信在 5G/6G 走向互补关系，共同构建覆盖全球的星地融合通信网络是大势所趋。&lt;br />这段文字旨在说明：&lt;br />A 低轨道卫星通信与地面蜂窝移动通信由竞争转为互补&lt;br />B.地面蜂窝移动通信与低轨道卫星通信相比覆盖范围小&lt;br />C.低轨道卫星通信与地面蜂窝移动通信是全球竞争关系&lt;br />D.卫星通信与地面移动通信共同构建全球星地融合网络&lt;/p>
&lt;p>重要性提出互补和构建融合网络。后者更具体&lt;/p>
&lt;/li>
&lt;li>
&lt;p>商业设计也许越来越被赋予艺术创作和欣赏的价值，但它根本的出发点和落脚点永远是把产品的特质用艺术的方式展现给顾客。如果一项商业设计不能让人联想到产品并对之产生好感，即使它再精美、再具创意，也不能算是成功的设计。说到底，广告在创意之外最重要的还是关联性，我们不想被一个美轮美奂的作品吸引，结果却看不出它与所代言的商品之间存在任何联系。 &lt;br />对这段文字概括最准确的是： &lt;br />A.独特的创意并非成就商业设计的绝对要素 &lt;br />B.对于设计来说，吸引顾客应该是第一位的&lt;br />C.成功的设计必须能够艺术地展现产品特质 &lt;br />D.商业设计应尽量强调广告与产品的关联性&lt;/p>
&lt;p>必要性提出特质用艺术展现；必要性提出特质和艺术的关联性。前者做法，后者性质。前者更具体。虽然大篇幅关联性吗？&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h5 id="观点的转换性">观点的转换性&lt;/h5>
&lt;ul>
&lt;li>观点有多种表达方式，对策仅仅是其中的一种，你不能限制出题人用什么方法去表达选项中的观点。（所以文段的观点可以转换成选项中的任何形式，得出前文的六大方式。）&lt;/li>
&lt;/ul>
&lt;p>题目：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>乡村文化复兴的关键在于外生变量，城市居民是重要的外生变量，满足和激发其对乡村文化的需求至关重要。凸显原生态的乡村自然环境和原生态的乡村人文环境，不仅可以满足城市居民的体验需要以及对乡村的浪漫想象，也有助于乡土文化的传承和保护。在乡村旅游规划中，应尽量减少人工雕琢的痕迹和外来文化的移植，通过营造和保持乡村自然环境、作物植被、聚落形态、乡村建筑、生产方式、风俗习惯，再现乡村优美的田园风光，浓郁的乡土文化，使乡村更像乡村。&lt;br /> 这段文字重在说明： &lt;br />A.乡村旅游体验的真实性需求&lt;br /> B.城市居民旅游的沉浸式需求&lt;br />C.乡村经济发展中应凸显人文性 &lt;br />D.乡村旅游规划中应重视独特性&lt;/p>
&lt;p>重要性提出满足城市居民需求；做法+意义提出凸显原生态；直接对策提出应保持原样。转换成真实性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>印刷史，特点也可以指有什么问题。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h5 id="观点的偏向性--难题">观点的偏向性 （难题）&lt;/h5>
&lt;ul>
&lt;li>当同时存在多个观点并列（存在宏观，具体，选具体），找寻作者对于&lt;strong>观点重点的倾向&lt;/strong>&lt;/li>
&lt;li>可以采用论证法（即观点一定需要&lt;strong>反复论证&lt;/strong>，论证一定用于观点）&lt;/li>
&lt;li>也可以多观点结合&lt;strong>求同&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>题目：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>全球化的时代里，语言的规范性要求越来越高，可以预见，许多小方言区将逐渐消失，“五里不同音、十里不同调”的格局将逐步改变，直到形成若干稳定的大方言区。然而，语言并非只有交际属性，它还有文化属性，每一种方言或语言，都承载了一段历史、一种文化。这种历史和文化，与特定的语言或方言形成共生关系，换成别的语言或方言表达就变了味，失去了许多内涵。假如歌曲《十送红军》没有了乡音，莫言的小说没有了高密话，赵本山小品没有了东北腔调，恐怕许多意蕴和趣味就消失了。 &lt;br />这段文字意在强调： &lt;br />A.全球化时代语言的统一和规范是大势所趋&lt;br /> B.方言相对于普通话而言具有更强的表现力&lt;br />C.保护方言在全球化背景下具有特殊的意义&lt;br /> D.历史文化与特定语言的共生关系正在消失&lt;/p>
&lt;p>重要性+顺承提出文化属性和语言或方言形成共生关系，换一种就变味。例子强调没有方言会怎么样，并且全文强调方言。因此偏向换一种就变味，要&lt;a href="http://cpc.people.com.cn/pinglun/n/2013/0716/c78779-22212250.html">保护方言&lt;/a>。D&lt;a href="https://cq.m.jinbiaochi.com/sydw/news_450931.html">只提到特定语言&lt;/a>，共生关系指的是相互依赖，而不是少了它就不行了。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>成功不是衡量人生价值的最高标准，比成功更重要的是，一个人要有丰富的内在，有自己的真性情和真兴趣，有自己真正喜欢做的事。只要你有自己真正喜欢做的事，你就在任何情况下都会感到充实和踏实。那些仅仅追求外在成功的人实际上是没有真正喜欢做的事，他们真正喜欢的只是名利，一旦在名利场上受挫，内在的空虚就暴露无遗。&lt;br />这段文字的主旨是： &lt;br />A.成功就是做好自己喜欢做的事&lt;br /> B.人生价值的最高标准难以确定&lt;br />C.追逐名利的人是得不到成功的&lt;br />D.兴趣是人们得到幸福的源泉&lt;/p>
&lt;p>直接对策提出要有内在，有真兴趣，有喜欢的事。强调喜欢的事。D望文生义了，并且没有强调兴趣。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>目前中国教育仍存在乱收费现象，收费名目繁多，家庭教育支出在家庭个人消费中比例过高，家庭子女教育负担沉重。在北京，一个孩子从小学到高中毕业，各种和教育相关的费用保守的测算超过 10 万元。&lt;br /> 这段话表述的主要观点是：（ ） &lt;br />A.目前中国教育仍存在乱收费现象&lt;br /> B.中国青少年教育目前存在的主要问题是乱收费 &lt;br />C.中国目前教育存在的问题是家庭子女教育负担沉重 &lt;br />D.中国教育目前存在的问题是教育收费名目繁多&lt;/p>
&lt;p>我感觉选C。&lt;a href="http://news.cnnb.com.cn/system/2005/12/13/005053309.shtml">原文出处？&lt;/a>，我觉得突出子女负担重，讲师认为10万突出金额的乱收费，并且AB同义，从AB中只能选A。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>一般而言，城市群之间的交通干线分布着许多城市，聚集着大量产业和人口，从而构成经济带。加强经济带规划和经济带上城市建设，是建设现代化区域发展体系和促进区域协调发展的重要方面。为此，应依托重要交通干线聚集经济要素，形成纵向或横向的经济发展轴，充分发挥其对统筹区域协调发展的作用。比如，沿海经济带、长江经济带、陇海兰新经济带和京广京哈经济带等已经集聚了大量人口、产业，城市分布也比较密集，形成了比较明显的经济发展轴，已成为承东启西、连南贯北的经济主骨架。&lt;br /> 这段文字意在说明：&lt;br /> A.经济带建设对区域协调发展具有重要意义 &lt;br />B.我国区域经济发展应以城市群建设为依托&lt;br />C.交通干线承担着聚集经济要素的重大使命&lt;br /> D.形成经济发展轴是城市群建设的长远目标&lt;/p>
&lt;p>做法+意义提出加强规划和建设；直接对策提出依托干线聚集要素，形成发展轴，发挥其（干线？发展轴？）的统筹。我觉得选C。&lt;a href="https://zhuanlan.zhihu.com/p/380866316">有争议直接跳过&lt;/a>，&lt;a href="http://theory.people.com.cn/n1/2019/0916/c40531-31353923.html">原文&lt;/a>，讲师说的例子不太好，应该依托干线才能形成发展轴，明显干线重要。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h5 id="观点的对比性">观点的对比性&lt;/h5>
&lt;ul>
&lt;li>正常做题的时候，当只有一个选项体现观点，那么直接锁定这个选项（除非选项是相悖的），不用过于去抠细节；但是如果多个选项都体现了观点，那么一定要对比抠细节&lt;/li>
&lt;/ul>
&lt;p>题目：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>近年来，随着微博、微信等网络社交媒体的迅速发展，有关食品的谣言甚嚣尘上，给人们的日常生活带来很大困扰。在日前召开的中国食品辟谣论坛上，中国食品谣言智能预警处理平台正式上线，被寄予了破解食品谣言满天飞现状的厚望。健全和完善食品安全举报的平台和机制，把举报机制纳入食品谣言智能预警处理平台，从而对食品谣言治理进行闭环管理，才能真正建立消费者对食品安全的信心。 &lt;br />这段文字意在强调： &lt;br />A.有关食品的谣言甚嚣尘上，辟谣预警平台应运而生 &lt;br />B.食品安全谣言泛溢，建立举报机制已经刻不容缓 &lt;br />C.治理食品安全谣言，不能仅仅依靠辟谣预警平台 &lt;br />D.治理食品安全谣言，须先重视其举报平台及相应机制&lt;/p>
&lt;p>提醒自己，仔细阅读，平台是处理平台，机制是举报机制。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>中国综合实力的增强，是中国模式创造的世界奇迹。而中国模式又是中国传统文化的产物，是中国传统文化智慧在当今中国的升华。2008 年金融危机后，世界各领域的“中国元素”在不断增多，并不断被越来越多的各国民众所接纳。虽然这种“中国元素”在相当大程度上是通过中国经济实力在发挥作用，但是支撑中国经济发展的却是传统文化因素。传统的人文精神，使“中国元素”在更广阔的领域内逐渐展现出更加令人瞩目的价值。&lt;br />这段文字意在说明： &lt;br />A.不断创新中国模式才能推动中国综合实力的逐步提高 &lt;br />B.应充分发挥国内雄厚的文化资源优势以打造文化强国 &lt;br />C.“中国元素”的广泛传播有助于中国国家形象的提升 &lt;br />D.文化软实力对提高中国在世界的影响力不可或缺&lt;/p>
&lt;p>重要性提出文化的重要性；转折提出本身观点文化是经济的支撑。B是用文化打造国家，有点做法的意思。D是指出文化的重要性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>临床医学教授格林斯潘认为，儿童的自我意识发展完全取决于父母与孩子的同理心关系，只有当父母能够持续、连贯、准确地读懂幼儿的情绪状态并做出有效回应时，孩子才能学会以同样的方式去回应。这种同理心的联系，拓展了孩子的心智，帮助他走进身边的情感与社交世界，给予他温暖和喜悦，而这正是培养信任所需要的。这种联系也带给孩子以自信，相信自己可以对他人产生影响，相信自己的意向也可以通过互动的方式，得到他人的积极回应。&lt;br />这段文字意在强调：&lt;br /> A.父母的情绪回应对孩子自我意识发展至关重要 &lt;br />B.同理心是儿童获得智力与情感发展的坚实基础&lt;br /> C.儿童的自我意识发展离不开与父母的积极互动 &lt;br />D.准确地识别儿童的情绪状态是父母的核心任务&lt;/p>
&lt;p>他者提出父母与孩子同理心关系，具体是父母孩子互相回应。这种同理心的联系扩展前文的互相回应。主要强调有互动，有两个人。B只是说明同理心的重要性，没有说这种联系，这种互动。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h5 id="主语及宏观限定的秒杀">主语及宏观限定的秒杀&lt;/h5>
&lt;ul>
&lt;li>主语及宏观限定是属锦上添花作用的东西，但是有时候我们也可以反其道而行之，用其锁定选项，以达到秒杀的效果&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>面对老城区面积大、老龄人口多的“两老”问题，某市经过近10 年的创新探索，走出了一条全领域、全局性、成体系、成规模的“睦邻家园”建设之路。目前，该市内已建成60个睦邻中心，形成了“1510”睦邻服务圈：居民步行 15 分钟就能到达一个睦邻中心，每个睦邻中心至少有 10 个以上服务项目。用党建联盟“大联动”，打造“大睦邻”社区格局，使高档社区和老旧小区之间的门打开了，为居民共享公共设施提供了新思路。 &lt;br />最适合做这段文字标题的是（ ）。 &lt;br />A.睦邻建设，老城区更有新服务 &lt;br />B.创新建设，覆盖大面积的城区&lt;br />C.幸福养老，社区公共设施再上新 &lt;br />D.打通门户，社区家园实现“大联动”&lt;/p>
&lt;p>他者提出睦邻之路；做法+意义提出党建联动，打造睦邻。D主语应该是党建，也不对。强调睦邻+主语是老城区。&lt;a href="http://m.xinhuanet.com/2020-11/01/c_1126684153.htm">原文&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="脉络剖析-提升">脉络剖析-提升&lt;/h3>
&lt;h4 id="脉络的顺承">脉络的顺承&lt;/h4>
&lt;ol>
&lt;li>顺承后的内容重要。见基础部分。&lt;/li>
&lt;li>顺承后的内容不重要。见基础部分。&lt;/li>
&lt;li>逐步引出。逐步引出是常见的一个行文脉络，其特点是一步一步引出想要表达的内容，是一种常见的且极其顺畅的行文脉络
&lt;ol>
&lt;li>
&lt;p>牡丹和玉兰都不会在正月里开花，但是《岁朝图》里却出现这两种花卉，并且都代表“玉堂富贵”的意思。古人为了让这些花不按时令盛开，想到了一个办法，叫唐花，有时也写成火字旁的“煻”，煻就是烧火的意思，类似我们今天的温室技术。冬天在温室里加温，催花早放。这样的技术其实在汉代就已经有了，不过在汉代的时候更多是为了满足皇帝冬天吃蔬菜的需求。 &lt;br />这段文字意在说明： &lt;br />A.《岁朝图》里牡丹和玉兰花的象征意义&lt;br /> B.“唐花”这一专门术语的由来以及含义&lt;br />C.我国古代已经出现了实用的温室技术&lt;br /> D.温室技术源于皇帝冬天吃蔬菜的需求&lt;/p>
&lt;p>牡丹-&amp;gt;唐花-&amp;gt;温室技术-&amp;gt;在汉代就有了。“不过”是弱转折，并且没有说源于。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>顺承中的代指+总结。在脉络顺承的过程中，写作的人为了引出想要论述的名词，往往会一开始拆开讲解，所以可以利用这一点，让写作的人帮你总结
&lt;ol>
&lt;li>
&lt;p>想知道人如何感受、思考、判断，但又无法看到大脑怎样作业，大脑就成了一个无法打开的黑箱。给这个黑箱输入一个刺激，通过分析输出的变化来推测其内部工作的过程，这便是利用黑箱方法从事研究的基本逻辑。它至今在心理和行为研究中占统治性地位。其应用的极端形式是把人脑和计算机进行对比。其实通过“输入——输出”的变化来解释大脑的研究方法是不得已之举。但凡对输入到输出的变化有合理化解释的模型，便可以被认为是真的。但这类解释与大脑真实活动吻合的程度是难以充分证明的。 &lt;br />这段文字意在（ ）。&lt;br /> A.说明使用黑箱方法进行大脑研究是有先天缺陷的&lt;br /> B.介绍黑箱方法的基本逻辑和原理&lt;br />C.批评将人脑和计算机对比的方法过于机械、牵强 &lt;br />D.呼吁大脑研究应引进新的技术和方法&lt;/p>
&lt;p>D过度延伸了（但有些题目貌似也可以过度延伸？）。脉络：黑箱基本逻辑-&amp;gt;方法的地位-&amp;gt;对比-&amp;gt;不得已之举。最后一句观点：黑箱难以解释真实活动。①交代了一下黑箱方法的大背景，是一种很重要的方法，②是作者观点，他认为黑箱方法虽然很厉害，但是如果研究大脑的话还是不够准确&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h4 id="偏正">偏正&lt;/h4>
&lt;ul>
&lt;li>什么叫偏正？即xx的xx，如好吃的水果、我最爱的电影等&lt;/li>
&lt;li>偏正的特点？ 具有宏观高度概括性&lt;/li>
&lt;li>类偏正：转换为偏正的非偏正形式，如：如何长高=长高的方式方法&lt;/li>
&lt;/ul>
&lt;h5 id="偏正的展开性">偏正的展开性&lt;/h5>
&lt;ul>
&lt;li>既然偏正有宏观概括性，那么我们怎么对其进行微观还原呢？&lt;/li>
&lt;li>偏正的展开一：精讲（即将一个主体讲清楚，全文或重点围绕）&lt;/li>
&lt;li>偏正的展开二：数量（即将多个主体罗列讲出，每一个主体不一定全文或重点围绕）&lt;/li>
&lt;li>tips：研究人员发现，实验结果展示，不是例子&lt;/li>
&lt;/ul>
&lt;p>题目：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>每个城市都有一个“最优规模”，它取决于城市规模正反两个效用的相互对比。正面效用主要是城市的集聚效用，负面效用则包括交通拥堵、环境污染、房价高昂、基础设施不足等。经济集聚在提高劳动生产率的同时，也会使城市的土地和住房价格上涨，企业的生产成本和居民的生活成本均会有所上升。此外，城市的拥挤、污染等问题都会抵消城市扩张带来的好处。最终，只有当一个城市所带来的正效应超过其生产或生活成本时，企业和居民才会留在这个城市。相应地，城市的最优规模就是最大化劳动生产率的规模。 &lt;br />这段文字主要介绍（ ）。 &lt;br />A.为何城市应该保持动态平衡 &lt;br />B.什么是城市的最优规模&lt;br />C.城市发展受资源环境的限制 &lt;br />D.要防止城市过分集中的情况&lt;/p>
&lt;p>最优规模取决于正反-&amp;gt;介绍正反-&amp;gt;正反影响-&amp;gt;最终-&amp;gt;相应地，进一步总结什么是最优规模。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>军事指挥员在未来战场上的谋优制胜能力取决于其军事思维发展水平，而要形成良好的军事思维能力，必须把战争制胜机理搞透。不同的战争形态，遵循不同的制胜机理，需要不同的思维方式。凡是罔顾军事实践发展、囿于陈旧观念的军队，必然会在战争中受到惩罚。事实证明，按照机械化条件下作战方式培养出来的指挥员，如果固守传统思维，是不能打赢信息化战争的。不清楚未来作战的制胜机理，就不能在实战化训练中及时增添反映未来作战的新要素、新内容、新手段，导调就只能在“老一套”上转圈圈，就无法引领参训官兵确立符合未来作战需要的思维。 &lt;br />这段文字意在强调： &lt;br />A.信息化战争对参战人员提出的新要求&lt;br /> B.提升指挥员军事思维发展水平的途径&lt;br />C.培养方式对提升军事指挥员素质的影响 &lt;br />D.研究战争制胜机理对军事指挥员的意义&lt;/p>
&lt;p>必要性+否定性对策提出战争制胜机理重要，直接对策+做法+危害给对策提出不同思维方式，不能固守思维。B的途径很好的展示了数量展开，途径包括机理和思维。D的意义不能提出思维。&lt;a href="http://www.81.cn/jfjbmap/content/2018-07/05/content_210192.htm">原文&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h5 id="偏正的修饰及总分性">偏正的修饰及总分性&lt;/h5>
&lt;p>偏正是由两部分组成，A的 B，A与B的地位其实是不同的，这里分成两种情况：&lt;/p>
&lt;ol>
&lt;li>修饰性偏正：A对B是修饰、形容的关系。如：晴朗的天空，独家的课程等，A与B同时出现时，B比A更重要&lt;/li>
&lt;li>总分性偏正：A与B是总分关系。如：考上公务员的志向，攀登高峰的勇气等，A与B都很重要，A具体，B宏观总结&lt;/li>
&lt;/ol>
&lt;p>题目：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>从特定意义上说，决策的过程就是抢抓机遇，将可能性变为现实的过程。机遇从来都是公正的，机遇一旦到来，就看谁能审时度势，及早地发现它，抓住它；能否抓住它，又关键看谁具有立断立行的智慧和勇气，凡是决策，没有不存在风险的，若想等到有百分之百的把握再拍板，恐怕时机早已逝去了。&lt;br /> 这段文字主要说明： &lt;br />A.应该掌握时机果断决策以免错失机遇&lt;br /> B.决策者的智慧和勇气是决策成败的关键&lt;br />C.有了充分的把握再决策已丧失最好的时机&lt;br /> D.决策者主要考虑如何将可能性变为现实&lt;/p>
&lt;p>必要性提出立断立行的智慧和勇气；做法+危害提出不能百分百再决定。C是充分，不符合完全。B是没有强调智慧和勇气，而是强调立断立行。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h5 id="偏正的选项反推">偏正的选项反推&lt;/h5>
&lt;ul>
&lt;li>当我们无法确定一个选项是否是文段正确答案时，可采取偏正的选项反推，逆向验证这个选项是否是正确答案。&lt;/li>
&lt;/ul>
&lt;p>题目：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>物质都是由分子、原子构成的，原子又包括核外带负电的电子和带正电的原子核。当物质温度过高或者因为其他原因，核外电子吸收能量，摆脱了原子核的束缚，成为自由电子，物质就变成了自由电子和带电离子，这种状态下的物质就被叫做等离子体。火就是以等离子体的形态出现的，这是物质的第四种形态，看起来和气体有些像，因此也被叫做超气态。火是物质燃烧过程中所进行的强烈氧化反应，其能量以光和热的形式释放。换句话说，火其实是能量的一种存在形式，是氢、碳、氧和其他物质混合而成的。如果想生火，可燃物、足够高的温度和氧化剂缺一不可。 &lt;br />这段文字主要介绍的是： &lt;br />A.火的主要特点 &lt;br />B.火的生成条件&lt;br /> C.火的根本性质&lt;br />D.火的存在状态&lt;/p>
&lt;p>B只最后讲了，不符合偏正精讲和数量。C一直强调是xx是xx，数量展开&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="转折的剖析">转折的剖析&lt;/h3>
&lt;ul>
&lt;li>转折是中心理解错误的重区，很多学过机构理论的同学，对于转折过于看重，有时候直接凭借局部的转折秒选答案。会导致有时候能做对，有时候又做不对了，归根到底是转折有局部性。&lt;/li>
&lt;li>A但是B，在这一句话中，作者确实是强调B的，如果这一句话恰好是观点，那么他就是答案。但是很多时候，B并不是观点，所以还是要具体题目具体分析。&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>强转折&lt;/p>
&lt;ul>
&lt;li>即前后话题转折意味浓厚&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>辩证是有好有坏才是辩证。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>弱转折&lt;/p>
&lt;ul>
&lt;li>仍有转折作用，但是不强烈，&lt;strong>倾向于补充说明&lt;/strong>&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>人体严密的免疫防御系统，会在细菌入侵时引起炎症反应，白细胞和大量“防御斗士”对病原体展开攻击，防御的一方通常会胜利。理论上讲，“刺激”消除后，炎症反应会逐渐消失，组织回到正常状态。但在某些特定情况下，炎症依然会持续，这种低度炎症不像通常的炎症那样可以明显感觉到它的存在，其更像人体内未被完全熄灭的“火苗”。机体通过炎症反应抵抗病原体的过程，保障了人类的生存，但是科学家发现，这种低度炎症会缩短生命，促进许多年龄相关性症状，如认知衰退、神经变性、动脉粥样硬化等。不过，引起和维持这些变化的机制，目前尚不能明确。 &lt;br />这段文字主要介绍： &lt;br />A.人体免疫系统的防御机制&lt;br /> B.低度炎症的发生机制与影响&lt;br />C.细菌对人类生存的影响 &lt;br />D.年龄相关性症状的研究现状&lt;/p>
&lt;p>做法+危害提出低度炎症会缩短生命。并且两个但都是好转折成坏，强调低度炎症的影响。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果能够做好南极生态环境的承受力评估，并严格执行有关规定，南极旅游造成的生态影响就可以得到有效控制。因为与南极大陆极为广袤的地域相比，游客活动的地域仅为总面积的 3%左右。而如何管理好长期设在南极的科考站，才是更为棘手的问题，尤其是一些被废弃的科考站，已对南极生态环境造成了新的威胁。 &lt;br /> 这段文字意在强调（ ）&lt;br /> A.南极生态环境评估的意义&lt;br /> B.南极生态旅游的发展前景&lt;br /> C.南极生态环境管理机制的必要性 &lt;br /> D.南极科考站对当地生态环境的影响&lt;/p>
&lt;p>重要性提出要做好承受力评估；本身观点提出科考站更棘手。强调科考站，&lt;strong>尊重原文&lt;/strong>。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h3 id="地位的感知">地位的感知&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>文段地位&lt;/p>
&lt;ul>
&lt;li>两者（多者）&lt;strong>地位相当，反复联系&lt;/strong>&lt;/li>
&lt;li>一个文段里面A与B反复的出现，互相联系，两者都是十分重要的，常见的错误选项就是择一而谈&lt;/li>
&lt;li>什么叫做高频词？要注意局部性，参考弱转折。&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>民众是否爱好学术，直接影响到学术本身的升沉；而学人不唤起国人对学术的自觉，“文德”不能与民分享，则“民德”就会堕落，“文德”本身也会变成无源之水、无根之木，也就没了提升的基础。为了使“文德”更好地转化为“民德”，蔡元培提出了以大学为社会文化中心的主张。&lt;br /> 这段文字意在说明： &lt;br />A.大学是“文德”的中心 &lt;br />B.“民德”是“文德”的本源&lt;br />C.“文德”与“民德”的双向关联&lt;br /> D.“文德”对“民德”有提升作用&lt;/p>
&lt;p>他者经验提出以大学为社会中心。但是选项没有，从文段地位看到民众影响学术；文德影响民德。两者互相影响。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>进项的地位感知&lt;/p>
&lt;ul>
&lt;li>当选项出现多个名词的时候，其重点倾向往往是不同的，可以利用选项中的地位差异进行排除&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>网红效应。C的&lt;strong>区别&lt;/strong>应该是两者地位相当，都占有一定文段才能选。&lt;/li>
&lt;li>多元化指的是有多种类型，融合是多变一。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h3 id="文段内容的展开">文段内容的展开&lt;/h3>
&lt;ul>
&lt;li>对于一个宏观总结性的内容，涉及到宏观到具体，涉及到两种文段的结构。由文段到选项。&lt;/li>
&lt;/ul>
&lt;h4 id="单层次展开">单层次展开&lt;/h4>
&lt;ul>
&lt;li>后文围绕同一主体，背景限定进行展开，进行更加具体的，详细的展开&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>不讲道理的话语逻辑是值得警惕的，长期处于这样的言论状态中，难免影响理性表达。好的公共表达应该是温和理性的，即便是带有情绪的话语，也应该对事不对人。言论自由是我们的权利，但说负责的话也是我们的义务，没有限度的自由只会带来人与人之间的不信任感，使得社会缺少应有的共识。公共平台是自我言语表达的载体，体现着发言者的个人素养，作为受过良好教育的现代公民，当有这份责任意识。 &lt;br />这段文字意在说明（ ）。 &lt;br />A.公共表达时更应遵守对事不对人的原则 &lt;br />B.遵循讲道理的话语逻辑是理性表达的前提&lt;br />C.公民在公共平台上应有理性表达的义务 &lt;br />D.有限的自由空间是人们建立信任感的基础&lt;/p>
&lt;p>做法+危害提出要讲道理的话语逻辑；开门见山提出公共表达是温和理性对事不对人，要有限度的自由；重要性提出公共平台是言语表达的载体，总的来说就是公共平台要注意公共表达，对事不对人（讲道理）。公共平台更具体，公共表达宏观。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>谈及中国的历史，单说“魏”或“晋”时，似无出奇之处，但如果把“魏”和“晋”连在一起说出来，一个光照千古的神奇概念就骤然出现：魏晋风度。与汉朝的敦实厚重、三国的慷慨激荡、唐朝的盛大开放、宋朝的清丽婉约不同，魏晋人物以率性不羁、旷达玄远著称。这是当时整个社会的精神时尚和审美追求，魏晋也因此而成为中国历史上空前绝后和争议最大的时代。&lt;br />这是一篇文章的开头部分，据此推测，这篇文章谈论的重点应该是（）。&lt;br />A.魏晋时期的社会环境 &lt;br />B.魏晋时期的文学成就&lt;br />C.魏晋人物及其精神风貌 &lt;br />D.魏晋风度对后世的影响&lt;/p>
&lt;p>本身观点提出魏晋风度，魏晋人物的率性不羁。反复强调人物：这是，因此。并且人物更加具体。D的偏正只有最后一句话。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="多层次展开-cab并列系列">多层次展开 (CAB并列系列）&lt;/h4>
&lt;ul>
&lt;li>当文段出现并列结构的时候，则一定会有以下内容：
&lt;ul>
&lt;li>C--总括的内容，A--并列的第一个分述，B--并列的第二个分述&lt;/li>
&lt;li>也、同时、并且、内容并列（危害，意义）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>则我们可以直接根据文段去推测正确答案，有以下的情况&lt;/li>
&lt;/ul>
&lt;h5 id="最佳答案---ab">最佳答案---A+B&lt;/h5>
&lt;ul>
&lt;li>CAB的最佳答案，就是把A和B完整地并列列出来，但是这种情况往往受限于字数，可以常用观点去锁定选项，选项反窥观点
题目：&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>孩子的学习任务较重，如果近距离用眼程度过强，持续用眼时间过长，就会造成眼睛睫状肌过度收缩且长期处于痉挛状态，导致看远处时不能很快放松、调节，产生头晕、眼胀、视力下降等疲劳症状，这种表现被称为假性近视。出现假性近视时，可通过充分休息缓解睫状肌麻痹，使视力恢复。但若长此以往，假性近视会因为眼轴增长而发展为真性近视。&lt;br />上述文段主要说明了: &lt;br />A.预防假性近视的方法 &lt;br />B.假性近视的症状及后果&lt;br />C.假性近视的原因及其种类&lt;br /> D.假性近视与真性近视的关系&lt;/p>
&lt;p>假性近视的表现-&amp;gt;解决措施但不解决的后果。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>从学理的角度来说，知识产权诉前行为保全是指为及时制止正在实施或即将实施的侵害权利人知识产权或有侵害之虞的行为，而在当事人起诉前根据其申请，由法院签发的一种禁止行为人为或不为一定行为的强制性命令。它属于知识产权侵权救济的一种暂时性措施，有着维权“及时雨”的功能。有别于传统财产权侵权，知识产权客体的易复制性与极易扩散性，使得知识产权人改变了过去倚重事后救济来保护权力的习惯。在当前国家加大知识产权保护力度、建立知识产权侵权惩罚性赔偿制度的背景下，及时有效地制止侵权比等到切实的损害结果发生后的救济更加有效。 &lt;br />这段文字主要介绍了知识产权诉前行为保全的：&lt;br /> A.救济原则与法律依据&lt;br /> B.研究背景与实施过程&lt;br />C.法律效力与赔偿策略&lt;br /> D.法理概念与司法功能&lt;/p>
&lt;p>看选项知并列。&lt;strong>不要强求观点去看整体&lt;/strong>：诉前行为的定义+其功能+其意义。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>语言和文化一样，很少是自给自足的，故词语的借用自古至今都是常见的语言现象。但当外来词汇进入一个国家后，当地民族会在适应吸收新成分的同时，不自觉地变异和改造其原貌。随着时间的推移，外来词汇会逐渐本土化，日久天长，源流模糊，体用隔断，变异迭生。一旦借词身上的“异域特征”(诸如音素、音节的构成等)在使用者的意识里淡化或消失，它们就会被当地人视为自己母语中的一部分。 &lt;br />这段文字重在说明： &lt;br />A.外来词汇对本民族语言和文化的影响 &lt;br />B.本民族语言吸收改造外来词汇的方式C.外来词汇使用的普遍性及本土化过程 &lt;br />D.外来词汇在母语中淡化与消失的原因&lt;/p>
&lt;p>词语借用常见，外来词汇本土化。B只是提高了本土化。还是要注重整体，而不是观点。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>《新青年》创刊时名为《青年杂志》，因与《上海青年》杂志的名称部分雷同，从第二卷第一号开始，正式改名为《新青年》。这次更名本是被迫与无奈之举，但在陈独秀的巧妙处理下，却成为促进刊物发展的绝佳机遇。在更名后第一期杂志的篇首，刊登了陈独秀的文章，重新定义了“新青年”这一概念，提出要以“生理心理”的标准，而非“年龄”来区分新旧青年。这一期杂志还刊登了一则通告，告知读者杂志更名事宜。变被动为主动，赋予“新青年”三个字鲜明的时代意义与先锋的思想价值，也让《新青年》有了更加精准的办刊定位。&lt;br />这段文字中的“巧妙处理”指的是： &lt;br />A.精准定位受众，激发情感共鸣 &lt;br />B.采取差异策略，力求独树一帜&lt;br />C.明晰用户心理，精准投放内容 &lt;br />D.借助事件传播，创造全新概念&lt;/p>
&lt;p>重新定义概念，告知更名，变被动为主动的结果。A延伸了，D看到概念反推传播。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>表并列：不仅如此、也、选项并列、并且&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h5 id="选c">选C&lt;/h5>
&lt;ul>
&lt;li>C即带有高度总括性的内容，可以概括A与B, 当没有A+B的完美答案时，选C
题目：&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>我国在经济快速发展的同时，培育和形成了全球少有的超大规模内需市场。与小规模经济体相比，超大规模经济体在全球经济运行中通常发挥着“锚”的作用。改革开放以来，我国之所以能够成功应对亚洲金融危机、国际金融危机等的冲击，一定程度上就得益于此。另外，超大规模市场的多样性意味着更强的内部稳定性。产业发展、区域发展的差异性可以减少冲击的影响，局部的内部冲击不易在全国形成共振效应；部分行业、部分区域发展面临困境，并不会对宏观经济总体稳定产生巨大冲击。 &lt;br />这段文字意在说明： &lt;br />A.我国既是经济全球化的受益者也是贡献者 &lt;br />B.多措并举对保障内需市场稳定有重大意义&lt;br />C.超大规模市场有助于我国经济保持稳定 &lt;br />D.超大规模经济体助力全球经济平稳运行&lt;/p>
&lt;p>主语是超大规模内需市场。锚的作用，我国能应对全球危机的冲击，我国内部稳定。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>农业正在向着多元化的方向发展，如今思考农产品的生产，就要一定程度上跳脱“非涨即跌”的二元思维。市场规律固然重要，而农产品市场的细分领域实际上还未大量开发。如果能够针对这些需求来生产具有特色的农产品，就能一定程度上摆脱农产品价格波动的困扰。从宏观角度说，农产品价格短期内波动的本质原因是农产品产能的集中释放，而其关键因素是农产品的供给量大，品质相似。理解了这一层就可以发现，其实面对的问题并不完全是农产品市场价格的起伏不定，而是产业结构、生产方式需要深度调整。&lt;br />这段文字意在（ ）。 &lt;br />A.提出应对农产品价格波动的思路 &lt;br />B.分析农产品市场的供需关系&lt;br />C.阐述农产品细分市场的开发前景 &lt;br />D.揭示农业多元化发展的原因&lt;/p>
&lt;p>问题：价格波动。做法：生产特色产品，产业结构、生产方式调整。问题+做法，优先做法，但是选项没有，选问题。A可以偏正展开&lt;/p>
&lt;/li>
&lt;li>
&lt;p>实现技术要素高效配置是高标准市场体系建设的战略使命。技术要素市场化改革为建设高标准市场体系带来内生动力。发展完善技术要素市场，对现有市场体系提出了更高要求，例如需要更加健全的产权保护制度，更加公平的市场竞争环境，更为成熟的劳动力、资本要素市场以及更加包容的市场监管。此外，由于市场管理与创新管理的部门分割，技术要素市场化改革必然要求高标准市场体系建设要着力解决深层次的体制机制障碍、更加有效地统筹市场体系与创新体系的关系、协调科技与经济社会发展的关系。&lt;/p>
&lt;p>重要性提出技术要素是战略使命；技术要素要求市场体系，要求高标准市场体系。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>目前，我国自主选育品种播种面积占 95%以上，良种对粮食增产贡献率已超过45%，为粮食连年丰收和重要农产品稳产保供提供了关键支撑。然而，我国种业自主创新水平与发达国家还有差距，一些品种、领域和环节会影响农业发展速度、质量和效益。这就要求我们加强农业种质资源保护利用，加快推进关键核心技术攻关，缩小玉米、大豆等品种和国际先进水平的差距，确保重要农产品种源自主可控。同时，打通种子生产、加工、销售、技术服务等环节，逐步完善产学研用深度融合的创新链条，加快提升种业产业化水平，让一粒粒好种子长成农民的致富希望。 &lt;br />最适合做这段文字标题的是：&lt;br />A.打造种子这枚农业“芯片” &lt;br />B.要让创新为中国农业赋能&lt;br />C.种出农民致富的新希望 &lt;br />D.种业产业化发展的启示&lt;/p>
&lt;p>种业指的是种子，观点是直接对策。B只谈到农业。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h5 id="选a或b">选A或B&lt;/h5>
&lt;ul>
&lt;li>当文段出现并列结构，选项却没有（A+B) 或者C，不可直接用片面排除，可以勉强去选A或B。&lt;/li>
&lt;li>本质上仍然是以人为本。
题目：&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>二十世纪六七十年代，世界上香菇、木耳、灵芝等食用菌和药用菌人工栽培基本都以木材为原料，在我国每年仅栽培香菇一项就要砍伐阔叶林1000 万立方米以上，从而产生了严重的生态问题和“菌林矛盾”。由此我国开始了“以草代木”栽培食药用菌研究，1986年，终于成功培育出可做栽培食药用菌培养基的草本植物——菌草，并逐渐摸索出一套运用菌草栽培食药用菌和生产菌物饲料、菌物肥料的综合技术。菌草技术开辟了“菌”与“草”交叉科学研究与应用新领域，为保护生态环境，促进可持续发展开辟了新途径。&lt;br />这段文字意在说明，菌草技术： &lt;br />A.有助于解决“菌林矛盾”的难题 &lt;br />B.是我国食药用菌栽培的原创技术&lt;br />C.为食药用菌栽培提供了新的思路 &lt;br />D.为保护阔叶林资源开辟了新途径&lt;/p>
&lt;p>问题：生态矛盾+菌林矛盾。对策：食药用菌研究。C比较片面，没有提到解决生态问题，自己猜的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>要推动老旧小区的适老化改造和无障碍环境建设，关键是提升整个社会对适老化改造的思想认识，实现适老化改造特别是居家适老化改造“心理无障碍”。要多渠道、全方位宣传引导居家适老化改造的政策与价值，转变老人、子女和社会对居家适老化改造的认知；同时，要通过养老服务中心、居家养老服务中心等载体，打造居家适老化改造样板房，强化直观感受，转变老人的传统观念，让老人逐步形成“为养老服务买单”、让子女形成更加关注父母居家养老环境的社会意识，提升适老化改造的家庭主观能动性。 &lt;br />这段文字强调要： &lt;br />A.平衡主体利益，因地制宜推动适老化改造 &lt;br />B.统筹各方资源，激活适老化改造的多元力量&lt;br />C.补位标准规范，提升适老化改造的品质与效率 &lt;br />D.加强宣传引导，做到适老化改造“心理无障碍”&lt;/p>
&lt;p>必要性提出对适老化改造的思想认识；对策提出要宣传，打造样板房。以人为本！符合内容！&lt;/p>
&lt;/li>
&lt;li>
&lt;p>语言学是研究语言结构模式与演化规律的学科，对“模式”与“规律”的探求是语言学与其他科学的共同目标。然而，光有科学的目标还远远不够，演绎与归纳、定性与定量、描写与解释、假设与检验等现代科学在方法论上的共同特征，正是我国传统语言学所欠缺的。与此同时，中国语言学还面临着国际化问题，我们在国际语言学学术共同体中的声音还很微弱。造成这种局面的原因，并不能完全归结于研究对象的不同，以及国际学术语言是英语的语言藩篱，也存在研究理念与研究方法的问题。&lt;/p>
&lt;p>不能归结于xx，以及xx，也（而是）存在方法的问题。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h5 id="极小点并列">极小点并列&lt;/h5>
&lt;ul>
&lt;li>当在大量的并列中，取并列中的一些小点，是正确选项的概率很小
题目：&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>我们要结合我国发展需要和可能，做好我国数字经济发展顶层设计和体制机制建设。要加强形势研判，抓住机遇，赢得主动。各级领导干部要提高数字经济思维能力和专业素质，增强发展数字经济本领，强化安全意识，推动数字经济更好服务和融入新发展格局。要提高全民全社会数字素养和技能，夯实我国数字经济发展社会基础。 &lt;br />这段文字意在说明：（ ）。 &lt;br />A.数字经济事关国家发展大局 &lt;br />B.要把发展数字经济自主权牢牢掌握在自己手中&lt;br />C.数字经济影响程度之深前所未有 &lt;br />D.数字经济有利于推动各级资源要素快速流动&lt;/p>
&lt;p>观点：数字经济很重要。B太片面了，只是极小点，甚至都没讲。C没有谈影响。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h5 id="特殊题型">特殊题型&lt;/h5>
&lt;p>题目：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>以英国为例，据英国全国志愿组织理事会统计，受财政紧缩政策影响，2012年度政府对慈善组织的资助减少了 13 亿英镑，较前一年下降8%。为此，英国的慈善组织不得不以更加“企业化”的管理模式来应对资金困局。在开源方面，主要是拓宽筹资渠道，比如开展房屋租赁、培训课程、慈善商店等慈善性质的交易活动；在节流方面，主要举措是加强组织内部管理。因此，虽然欧洲经济大环境不好，但调查数据称，英国 2011～2012 年度的慈善组织经营性收入仍然有 213 亿英镑。 &lt;br />这段文字意在说明： &lt;br />A.慈善组织应当减少对政府的依赖 &lt;br />B.慈善组织应不断改善自身管理模式&lt;br />C.开源和节流对慈善组织管理缺一不可 &lt;br />D.经济形势对慈善组织的发展影响较大&lt;/p>
&lt;p>C不够具体，应该时拓宽渠道、加强管理。C管理模式AB两个方面。不要想当然。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>我国科普工作虽然取得了很大进步，可是科普读物，无论数量还是质量，与发达国家还有着数量级的差距。在一些社会关注的重大问题上，科学家更应该主动站出来讲话。要把科学语言转化为老百姓听得懂的语言，实事求是讲真话。如果连科学家都不愿意、不敢讲话，任由真相缺失、谣言扩散，那么势必会引起公众的恐慌和困惑。&lt;br />上述文字意在强调：&lt;br /> A.科普工作应该通俗化，接地气 &lt;br />B.我国科普读物数量少，质量差&lt;br />C.科学家负有做科普工作的义务 &lt;br />D.科学家应坚持求真务实的原则&lt;/p>
&lt;p>科学家在重大问题上应该主动讲真话。D没有提到主动。C可以进行偏正的展开&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h5 id="问题">问题&lt;/h5>
&lt;ol>
&lt;li>CAB和偏正的展开有什么关系？
&lt;ul>
&lt;li>CAB是文段到选项，如果文段出现并列结构，就可以用CAB把文段浓缩成选项；偏正的展开是选项到文段，知道选项是偏正模式，就可以回推文段应该是怎么样的。&lt;/li>
&lt;li>其中偏正数量的展开，回归到文段便是CAB形式；CAB形式的选C，浓缩成选项就是偏正结构&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>CAB中选A或B，这个和观点的偏向性有什么关系？具体性呢？你能总结出几种选A或B做合理情况？
&lt;ol>
&lt;li>当文段出现并列时，可以利用观点的偏向性和具体性确定重要元素&lt;/li>
&lt;li>文段中的A，B本质上是一个意思。如：提升灵活性，降低死板性&lt;/li>
&lt;li>观点是CAB结构，选项只有一个选项体现观点，只要不相悖，也可以选&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h3 id="对比的剖析">对比的剖析&lt;/h3>
&lt;ol>
&lt;li>古今时间对比
&lt;ul>
&lt;li>用时间标志词去体现这种差异性&lt;/li>
&lt;li>常见的标志词：过去...现在...，A时期...，B时期不一样了；现在...将来...等&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>很长一段时间，中国文学海外传播主要依赖有规模有体系的经典作品译介，这些译介在推动中国文学走出去的过程中发挥了重要作用，但有时也会出现译介书目和目标读者的喜好、接受度之间有差距的情况，从而影响译介和推广的效果。而如今，类型文学海外传播则更注重市场需求，有时候甚至表现出从“译出”到“译入”的变化，即不是先译好了再推送，而是对方主动译入。据称，中国网络小说的许多海外读者因为等不及人工翻译，便通过机器翻译来实时阅读中文更新内容，这种如饥似渴的阅读需求是中国文学走出去的根本动力。&lt;/p>
&lt;p>以前文学传播的问题，现在解决办法是注重市场需求&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>时间顺承与古今时间对比
&lt;ul>
&lt;li>文段出现多个时间点时，不可盲目判断其为时间对比&lt;/li>
&lt;li>时间顺承特点：A时间点...B时间点...C时间点...，展现一个事物顺着时间发展&lt;/li>
&lt;li>时间对比特点：A时间点...B时间点有差异，展现一个事物的前后差异性&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>在古代，对未知世界的恐惧感不只属于儿童。中世纪的绘图师们在绘制地图时，并不把未知地带留为空白，而是画上海蛇和想象中的怪兽，并标记“记外有龙”。几个世纪以来，探险家们穿越大洋，攀登高山、逐渐在地图上把这些想象替换成了真实的标记，现如今，我们可以从外太空拍摄照片、感叹地球之美。通信网络造就了“地球村”，世界变得越来越小了。&lt;br />这段文字的核心观点是： &lt;br />A.科技让世界更美好 &lt;br />B.知识是治疗恐惧的良药&lt;br />C.读万卷书，行万里路 &lt;br />D.吾生也有涯，而知也无涯&lt;/p>
&lt;p>古代，绘图师害怕，几个世纪，探索后不害怕，现在，觉得地球美丽，变小了。害怕-&amp;gt;不害怕-&amp;gt;欣赏。主要是不恐惧了选B，A是时间对比可以选。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>新旧（传统）事物对比
&lt;ul>
&lt;li>文段常用旧的/传统/通常的事物，引出目前新的事物，仍然是对比引出差异性&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>传统理论认为，人类祖先由于气候变化、树木减少，被迫离开树栖环境，选择在地面上直立行走。一项最新研究则认为，早期人类直立行走源自现今非洲东部和南部崎岖山脉地区，该地形是上新世时期火山喷发和构造板块移动形成的。人类的祖先被岩石地形和峡谷所吸引，这里可提供良好的庇护栖息地，同时有机会诱捕猎物；这种环境要求早期人类具备直立行走和攀岩的能力，因此人类祖先最终逐渐进化为两足直立行走。&lt;/p>
&lt;p>最新研究认为：人类是被地形吸引而进化为两足。没有重点提到因为地形变化，而是因为地形的优势。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>差异主体对比
&lt;ul>
&lt;li>文段常用两个具有差异性的主体进行对比，常见的有外国对比中国；动物对比人类等，主要体现对主体的归属感&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>原产于美洲西部的鲁冰花，英文名为“Lupin”，在希腊文里是悲苦的意思，通常生长在贫瘠的田野、乡间的小路，生命力强。而在我国台湾高山地区，鲁冰花常跟茶树种在一起，据说可以帮助茶树健康生长，并且可以使茶叶芳香甜美。另外，鲁冰花死后肥沃了土地，让茶树长得更加茂盛。鲁冰花这种坚忍不拔、大公无私、“化作春泥更护花”的精神，正如同世间最真挚的母爱。所以，它可以用来象征母爱，作为母亲节儿女献给母亲最好的礼物。&lt;br />这段文字意在说明： &lt;br />A.鲁冰花成为母爱之花的缘由 &lt;br />B.鲁冰花的原产地及生长特性&lt;br />C.鲁冰花为何常与茶树种在一起 &lt;br />D.鲁冰花在中西文化中的不同含义&lt;/p>
&lt;p>重点强调我国，对国家的归属感。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>伽马射线是人们认识原子核的“探针”。不同于传统的离线伽马谱学测量，在束伽马谱学测量是在大科学装置的加速器上，利用多探头多角度的伽马探测器组成的高分辨伽马探测阵列开展在束伽马谱学测量，并进行相关核科学的前沿课题研究，是目前世界上各大核物理实验室均采用的重要研究手段。我国在在束伽马谱学研究平台整合与升级方面已迈出关键一步。通过多方合作，共建的新探测阵列探测器单元数量由 15 个提高到50 个，将进一步提升整个实验终端探测能力，预计将会在核结构研究领域取得更丰富更高水平的研究成果，同时该探测阵列也将应用于核反应、核天体、核技术应用等领域。 &lt;br />这段文字主要讲的是（ ）。 &lt;br />A.在束伽马谱学测量的应用领域非常广泛 &lt;br />B.我国开始布局建设新一代伽马探测阵列&lt;br />C.在束伽马谱学测量对于核物理研究意义重大 &lt;br />D.伽马射线在用于原子核研究方面又有新进展&lt;/p>
&lt;p>重点强调我国的在束伽马谱学研究平台---探测阵列探测更进一步。C核物理片面，还有核应用。D没有我国。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h3 id="三大文段">三大文段&lt;/h3>
&lt;h4 id="因果类文段">因果类文段&lt;/h4>
&lt;ul>
&lt;li>什么叫因果类文段？文段的目的是给一个事物探寻发生的原因，为因果/果因结构，文段一定要是大篇幅重点谈论原因的才可归为因果文段。&lt;/li>
&lt;/ul>
&lt;h5 id="选项优先性">选项优先性&lt;/h5>
&lt;ul>
&lt;li>果因阐明-&amp;gt;果的因-&amp;gt;因果并列-&amp;gt;果因单论&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>最佳答案：果因阐明
&lt;ul>
&lt;li>即讲因果完全给你说清楚。具体结果+具体原因&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>变与乱似乎是一对孪生兄弟，凡是剧烈变动的时代，往往也是混乱失序的时代。不过，变与乱的结果往往差别很大：有些社会最终走过动荡的变革时期，逐步确立了新的体制和秩序；有些社会则缺乏变革因素的增量积累机制，无法形成新的体制和秩序，只能通过恢复旧秩序而结束混乱局面。晚明时期，几乎各个领域都出现了新因素、新趋向，在带来生机与活力的同时，也加剧了社会矛盾、贫富分化、政局动荡、道德失范。换句话说，晚明时代虽然出现了一些不可逆的新变化，却未能引发根本性的制度变迁，终于在变与乱的交缠中走向灭亡。&lt;br />这句话意在说明： &lt;br />A.变乱交织、无力变革是明朝覆灭的原因 &lt;br />B.变革往往带来混乱，同时也蕴含生机&lt;br />C.晚明的灭亡具有历史的必然性 &lt;br />D.新旧制度往往是相互交替、互为因果的&lt;/p>
&lt;p>变与乱的结果差别很大：好/坏-&amp;gt;晚明在变乱交缠中灭亡。D指的是相互，文中只是新到旧，旧到旧，并未提到互相转换。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>次选答案：果的因
&lt;ul>
&lt;li>思考一下，为什么果的因次选？因为能进行偏正的展开&lt;/li>
&lt;li>套路题，看是否是因果题，看结尾有无顺承：由此、于是、从而、引出，看选项是否有主体的原因。
&lt;ul>
&lt;li>
&lt;p>过去的营销是漏斗效应，传统媒体上的广告让受众从很宽的漏斗口进入，买单的到了漏斗的底端。网红的营销则是涟漪效应，每个波纹和波纹之间会有碰撞，影响面更宽，影响的深度更深。网红通过树立个人品牌、贯彻自我的生活方式吸引粉丝，粉丝可能对传统广告是排斥的，但是乐于模仿偶像而消费。在社交平台上，粉丝之间的沟通渠道打通了，他们甚至不仅仅购物，而且乐于把自己的喜好传播给别人，每一次点赞、评论、转发，涟漪就扩散一次。&lt;/p>
&lt;p>网红营销的涟漪效应让其影响广泛。与套路不太一样。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>因果并列
&lt;ul>
&lt;li>当没有以上两个选项的时候，可以退而求其次，选择出现结果A+原因B的选项，选项不一定是在探讨两者的因果关系
&lt;ul>
&lt;li>
&lt;p>距今 200 万~100 万年前，在类人猿向现代智人进化期间，人类祖先的大脑就进化出了支持合作的功能，以支持狩猎活动。这使人类祖先前额皮层里的记忆与思考中心变得比其他灵长类动物的更发达。随着群体变得比个体更强大，大脑不断进化出管理更大群体的能力，群体之间的竞争就变得比个体之间的竞争更重要，同时拥有更多合作性个体的群体发展得更好，这一进化使得利他意识、伦理观、良知和尊严意识发展起来。&lt;/p>
&lt;p>进化出支持合作让中心更发达；进化出管理能力并让其他好东西发展起来。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>曾经，考古似乎和现代社会相隔甚远，对普通人来说有些遥不可及。近年来，随着考古发现的深入、考古手段的进步、考古知识的普及，考古不再是生僻冷门的领域，而是与每个人产生了越来越多的联系。考古和社会有什么关系？和我们有什么联系？再次审视这些问题，我们的心中有了更丰富的答案一文明的人类总是热衷于考古，就是想把压缩在泥土里的历史挖掘出来、舒展开来进行窥探，因为一个个考古新发现，能为国家和民族历史提供例证，为社会发展提供文化源泉，成为爱国主义教育载体，成为经济建设的亮丽品牌，不断增强国家和民族的文化自信。&lt;/p>
&lt;p>考公新发现的重要性或者因为考古发现所以xxx。主语是考古发现。考古发现，增强我们的文化自信：选项是发现的意义，因果并列型。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>果因单论
&lt;ul>
&lt;li>当没有以上的情况时，单独把结果或者原因拿出来，也有可能是正确答案。还是对比择优和以人为本的思维&lt;/li>
&lt;li>选结果和原因看，哪个更重要是看原因是否导致好的结果，夸原因选原因，如果结果和原因都是客观的来说选结果。看哪个更重要。
&lt;ul>
&lt;li>
&lt;p>月球是距离地球最近的天体，但是如何从地球飞到月球并不是一个简单的问题，虽然早在 30 多年前阿波罗航天员就已经登上月球，但是今天人类重返月球不能简单地重复阿波罗登月的方式。因为今天人类重返月球比当年阿波罗登月要复杂和困难，不仅飞往月球的人数比阿波罗飞行要多得多，而且人们到达月球后不是简单地进行探险和考察，而是要在月球上建造基地，要对月球进行全面的开发和利用，还要在月球上长期的工作和生活。&lt;br />这段文字旨在说明（ ）。 &lt;br />A.人类重返月球所肩负的使命更艰巨 &lt;br />B.人类重返月球所面临的环境更加复杂&lt;br />C.人类登月的目的是开辟新的生存空间 &lt;br />D.人类对月球的开发和利用尚待时日&lt;/p>
&lt;p>因为困难，重返月球不能简单的重复，主语是重返月球。A的使命可以数量展开。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>中微子是宇宙中除了光子之外数量最为众多的基本粒子，但是人类对于中微子的研究开始得却较晚，原因就在于这种粒子可以自由来去，极少与其他物质发生相互作用，因而极难探测。此前，人类根本没有觉察到这种基本粒子的存在。尽管每秒都有数以万亿计的中微子以近乎光速的速度穿过人类的身体，人类却对这些无所知觉。从概率上来说，一个中微子可以穿越一光年的铅而不发生一次碰撞。&lt;br /> 这段文字意在强调：&lt;br /> A.中微子是宇宙中数量众多的基本粒子 &lt;br />B.人类对于中微子的研究开始得比较晚&lt;br />C.中微子的运行速度快得超乎想象 &lt;br />D.中微子的存在很难被感知或探测&lt;/p>
&lt;p>观点：中微子自由来去，极难探测，导致研究较晚，文段讲的比较客观，没有强调因，所以选果。从另一个角度看：研究开始较晚，此前，人类根本没有察觉，说明现在察觉到了，D却说很难感知。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h5 id="实用技巧">实用技巧&lt;/h5>
&lt;ol>
&lt;li>抓准原因结果，对比择优
&lt;ul>
&lt;li>做题的时候，一定要清楚文段给的原因和结果是什么，往往出题人会在这里给你设置错误选项&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>近年来，随着艺术类院校、专业招生规模的扩大，艺考日渐火爆。除了部分真心热爱艺术的考生，有相当一部分是因为自身文化课分数不高，转而在高中最后一个阶段突击艺术，以求借助艺考进入对文化课要求不高的本科院校。 &lt;br />上述文字意在说明： &lt;br />A.艺术类院校录取分数线不高 &lt;br />B.艺考考生良莠不齐&lt;br />C.不是所有艺考考生都热爱艺术&lt;br /> D.艺术类院校专业招生规模扩大的原因&lt;/p>
&lt;p>A是文化课分数不高。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>借助选项
&lt;ul>
&lt;li>如果不能一眼看出来是原因类文段，可以借助选项，当选项在给你讨论原因时，可以逆向思考一下其是否为原因类文段&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>特殊题型
&lt;ol>
&lt;li>多因并列
&lt;ul>
&lt;li>文段的特征是存在多个原因的并列&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>在美国，学术界、工商界、主管部门和多数消费者倾向于认为用豆浆代替牛奶是一种更健康的选择。不过，绝大多数西方人很不喜欢豆味，所以美国的豆浆有进一步去除或掩盖豆味的操作，而中国人就会觉得这样一点儿豆浆味也没有。对奶味的偏好和对豆味的排斥，是豆浆在西方不够受欢迎的主要原因。此外，豆浆在保存过程中比牛奶容易发生聚集下沉，这也给豆浆成为牛奶那样的方便食品带来了难度。保存难度高，加上市场需求量不是那么大，导致美国豆浆的价格远远高于牛奶。 &lt;br />对这段文字的主旨概括最准确的是（ ）。 &lt;br />A.豆浆相比牛奶而言是一种更健康的选择 &lt;br />B.指出豆浆打入美国市场所必需的技术手段&lt;br />C.剖析豆浆在美国市场上价格偏高的原因 &lt;br />D.分析豆浆在西方不受欢迎的原因&lt;/p>
&lt;p>做两遍错两边。。。观点：保存难度高、市场需求小导致价格高。不受欢迎只是市场需求小的因。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对于生活在浅海的硬骨鱼类来说，鱼鳔非常重要，可以帮助其调整浮力，实现上浮或下潜。但是对于深海鱼来说，充满气的鱼鳔像是脆弱的气球，在外部巨大水压的挤压下，会炸成碎片。因此，很多深海鱼在进化过程中“舍弃”了鱼鳔这个“危险”的部件，转而依靠某些脂类提供浮力。相比于浅海中的鱼，深海鱼的骨骼和肌肉含量都比较少，脂质和胶质相对较多。此外，深海鱼骨骼中软骨的比例也远高于浅海鱼。对于深海鱼来说，这些都是为了适应深海生活所作出的必要的“妥协”。毕竟相比于骨骼和肌肉，脂质和胶质能更好地帮助鱼类对抗巨大的压力。&lt;br />最适合做这段文字标题的是： &lt;br />A.深海鱼竟是“软骨头” &lt;br />B.抗压，从鱼鳔的“断舍离”开始&lt;br />C.精通以柔克刚的深海鱼 &lt;br />D.深海压力，无法承受之痛&lt;/p>
&lt;p>&lt;a href="https://www.kepu.net.cn/ydrhcz/ydrhcz_zpzs/ydrh_2021/202111/t20211117_495805.html">原文&lt;/a>，C过度延伸了，要切合原文！！！除非没得选&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>小篇幅原因
&lt;ul>
&lt;li>文段不是看到原因，就是原因类文段的，很多时候原因只是提一下，不重要&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>唐代以前，我国产茶地区和饮茶风俗主要是在南方。到了唐玄宗开元年间，北方饮茶风俗随着佛教禅宗的兴起而盛行起来，北方盛行饮茶的风气极大促进了南方茶叶生产和南北茶叶贸易的迅速发展。当时，茶叶产量与全国人口平均消费水平都是相当高的。唐代茶叶经济的繁荣，是陆羽能够写出《茶经》的社会基础。据《茶经》不完全统计，当时已有8个道（或可称为茶产区）43 个郡、44 个县生产茶叶。 &lt;br />以上材料的中心主旨是：（ ）。 &lt;br /> A.茶文化兴起于我国的南方 &lt;br />B.茶文化的兴盛与禅宗有关 &lt;br />C.《茶经》出现的时代环境 &lt;br />D.唐代茶叶经济高度繁荣&lt;/p>
&lt;p>观点：唐代经济繁荣的是茶经的社会基础，强调前面的重要性，并且后面只是例子，不是强调茶经。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h4 id="纯问题类文段">纯问题类文段&lt;/h4>
&lt;ol>
&lt;li>选项与文段的双循环
&lt;ul>
&lt;li>当选项是问题时，文段是问题&lt;/li>
&lt;li>当选项是正面对策时，文段是问题或者对策&lt;/li>
&lt;li>当选项是反面对策时，文段是这个对策+问题危害&lt;/li>
&lt;li>当文段只是问题时，选项是问题或对策；&lt;/li>
&lt;li>当文段是对策时，选项是对策（及其转换）&lt;/li>
&lt;li>可以进行反窥观点&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>总括问题
&lt;ul>
&lt;li>当文段是纯问题文段时，出题人可能就是想考你的概括能力，即让你用精简的话语总括文段中心内容&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>要在一个本就是俗的东西上融入雅的东西，喜剧演员都深谙其道，但有的只是简单地披上了雅的外衣，有的却在孜孜以求地追求雅的内核。无论如何，大家的目的都是一致的，那就是喜剧的本质——笑。离开了这一点，喜剧也就不成为喜剧。可悲的是，有些喜剧人陷入雅俗之间，找不准自己创作的方向，既想满足俗，又想迎合雅，结果反而丢掉了喜剧的特质。&lt;br />这段文字主要批评了喜剧创作中的哪种倾向？（ ）&lt;br />A.一味迎合观众而流于庸俗 B.过分追求雅的形式而忽视了内容&lt;br />C.偏离了给人带来欢乐的宗旨 &lt;br />D.无法准确把握观众的需求&lt;/p>
&lt;p>观点：（喜剧人）陷入雅俗之间，丢掉喜剧特质。题目问到批评，可知问题类文段。文中强调果：喜剧特质（离开笑，喜剧不是喜剧；都是为了笑）。选C&lt;/p>
&lt;/li>
&lt;li>
&lt;p>当下的家庭教育中，“教育超量”与教育不足同时存在。有些家长唯恐自己的孩子“输在起跑线上”，为孩子报了多个辅导班、兴趣班，给孩子造成很重的负担。也有家长认为孩子还小，不必学什么，让孩子自由成长就行。这种自然教育的观念，与西方教育思想的影响有关。卢梭在《爱弥儿》中就讲，“要放任无为，才能一切有为”“你开头什么都不教，结果反而会创造一切教育奇迹”，卢梭的这些说法有一定的启发性，但其片面性也是显而易见的。事实上，卢梭本人也不是“按照”他的教育观念成长的。 &lt;br />这段文字意在说明（ ）。&lt;br /> A.家庭教育不应偏信、执着于某一具体理论&lt;br /> B.如何把握家庭教育的尺度始终是一道难题&lt;br />C.片面强调教育“超量”“减量”都不可取 &lt;br />D.“教育超量”与教育不足都有其生存的土壤&lt;/p>
&lt;p>观点：（家庭教育中），超量和不足同时存在。文段整体都是问题，选问题或对策。B虽然谈到问题，都不够具体，并且有对策优先对策。C包括观点提到的超量和不足。宏观限定只是锦上添花，不能直接排除。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>合理，精简解决问题
&lt;ul>
&lt;li>言语的提出对策和申论不同，不需要你动用积累、经验进行对策的细化，因为细化以后反而不满足以人为本的思想&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>调查发现，“花呗”“借呗”“京东白条”等便捷的小额借贷平台，迎合甚至刺激了部分大学生“先消费，再分期还贷”的理念，一些大学生通过负债借贷维持超前消费。与此相应，炫富、挥霍等消费行为在大学生中时有发生，“名媛”“土豪”等词语风行网络，成为个别大学生羡慕不劳而获生活的“幻想目标”。&lt;br />D.新模式下的超前消费&lt;/p>
&lt;p>D应该对超前消费进行介绍，而文段都是问题。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>双十一即将来临，很多商家推出“保价”承诺来吸引消费者，然而，保价真的靠谱吗？江苏省消保委表示，结合往年经验，商品有保价承诺也不保险。有消费者发现自己购买的商品降价了，向商家寻求补偿时被拒。客服的理由通常是，店铺和平台优惠券、限时活动以及赠品等均不在保价范围内。也有商家为了规避保价规则，下架原商品，重新上新的购买链接或者只是更改商品名称。&lt;br />下列表述契合文段中心的是（ ）。 &lt;br />A.监管部门应加大对于商家的监控力度 &lt;br />B.莫让消费者掉入“双十一”保价陷阱&lt;br />C.商家推出的保价承诺充满风险和套路 &lt;br />D.消费者根本享受不到商家的保价服务&lt;/p>
&lt;p>观点：（双十一期间）报价承诺不保险。BC都是问题，但是B有宏观限定。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h4 id="观点类文段">观点类文段&lt;/h4>
&lt;ul>
&lt;li>文段提出了作者的观点，需要熟练掌握观点提出的六大方式&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>以观解问&lt;/p>
&lt;ul>
&lt;li>即观点是为了解决问题，往往其行文脉络是引出问题+解决问题&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>当前我国正处于人口结构高速转变的时期，农村人力资源开发将需要同时面临“农村劳动力转移的难度加大”与“农村劳动力存量的整体素质趋于降低”两大问题。从农业农村发展的要求出发，今后一个时期，开发农村人力资源，优化农村人力资本结构必须着眼于提升农村人力资源的自我发展能力和辐射带动能力，通过“以点带面”加快促进农村劳动者整体素质的提高，从而有效缓解当前人力资源日益短缺的问题，促进农业农村平稳发展。&lt;br />这段文字作者主要强调的是： &lt;br />A.当前我国农村人力资源开发的问题 &lt;br />B.农村劳动者整体素质提升的策略&lt;br />C.当前农村人力资源日益短缺的问题 &lt;br />D.农村劳动力资源短缺的解决办法&lt;/p>
&lt;p>观点：优化农村人力资本结构必须。。。平稳发展。有对策就不要选问题了，排除AC。文中强调人力资源，选D&lt;/p>
&lt;/li>
&lt;li>
&lt;p>近年来我国中小学音乐课程在许多地区还是没有受到足够的重视，教材内容不能与时俱进，一些音乐教师只注重技能培养而忽略了音乐教育的主旨首先应当是“树德立志”。在教授学生一部音乐作品之前，教师首先应该理解其中所表现的道德思想，然后以多样化的形式对学生的身心进行正面教育。作为音乐教师当以此为己任，使孩子们真正热爱音乐，在他们的心灵中种下一颗真、善、美的健康种子。 &lt;br />这段文字意在强调：&lt;br />A.音乐教育应注重作品的道德教化&lt;br /> B.教师应以培养孩子真善美为己任&lt;br />C.音乐教育以强调树德立志为主旨 &lt;br />D.音乐教育的内容、主旨都需转变&lt;/p>
&lt;p>观点：（教师）应以理解德，多样化教育为己任，让孩子热爱音乐。C不是对策。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>表达观点&lt;/p>
&lt;ul>
&lt;li>文段并不给你引出问题 只是单纯表达作者的态度观点&lt;/li>
&lt;li>问题应该是合理精简，或者解决问题的对策。二者不可能都在选项中，需要进行排除。&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>美国坦普尔大学研究人员以 2500 多名志愿者为对象，利用计算机对影响未来财富的决定性因素进行排名。这些因素包括：年龄、职业、教育、种族、性别、身高地理位置以及延迟“即刻满足”的能力(自控力)等。结果显示，职业和教育是预测高收入的最重要因素，其次是所处地理位置和性别，紧跟其后的就是人的自控能力，它对收入的预测性明显超过年龄、种族和身高等因素。研究人员认为，重视儿童自控力的培养有助挖掘孩子未来的赚钱潜力。&lt;br />最适合做这段文字标题的是： &lt;br />A.性格决定命运&lt;br /> B.自控力强的人更富有&lt;br />C.财富从孩子抓起 &lt;br />D.神奇的财富猎手&lt;/p>
&lt;p>观点：重视（儿童）自控力有助于赚钱。强调自控力，成人也可以自控力培养。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>对策的合理性（难题）&lt;/p>
&lt;ul>
&lt;li>出现问题文段时， 可以去反推对策，但是对策一定要具有合理性，不能盲目推对策，此类题往往是难题&lt;/li>
&lt;li>常见的错误对策：对策不具有针对性、对策本身有误、站位错误（选项站的位子不对）等
题目：&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>成绩要求相对较低，导致部分考生视艺考为进入高等学府的“绿色通道”或迅速成名的捷径，于是扎堆报考、突击报考等现象也就随之出现。另外，由于高中教学与艺考不能有效衔接，一个巨大的艺考培训市场应运而生，但市场内部存在行业垄断、恶性竞争、干扰院校招考正常秩序等乱象，破坏了艺术类专业招生和培养的健康生态。对此，教育部门应针对时弊，对艺术类专业招生加强规范，严格入校管理，进一步完善优化招录程序。&lt;br />这段文字意在说明（ ）。&lt;br /> A.“艺考”不等于“易考” &lt;br />B.艺术类专业招生亟待规范&lt;br />C.艺术人才更需提升文化素养&lt;br /> D.教育部门应多举措促进艺考公平&lt;/p>
&lt;p>观点：教育部门对艺术类专业招生xxx。D艺考公平不对，看仔细！&lt;/p>
&lt;/li>
&lt;li>
&lt;p>长期以来，考试大纲规定了考试的内容、范围、知识点，规定了各学科知识点的考试权重，规定了各个知识点的考试题型，其“标准”明确、具体、直观，对教师教学的导向极其强烈。一方面，它缩小了国家课程标准关于各学科教学内容的范围；另一方面，它规定了各学科知识点在考试中的权重，教师的学科教学活动“做题化”“训练化”倾向越发严重。在考试大纲的这种强大的导向下，教学过程几乎“窄化”“异化”成了考试训练过程，让教育教学活动陷入应试教育的“泥潭”无力自拔。 &lt;br />这段文字意在说明： &lt;br />A.考试大纲的强导向作用亟待弱化 &lt;br />B.考试大纲的存在不符合时代要求&lt;br />C.考试大纲的出现强化了应试教育 &lt;br />D.考试大纲偏离了素质教育的要求&lt;/p>
&lt;p>观点：考试大纲强大的导向下，教学过程。。。无力自拔。A考试大纲就是用来导向的，站位不对。对策不行，就选问题咯。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>为了消灭农田里的害虫，人类发明了三万种以上的农药，虽暂时控制了虫害，但同时消灭了昆虫的天敌，消灭了蜜蜂，导致一些蔬菜瓜果不能传粉，杂草会与庄稼争营养、水分和空间，于是有人发明了除草剂，除草剂虽然暂时控制了杂草，但也促进了杂草进化，使之变得更难对付，更糟糕的是，除草剂同时也消灭了土壤中的有益微生物，一些原本具有固氮能力的固氮菌，乃至将多余氮素还原为大气中氮气的反硝化细菌也遭到了伤害，没有杂草呵护，农田变成光板地，雨季非常容易造成水土流失。 &lt;br />这段文字重在说明： &lt;br />A.农业的发展不能过度依赖现代科技&lt;br /> B.研制精准杀灭虫害农药的紧迫性&lt;br />C.既有农业生态系统被扰乱后的危害 &lt;br />D.现代农业技术有利有弊&lt;/p>
&lt;p>观点：消灭害虫的一系列后果。A没提到现代科技，农药也有可能是以前的。B三万种农药仍不行，难以研制，摆烂，并且紧迫性没体现。D没提到利。C总括问题，既有指的是除掉害虫后，出现杂草问题，使用除草剂扰乱造成的后果。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>中心理解完结，🎉🎉&lt;/p></content><category scheme="https://keepjolly.com/posts/" term="posts" label="posts"/><category scheme="https://keepjolly.com/posts/learn/" term="learn" label="learn"/><category scheme="https://keepjolly.com/tags/civilservant/" term="CivilServant" label="CivilServant"/></entry><entry><title type="text">公务员行测--资料分析</title><link rel="alternate" type="text/html" href="https://keepjolly.com/posts/learn/data-analysis/"/><id>https://keepjolly.com/posts/learn/data-analysis/</id><updated>2023-12-27T22:08:58+08:00</updated><published>2023-11-12T00:49:46+08:00</published><author><name>Rurouni</name><uri>https://keepjolly.com/</uri><email>1366475809@qq.com</email></author><rights>在保留本文作者及本文链接的前提下，非商业用途随意转载分享(我会高强度自搜的喔👊)。</rights><summary type="html">注意：手机端视频跳转不会直接跳转到讲解部分，需要电脑端！！已更新较为详细的解释。 统计……</summary><content type="html">&lt;p>注意：手机端视频跳转不会直接跳转到讲解部分，需要电脑端！！已更新较为详细的解释。&lt;/p>
&lt;h2 id="统计术语">统计术语&lt;/h2>
&lt;ul>
&lt;li>基期量与现期量
&lt;ul>
&lt;li>作为对比参照的时期称为基期，相对于基期的称为现期&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>增长量
&lt;ul>
&lt;li>基期量与现期量增长（降低/减少的）&lt;strong>绝对&lt;/strong>量&lt;/li>
&lt;li>增长量 = 现期量-基期量&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>增长率
&lt;ul>
&lt;li>增长率=$\frac{increment}{period_{base}} = \frac{period_{base}-period_{now}}{period_{base}}$
&lt;ul>
&lt;li>$increment$：增长量&lt;/li>
&lt;li>$period_{base}$：现期量&lt;/li>
&lt;li>$period_{now}$：基期量&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>减少率 = -增长率&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>年均增长量
&lt;ul>
&lt;li>年均增长量=$\frac{period_{newest}-period_{oldest}}{newest-oldest}$
&lt;ul>
&lt;li>$period_{newest}$：最近的年份&lt;/li>
&lt;li>$period_{oldest}$：最久的年份&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>年均增长率
&lt;ul>
&lt;li>现期量=$period_{base}\times(1+年均增长率)^n$，其中n为相差年份&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>同比环比
&lt;ul>
&lt;li>同比：与历史同期比较，实际上是指与历年的同一时期相比较。&lt;/li>
&lt;li>环比：与上个统计周期比较，实际上是指“与紧紧相邻的统计周期相比较”。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>比重、倍数、平均数、百分数、成数、翻番
&lt;ul>
&lt;li>比重=$\frac{part}{all}$&lt;/li>
&lt;li>倍数：A是B的$\frac{A}{B}$倍&lt;/li>
&lt;li>平均数：平均数=总数÷总份数&lt;/li>
&lt;li>百分点是百分数的单位，用于百位数加减&lt;/li>
&lt;li>成表示十分之一&lt;/li>
&lt;li>翻一番为原来的2倍，翻n番为原来的$2^n$倍&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>顺差、逆差
&lt;ul>
&lt;li>顺差：出口&amp;gt;进口&lt;/li>
&lt;li>逆差：进口&amp;gt;出口&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>GDP=增加值&lt;/li>
&lt;/ul>
&lt;h2 id="速算技巧">速算技巧&lt;/h2>
&lt;h3 id="截位直除">截位直除&lt;/h3>
&lt;ol>
&lt;li>选项首位均不同，保留两位；选项首位有相同的，保留三位&lt;/li>
&lt;li>选项之间误差在 10%以上，保留两位 ；选项之间误差在 10%以内，保留三位&lt;/li>
&lt;li>一步除式：只估算分母，保留三位；多步连除：分子分母同时截位，分开估算/交叉估算&lt;/li>
&lt;/ol>
&lt;p>关于多步截除的增长率估算&lt;/p>
&lt;p>$\frac{1+0.11}{1+0.08} \approx1+0.03(0.11-0.08)$&lt;/p>
&lt;ul>
&lt;li>乘法估算：乘法一大一小，各按比例缩放（粗算不需要，首位均不同）&lt;/li>
&lt;li>$99\uparrow+101\downarrow \approx100*100$&lt;/li>
&lt;/ul>
&lt;h3 id="特殊分数">特殊分数&lt;/h3>
&lt;ul>
&lt;li>$\frac{1}{2}=50$%&lt;/li>
&lt;li>$\frac{1}{3}=33.3$%&lt;/li>
&lt;li>$\frac{1}{4}=25$%&lt;/li>
&lt;li>$\frac{1}{5}=20$%&lt;/li>
&lt;li>$\frac{1}{6}=16.7$%&lt;/li>
&lt;li>$\frac{1}{7}=13.4$%&lt;/li>
&lt;li>$\frac{1}{8}=12.5$%&lt;/li>
&lt;li>$\frac{1}{9}=11.1$%&lt;/li>
&lt;li>$\frac{1}{10}=10$%&lt;/li>
&lt;li>markdown % 不能显示，以下所有都化为小数点&lt;/li>
&lt;/ul>
&lt;p>题目：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>2011 年前十一个月，某省高新技术产业完成总产值 3763.00 亿元，实现增加 值 896.31 亿元。增加值同比增长 30.74%，比规模以上工业增加值高 11.64 个百 分点，占规模以上工业增加值的比重达到 25.32%。&lt;/p>
&lt;p>【练 5】2010 年前十一个月，该省规模以上工业增加值约为多少亿元？&lt;/p>
&lt;p>A.2972 B.3540 C.3865 D.4373&lt;/p>
&lt;p>&lt;a href="https://www.bilibili.com/video/BV1f4411C7z5/?p=4&amp;amp;share_source=copy_web&amp;amp;vd_source=504045c18340a005fec8674ac78d7934&amp;amp;t=2259">1&lt;/a>，注意上下式子对应的东西要一致：求出今年的规模以上的GDP，再根据规模以上的增长率求去年的GDP；而不是求今年的高新GDP，再根据1+规模以上的增长率.$\frac{\frac{896}{0.25}}{1+0.3-0.11}$&lt;/p>
&lt;/li>
&lt;li>
&lt;p>2015 年我国高技术制造业实现主营业务收入 116048.9 亿元，比 2010 年增长 108.2%；占全部制造业企业的比重为 12.8%，比 2010 年提高 0.8 个百分点。2015 年我国高技术制造业实现利润总额 7233.7 亿元，比 2010 年增长 165.5%，增幅比 其他制造业平均水平高出 11.5 个百分点；高技术制造业利润总额占全部制造业 的比重为 13.1%，比 2010 年提高 0.5 个百分点。 &lt;br />【练 3】2010 年，我国制造业实现利润总额约多少万亿元？ &lt;br />A．1.3 B．1.7 C．2.2 D．2.8&lt;/p>
&lt;p>&lt;a href="https://www.bilibili.com/video/BV1f4411C7z5/?p=4&amp;amp;share_source=copy_web&amp;amp;vd_source=504045c18340a005fec8674ac78d7934&amp;amp;t=1425">2&lt;/a>，$\frac{profit_{2015}}{1+1.655} \div 比重_{2010}\approx \frac{7233\times8}{2.655}\approx \frac{56^+}{2.655}$&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="分数比较">分数比较&lt;/h3>
&lt;p>&lt;a href="https://www.bilibili.com/video/BV1f4411C7z5/?p=4&amp;amp;share_source=copy_web&amp;amp;vd_source=504045c18340a005fec8674ac78d7934&amp;amp;t=3859">视频地址&lt;/a>&lt;/p>
&lt;ul>
&lt;li>方法一
&lt;ul>
&lt;li>①分子大，分母小，直接判断分数大&lt;/li>
&lt;li>②分子分母同大，看变化速度， 分子变化大，选分子大；分母变化大，选分母小&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>方法二：直除比较&lt;/li>
&lt;li>优先&lt;strong>直除首位&lt;/strong>，其次看变化速度&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>题目：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>2014 年我国粮食种植面积 11274 万公顷，比上年增加 78 万公顷。棉花种植面积 422 万公顷，减少 13 万公顷。油料种植面积 1408 万公顷，增加 6 万公顷。 糖料种植面积 191 万公顷、减少 9 万公顷。 全年棉花产量 616 万吨，比上年减产 2.2%。油料产量 3517 万吨，与上年持平。糖料产量 13403 万吨，减产 2.5%。茶叶产量 209 万吨，增产 8.7%。 &lt;br />【例 4】将不同作物按 2014 年单位种植面积产量由高到低排序，下列正确的是 &lt;br />A．棉花——油料——糖料 B．棉花——糖料——油料 &lt;br />C．糖料——油料——棉花 D．糖料——棉花——油料&lt;/p>
&lt;p>棉花：$\frac{616}{422} \approx \frac{4+2}{4} \approx 1^+$，油料：$\frac{3517}{1408} \approx \frac{28+7}{14} \approx 2^+$，糖料：$\frac{13403}{191} \gg 2$&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="重点题型">重点题型&lt;/h2>
&lt;h3 id="简单题">简单题&lt;/h3>
&lt;p>直接计算和直接查找&lt;/p>
&lt;hr>
&lt;p>题目：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>截至 2012 年底，在网民增长速度逐步放缓的背景下，网络购物应用依然呈 现迅猛增长的势头，网络购物使用率提升至 42.9%，全年网络购物用户增加 4807 万，用户绝对增长量超出上年 1463 万。网上支付使用率提升至 39.2%，全年用 户增长 5389 万。网上银行使用率提升至 39.2%，比上年底提升 6.9 个百分点。 70.6%的网民使用台式电脑上网，相比上年底下降了近三个百分点，使用笔记本 电脑上网的网民比例与上年底相比略有降低，为 45.9%。 &lt;br />【练 7】2012 年我国网民使用台式电脑上网的比例比使用笔记本电脑上网的比例高&lt;br />A.近 3 个百分点 B.近 3% &lt;br />C.24.7% D.24.7 个百分点&lt;/p>
&lt;p>&lt;a href="https://www.bilibili.com/video/BV1f4411C7z5/?p=5&amp;amp;share_source=copy_web&amp;amp;vd_source=504045c18340a005fec8674ac78d7934&amp;amp;t=1608">1&lt;/a>，百分数加减是百分点。$0.706-0.459=$&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="增长率相关">增长率相关&lt;/h3>
&lt;p>&lt;a href="https://www.bilibili.com/video/BV1f4411C7z5/?p=5&amp;amp;share_source=copy_web&amp;amp;vd_source=504045c18340a005fec8674ac78d7934&amp;amp;t=2890">增长率相关&lt;/a>&lt;/p>
&lt;ol>
&lt;li>增长率=$\frac{increment}{period_{base}} = \frac{period_{base}-period_{now}}{period_{base}}$&lt;/li>
&lt;li>现期量=$period_{base} \times (1 + r)$&lt;/li>
&lt;li>基期量=$\frac{period_{now}}{1 + r} = period_{now} − increment$&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>技巧：截位直除&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>题目：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/11/20231116200706.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">
&lt;br />【练 9】按 2011 年的人口自然增长率计算，预计 2012 年的人口约为（ ）万人。&lt;br />A．135382 B．135409 C．141129 D．141202&lt;/p>
&lt;p>&lt;a href="https://www.bilibili.com/video/BV1f4411C7z5/?p=6&amp;amp;share_source=copy_web&amp;amp;vd_source=504045c18340a005fec8674ac78d7934&amp;amp;t=2857">1&lt;/a>，$2010年 \times r = 2011年-2010年 \Rightarrow 134091 \times 0.0048 = 13475-134091 = 644$。$2011年 \times r = (2010年+增长量) \times r = 增长量+增长量 \times r \Rightarrow 644 + 0.644\times 5$&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="间隔增长率">间隔增长率&lt;/h4>
&lt;p>&lt;a href="https://www.bilibili.com/video/BV1f4411C7z5/?p=6&amp;amp;share_source=copy_web&amp;amp;vd_source=504045c18340a005fec8674ac78d7934&amp;amp;t=3122">间隔增长率&lt;/a>&lt;/p>
&lt;p>题型特征：间隔一年，2017 年比 2015 年增长率，2016 年第一季度比 2014 年第一季度增长率。&lt;/p>
&lt;p>公式：$R = 𝑟_1 + 𝑟_2 + 𝑟_1 \times 𝑟_2$（𝑟1和𝑟2是较大两个年份的增长率）&lt;/p>
&lt;p>大胆估算𝑟1 × 𝑟2的技巧：&lt;/p>
&lt;ul>
&lt;li>$r_1 \times r_2 = \frac{a}{100} \times \frac{b}{100} = \frac{\frac{ab}{100}}{100} $&lt;/li>
&lt;li>r1 × r2，一个化为分数，一个不变&lt;/li>
&lt;li>r1和r2均小于 10%， r1 × r2 &amp;lt; 1%，大胆估算&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ol>
&lt;li>
&lt;p>2014 年全国社会物流总额 213.5 万亿元，同比增长 7.9%，比上年回落 1.6 个百分点。
&lt;img src="https://pic.keepjolly.com/halo/blog/2023/11/20231116224858.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">
&lt;br />【例 3】2012 年上半年全国社会物流总额约为多少万亿元？（ ） &lt;br />A．93 B．102 C．75 D．86&lt;/p>
&lt;p>累计总额即上半年为第二季度，给2014求2012。$r=r_1+r_2+r_1r_2\approx0.178+0.09\times0.09 \approx 0.186$，$\frac{101.5}{12}\approx 80^+$，D&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="混合增长率">混合增长率&lt;/h4>
&lt;p>&lt;a href="https://www.bilibili.com/video/BV1f4411C7z5/?p=7&amp;amp;share_source=copy_web&amp;amp;vd_source=504045c18340a005fec8674ac78d7934&amp;amp;t=8.">混合增长率&lt;/a>&lt;/p>
&lt;ul>
&lt;li>混合增长率：大小居中，偏向基期量大的&lt;/li>
&lt;li>中间=两边的平均数（左边&amp;lt;中间&amp;lt;右边）&lt;/li>
&lt;li>一般题目都是给定当年的量和增长率，缺少左/右的增长率&lt;/li>
&lt;li>&lt;a href="https://www.bilibili.com/video/BV1f4411C7z5/?p=7&amp;amp;share_source=copy_web&amp;amp;vd_source=504045c18340a005fec8674ac78d7934&amp;amp;t=1539">精确求混合&lt;/a>
&lt;ul>
&lt;li>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/11/20231116225256.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>题目：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>2013 年 3 月末，主要金融机构及小型农村金融机构、外资银行人民币房地产贷款余额 12.98 万亿元，同比增长 16.4%。地产开发贷款余额 1.04 万亿元， 同比增长 21.4%。房产开发贷款余额 3.2 万亿元，同比增长 12.3%。个人购房贷款余额 8.57 万亿元，同比增长 17.4%。保障性住房开发贷款余额 6140 亿元，同 比增长 42.4%。&lt;/p>
&lt;p>【例 2】2013 年 3 月末，房地产开发贷款余额同比增速约为（ ）。&lt;/p>
&lt;p>A.14.4% B.12.3% C.19.3% D.21.4%&lt;/p>
&lt;p>&lt;a href="https://www.bilibili.com/video/BV1f4411C7z5/?p=7&amp;amp;share_source=copy_web&amp;amp;vd_source=504045c18340a005fec8674ac78d7934&amp;amp;t=432">例2&lt;/a>，房产3.2万亿，12.3%，地产1.04万亿，21.4%。3.2&amp;gt;1.04 =&amp;gt; 房地产12.3%&amp;lt; x &amp;lt;(12.3+21.4)/2%&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/11/20231116224858.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">&lt;/p>
&lt;p>【例 4】2013 年第三季度社会物流总额同比增速高于第四季度(T/F)&lt;/p>
&lt;p>&lt;a href="https://www.bilibili.com/video/BV1f4411C7z5/?p=7&amp;amp;share_source=copy_web&amp;amp;vd_source=50404">1&lt;/a>，累计前三季度(158.1，9.5%)+累计前二季度(101.5，9.1) =&amp;gt;三季度&amp;gt;9.5%；累计前四季度(213.5，9.5%)+累计前三季度(158.1，9.5%)=&amp;gt;四季度=9.5%&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="年均增长率">年均增长率&lt;/h4>
&lt;p>&lt;a href="https://www.bilibili.com/video/BV1f4411C7z5/?p=7&amp;amp;share_source=copy_web&amp;amp;vd_source=504045c18340a005fec8674ac78d7934&amp;amp;t=2949">年均增长率&lt;/a>&lt;/p>
&lt;p>年均增长率计算：代入特殊值(答案的居中值：10 20 )&lt;/p>
&lt;p>年均增长率比较：比较每个$\frac{period_{newest}}{period_{oldest}}$的值&lt;/p>
&lt;p>关于怎么数年份：问 2013-2017 年的年均增长率，如果没有给出 2012 年的 具体值，那么以 2013 年为基期，求 4 年的年均增长；如果给出了 2012 年的具体 值，那么以 2012 年为基期，求 5 年的年均增长。&lt;/p>
&lt;p>$11^2=121,12^2=144,13^2=169,14^2=196,15^2=225,16^2=256$&lt;/p>
&lt;ul>
&lt;li>年均增长量
&lt;ul>
&lt;li>$=\frac{现期量-基期量}{间隔年份}$&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>年均增长率
&lt;ul>
&lt;li>$现期量=基期量\times(1+年均增长率)^n$，其中n为相差年份&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>题目：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/11/20231117230604.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">
&lt;br />【例 4】(2013 年江苏)若不考虑价格因素，则 2003-2011 年九年，江苏金融业增加值年均增速 Vj、第三产业增加值年均增速 Vs、地区国内生产总值年均增速 Vg 的大小关系是：
&lt;br />A. Vs＞Vj＞Vg B. Vj＞Vg＞Vs &lt;br />C. Vj＞Vs＞Vg D. Vs＞Vg＞Vj&lt;/p>
&lt;p>&lt;a href="https://www.bilibili.com/video/BV1f4411C7z5/?p=7&amp;amp;share_source=copy_web&amp;amp;vd_source=504045c18340a005fec8674ac78d7934&amp;amp;t=4588">1&lt;/a>。如果第一年到最后一年的增长率大，平均到每一年就大，所以看第一年到最后一年的增长率。$\frac{2600}{370}\approx7^+ &amp;gt; \frac{20842}{3891}\approx5^+ &amp;gt; \frac{49110}{10606}\approx5^-$，可以首位直除&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="增长量相关">增长量相关&lt;/h3>
&lt;p>&lt;a href="https://www.bilibili.com/video/BV1f4411C7z5/?p=8&amp;amp;share_source=copy_web&amp;amp;vd_source=504045c18340a005fec8674ac78d7934&amp;amp;t=238">增长量相关&lt;/a>&lt;/p>
&lt;p>增长量 = 现期量 − 基期量 = 基期量 × r = 现期量/(1 + r) × r&lt;/p>
&lt;p>解题技巧:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://keepjolly.com/posts/learn/data-analysis/#%E7%89%B9%E6%AE%8A%E5%88%86%E6%95%B0">特殊分数&lt;/a>
&lt;ul>
&lt;li>现期/(1+特殊分数) = 现期/(特殊分数+1)&lt;/li>
&lt;li>现期/(1+1/8) = 现期/9&lt;/li>
&lt;li>现期/(1-1/8) = 现期/7&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>截位直除法
&lt;ul>
&lt;li>现期量 × r /(1 + r)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://www.bilibili.com/video/BV1f4411C7z5/?p=8&amp;amp;share_source=copy_web&amp;amp;vd_source=504045c18340a005fec8674ac78d7934&amp;amp;t=1706">增长量大小比较&lt;/a>：&lt;/p>
&lt;ol>
&lt;li>现期值大，增长率大，大大则大。&lt;/li>
&lt;li>一大一小，近似比较现期量 × r 的值
&lt;ol>
&lt;li>$\frac{Ar_1}{1+r_1}$和 $\frac{Br_2}{1+r_2}$&lt;/li>
&lt;li>忽略底部，看分子乘积
&lt;ul>
&lt;li>r1和r2的差距在20%以内可以忽略底部&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>r1和r2的差距在20%以上，列出完整式子进行估算&lt;/li>
&lt;li>如果两个乘积比较接近，列出完整式子进行估算&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>正大于负&lt;/li>
&lt;/ol>
&lt;hr>
&lt;p>题目：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/11/20231117230954.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">
&lt;br />【练 8】2011～2017 年，全国二手车交易量同比增量低于 80 万辆的年份有几个？
&lt;br />A．3 B．4 C．5 D．7&lt;/p>
&lt;p>&lt;a href="https://www.bilibili.com/video/BV1f4411C7z5/?p=8&amp;amp;share_source=copy_web&amp;amp;vd_source=504045c18340a005fec8674ac78d7934&amp;amp;t=3823">不等于求年平均增长率&lt;/a>，需要求2011年：$\frac{682}{1.124} - 682 &amp;lt; 80$&lt;/p>
&lt;/li>
&lt;li>
&lt;p>2011 年前十一个月，某省高新技术产业完成总产值 3763.00 亿元，实现增加 值 896.31 亿元。增加值同比增长 30.74%，比规模以上工业增加值高 11.64 个百 分点，占规模以上工业增加值的比重达到 25.32%。&lt;br />【练 10】若该省高新技术产业增加值保持同样的增长速度，则 2012 年前十一个月高新技术产业增加值比 2010 年同期约增加多少亿元： &lt;br />A．210.7 B．486.3 C．275.5 D．685.6&lt;/p>
&lt;p>2012-2010=2011增长量+2012增长量=$\frac{896}{1+0.3}+896\times0.3 \approx 270+896/130 \approx 270+200^+$&lt;/p>
&lt;/li>
&lt;li>
&lt;p>2010 年，我国机电产品出口 9334.3 亿美元，同比增加 30.9%;高新技术产品出口 4924.1 亿美元，同比增长 30.7%。船舶、汽车零部件出口保持较快增长，其中船舶出口同比增长 44.5%，汽车零部件出口同比增长 44.1%。 2010 年，机电产品进口额达到 6603.1 亿美元，同比增长 34.4%，高新技术产品进口额达到 4126.7 亿美元，同比增长 33.2%。&lt;br /> 【例 9】问题：在 2010 年我国进出口贸易中，下列哪一项的同比增长金额最高？ &lt;br />A．机电产品出口 B．高新技术产品出口 &lt;br />C．机电产品进口 D．高新技术产品进口&lt;/p>
&lt;p>增长率近似，看现期×增长率，9000&amp;gt;6600&amp;gt;4924&amp;gt;4126，A。如果看高新技术进出口增长量，需要列出完整式子&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="比重相关">比重相关&lt;/h3>
&lt;p>&lt;a href="https://www.bilibili.com/video/BV1f4411C7z5/?p=9&amp;amp;share_source=copy_web&amp;amp;vd_source=504045c18340a005fec8674ac78d7934&amp;amp;t=457">基期比重&lt;/a>&lt;/p>
&lt;p>比重 = $\frac{A}{B} \times \frac{1+b}{1+a}$,不化简好记一点$\frac{\frac{A}{1+a}}{\frac{B}{1+b}}$&lt;/p>
&lt;hr>
&lt;p>题目：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>2015 年，江西规模以上工业增加值 7268.9 亿元，比上年增长 9.2%。分轻重 工业看，轻工业增加值 2731.2 亿元，增长 7.7%；重工业增加值 4537.7 亿元， 增长 10.1%。
&lt;br />【例 5】2014 年江西省重工业增加值占规模以上工业增加值的比重为（ ）。
&lt;br />A．56.7% B．62.4% C．61.9% D．68.3%&lt;/p>
&lt;p>&lt;a href="https://www.bilibili.com/video/BV1f4411C7z5/?p=9&amp;amp;share_source=copy_web&amp;amp;vd_source=504045c18340a005fec8674ac78d7934&amp;amp;t=802">例5&lt;/a>，BC近似则分母保留3位，分子不变$\frac{4537}{7270}\times\frac{1+0.092}{1+0.101}$，又因为B是现期比重$\frac{4537}{7270}\approx 62^+$,干扰项，直接推C&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="两期比重">两期比重&lt;/h4>
&lt;p>&lt;a href="https://www.bilibili.com/video/BV1f4411C7z5/?p=9&amp;amp;share_source=copy_web&amp;amp;vd_source=504045c18340a005fec8674ac78d7934&amp;amp;t=1087">两期比重变化&lt;/a>&lt;/p>
&lt;ul>
&lt;li>看&lt;strong>部分&lt;/strong>的增长率大于&lt;strong>整体&lt;/strong>的增长率则比重增大，否则比重减少
&lt;ul>
&lt;li>$去年：\frac{X_{part}}{Y_{all}} &amp;gt; 今年：\frac{X_{part}(1+a)}{Y_{all}(1+b)} \Rightarrow \frac{1+a}{1+b} \Rightarrow a&amp;gt;b 比重 \uparrow$&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>比重上升也可以反推部分增速快&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://www.bilibili.com/video/BV1f4411C7z5/?p=9&amp;amp;share_source=copy_web&amp;amp;vd_source=504045c18340a005fec8674ac78d7934&amp;amp;t=1639">两期比重差&lt;/a>(百分点)：&lt;/p>
&lt;ul>
&lt;li>$\frac{A}{B} - \frac{A}{B}\times\frac{1+b}{1+a} = \frac{A}{B}(\frac{a-b}{1+a})$&lt;/li>
&lt;li>实际上看a-b，其他部分$&amp;lt;1$&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="https://www.bilibili.com/video/BV1f4411C7z5/?p=9&amp;amp;share_source=copy_web&amp;amp;vd_source=504045c18340a005fec8674ac78d7934&amp;amp;t=4023">练6&lt;/a>，十字交叉法&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;img src="https://pic.keepjolly.com/halo/blog/2023/12/20231213232002.png?imageMogr2/format/webp%7C?watermark/3/type/3/text/a2VlcGpvbGx5" alt="image.png">
&lt;br />【练 11】2005—2013 年，全国技术合同成交金额增速超过 GDP 增速的年份有（ ）个。 &lt;br />A．3 B．4 C．5 D．6&lt;/p>
&lt;p>&lt;a href="https://www.bilibili.com/video/BV1f4411C7z5/?p=9&amp;amp;share_source=copy_web&amp;amp;vd_source=504045c18340a005fec8674ac78d7934&amp;amp;t=5012">【11】&lt;/a>，比重=$\frac{TradeVolume}{GDP}$，比重上升反推去年到今年的部分增速快，即成交金额增速快，则比重上升。2006：0.85→0.87、2007：0.87→0.9、2010、2011、2012、2013&lt;/p>
&lt;/li>
&lt;li>
&lt;p>2017年全国海洋生产总值77611亿元，比上年增长6.9%，海洋生产总值占国内生产总值的9.4%。&lt;br />2017年，J省海洋生产总值为7217亿元，比上年增长9.2%，海洋生产总值占地区生产总值的8.4%，2017年，全省沿海沿江港口完成货物吞吐量20.4亿吨，同比增长8.3%；集装箱吞吐量1698.8万标箱，同比增长5.5%。&lt;br />2017年J省海洋生产总值占全国的比重比上年：
&lt;br />A . 上升了约0.2个百分点 B . 上升了约2个百分点 &lt;br />C . 下降了约0.2个百分点 D . 下降了约2个百分点&lt;/p>
&lt;p>&lt;a href="https://www.bilibili.com/video/BV1f4411C7z5/?p=9&amp;amp;share_source=copy_web&amp;amp;vd_source=504045c18340a005fec8674ac78d7934&amp;amp;t=2887">拓展&lt;/a>，a-b=2.3%，大于0上升排除CD。都比2小，看整体$\frac{77611}{7217}\times\frac{0.023}{1+0.092}\approx 0.1*0.023=0.002$&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="平均数与倍数">平均数与倍数&lt;/h3>
&lt;ul>
&lt;li>现期倍数，A 是 B 的几倍，$\frac{A}{B}$&lt;/li>
&lt;li>&lt;a href="https://www.bilibili.com/video/BV1f4411C7z5/?p=10&amp;amp;share_source=copy_web&amp;amp;vd_source=504045c18340a005fec8674ac78d7934&amp;amp;t=507">基期倍数&lt;/a> $\frac{\frac{A}{1+a}}{\frac{B}{1+b}}=\frac{A}{B} \times \frac{1+b}{1+a}$&lt;/li>
&lt;li>平均数 等差数列平均数等于中位数&lt;/li>
&lt;li>&lt;a href="https://www.bilibili.com/video/BV1f4411C7z5/?p=10&amp;amp;share_source=copy_web&amp;amp;vd_source=504045c18340a005fec8674ac78d7934&amp;amp;t=1908">平均值增长率&lt;/a>：$\frac{year_{now}-year_{last}}{year_{last}} = \frac{A(1+a)/B(1+b)-A/B}{A/B}= \frac{a-b}{1+b}$ （不等于比重差）&lt;/li>
&lt;/ul>
&lt;p>应用技巧：截位直除，叠除估算&lt;/p>
&lt;hr>
&lt;ol>
&lt;li>
&lt;p>2014 年我国粮食再获丰收。全年粮食产量 60710 万吨，比上年增加 516 万 吨，增产 0.9%。其中，夏粮产量 13660 万吨，增产 3.6%；早稻产量 3401 万吨， 减产 0.4%；秋粮产量 43649 万吨，增产 0.1%。
&lt;br />【例 4】2013 年，秋粮产量约为夏粮产量的多少倍？
&lt;br />A．不到 2 倍 B．2 倍多 C．3 倍多 D．4 倍多&lt;/p>
&lt;p>$\frac{43649}{13660}\times\frac{1+0.036}{1+0.001}\approx3^+\times1^+$，选项差距大，保留两位，C&lt;/p>
&lt;/li>
&lt;li>
&lt;p>2017 年，A 省完成客运总量 148339 万人次，同比增长 5.4%，增幅比前三季度提高 0.2 个百分点，比上年提高 0.5 个百分点；完成旅客周转总量 4143.84 亿人公里，增长 7.7%，增幅比前三季度提高 0.7 个百分点，比上年提高 1.8 个百分 点。
&lt;br />【练 13】2017 年前三季度，A 省平均每人次客运旅客运输距离（旅客周转量÷客运总量）同比：
&lt;br />A．下降了不到 2% B．下降了 2%以上 C．上升了不到 2% D．上升了 2%以上&lt;/p>
&lt;p>&lt;a href="https://www.bilibili.com/video/BV1f4411C7z5/?p=10&amp;amp;share_source=copy_web&amp;amp;vd_source=504045c18340a005fec8674ac78d7934&amp;amp;t=4217">13&lt;/a>，求得是平均增速，不是两期比重差。$\frac{a-b}{1+b}=\frac{0.07-0.052}{1+0.052}\approx\frac{1.8}{1}=2^-$，大于0选上升，即C。（不考虑%是因为对结果没有影响，首位都是2，除非遇到2和20、200等，需要考虑%）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>【&lt;a href="https://www.bilibili.com/video/BV1f4411C7z5/?p=10&amp;amp;share_source=copy_web&amp;amp;vd_source=504045c18340a005fec8674ac78d7934&amp;amp;t=1098">例6&lt;/a>】直接看图求平均数&lt;/p>
&lt;/li>
&lt;li>
&lt;p>2011 年全国全年粮食种植面积 11057 万公顷，比上年增加 70 万公顷，棉花 种植面积 504 万公顷，增加 19 万公顷。全年粮食产量 57121 万吨，比上年增加 2473 万吨，增产 4.5%；全年棉花产量 650 万吨，比上年增产 10.7%。 &lt;br />【例 9】2011 年全国全年粮食、棉花平均亩产量与 2010 年相比（ ）。 &lt;br />A.粮食有所提高，棉花有所降低 B.粮食有所降低，棉花有所提高&lt;br /> C.两者均有所降低 D.两者都有所提高&lt;/p>
&lt;p>&lt;a href="https://keepjolly.com/posts/learn/data-analysis/#%E6%AF%94%E9%87%8D%E7%9B%B8%E5%85%B3">比重增速&lt;/a>和平均数增速一致，所以看a(粮食增速)，b（总增速）的大小关系：$\frac{0.045}{0.007}$，粮食提高$\frac{0.107}{0.007}$，棉花提高。&lt;/p>
&lt;/li>
&lt;/ol></content><category scheme="https://keepjolly.com/posts/" term="posts" label="posts"/><category scheme="https://keepjolly.com/posts/learn/" term="learn" label="learn"/><category scheme="https://keepjolly.com/tags/civilservant/" term="CivilServant" label="CivilServant"/></entry></feed>