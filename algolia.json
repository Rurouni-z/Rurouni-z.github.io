[{"categories":["tech"],"content":"做记录用cuda下载 https://developer.download.nvidia.com/compute/cuda/12.1.1/local_installers/cuda_12.1.1_530.30.02_linux.run 将其中的.nvidia.com改为.. .cn ..即可，并将链接复制到浏览器，由浏览器托管下载 sudo sh cuda_12.1.1_530.30.02_linux.run git clone 搜索IP地址 https://www.ipaddress.com/ github.global.ssl.fastly.net 随便挑一个 github.com 修改host 打开hosts文件 Windows上的hosts文件路径在C:/WindowsSystem32/driversetchosts Linux的hosts文件路径在：sudo vim /etc/hosts append files 151.101.1.194 github.global-ssl.fastly.net 140.82.112.4 github.com刷新DNS sudo syste","date":"2023-05-26T21:16:39+08:00","objectID":"b7daf306f4c9c985712ea40a9a917a73_0","order":0,"summary":"做记录用cuda下载 https://developer.download.nvidia.com/compute/cuda/12.1.1/local_installers/cuda_12.1.1_530.30.02_linux.run 将其中的.nvidia.com改为.. .cn ..即可，并将链接复制到浏览器，由浏览器托管下载 sudo sh cuda_12.1.1_530.30.02_linux.run git clone 搜索IP地址 https://www.ipaddress.com/ github.global.ssl.fastly.net 随便挑一个 github.com 修改host 打开hosts文件 Windows上的hosts文件路径在C:/WindowsSystem32/driversetchosts Linux的hosts文件路径在：sudo vim /etc/hosts append files 151.101.1.194 github.global-ssl.fastly.net 140.82.112.4 github.com刷新DNS sudo syste","tags":["Others"],"title":"提高一些链接的下载速度","url":"https://keepjolly.com/posts/tech/improve-download-speed/"},{"categories":["create"],"content":"上个版本: 只是用到ctypes进行传输, 这次将python服务端更改为C++服务端,方便后续维护. 本文实现功能: python传输图片给C++, C++接受图片后对图片进行处理,并将结果返回给python客户端, pass image from python to C++C++ 服务端 .h文件 注意文中的model1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 // .h #pragma once #include \u0026lt;stdio.h\u003e #include \u0026lt;stdlib.h\u003e #include \u0026lt;string.h\u003e #include \u0026lt;unistd.h\u003e #include \u0026lt;sys/socket.h\u003e #include \u0026lt;arpa/inet.h\u003e #include \u0026lt;netinet/in.h\u003e #include \u0026lt;signal.h\u003e #include \u0026lt;opencv2/openc","date":"2023-05-26T21:14:31+08:00","objectID":"b6ba58d6890d1967296448e85eab3e2c_0","order":0,"summary":"上个版本: 只是用到ctypes进行传输, 这次将python服务端更改为C++服务端,方便后续维护. 本文实现功能: python传输图片给C++, C++接受图片后对图片进行处理,并将结果返回给python客户端, pass image from python to C++C++ 服务端 .h文件 注意文中的model1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 // .h #pragma once #include \u0026lt;stdio.h\u003e #include \u0026lt;stdlib.h\u003e #include \u0026lt;string.h\u003e #include \u0026lt;unistd.h\u003e #include \u0026lt;sys/socket.h\u003e #include \u0026lt;arpa/inet.h\u003e #include \u0026lt;netinet/in.h\u003e #include \u0026lt;signal.h\u003e #include \u0026lt;opencv2/openc","tags":["C++","Python","TCP"],"title":"混合编程python与C++","url":"https://keepjolly.com/posts/create/python-client-c-server/"},{"categories":["create"],"content":"v.hpp\u003e using namespace std; using namespace cv; class ModelManager; class ServerManager { private: int m_port; char *m_addr; cv::VideoCapture m_cap; int m_server; int m_accept; // client conn public: bool initialization(const int \u0026port, const cv::VideoCapture \u0026cap, char *addr = nullptr); bool initialization(const int \u0026port, char *addr = nullptr); bool build_connect(); bool acceptClient(); void error_print(const char *ptr); bool free_connect(); bool send_data_frame(ModelManager\u0026 model); bool rece","date":"2023-05-26T21:14:31+08:00","objectID":"b6ba58d6890d1967296448e85eab3e2c_1","order":1,"summary":"v.hpp\u003e using namespace std; using namespace cv; class ModelManager; class ServerManager { private: int m_port; char *m_addr; cv::VideoCapture m_cap; int m_server; int m_accept; // client conn public: bool initialization(const int \u0026port, const cv::VideoCapture \u0026cap, char *addr = nullptr); bool initialization(const int \u0026port, char *addr = nullptr); bool build_connect(); bool acceptClient(); void error_print(const char *ptr); bool free_connect(); bool send_data_frame(ModelManager\u0026 model); bool rece","tags":["C++","Python","TCP"],"title":"混合编程python与C++","url":"https://keepjolly.com/posts/create/python-client-c-server/"},{"categories":["create"],"content":"ive_data_frame(cv::Mat \u0026frame, ModelManager\u0026 model); }; .cpp文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 #include \"Ser","date":"2023-05-26T21:14:31+08:00","objectID":"b6ba58d6890d1967296448e85eab3e2c_2","order":2,"summary":"ive_data_frame(cv::Mat \u0026frame, ModelManager\u0026 model); }; .cpp文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 #include \"Ser","tags":["C++","Python","TCP"],"title":"混合编程python与C++","url":"https://keepjolly.com/posts/create/python-client-c-server/"},{"categories":["create"],"content":"verManager.h\" #include \"ModelManager.h\" #define BUFFER_SIZE 65538 void ServerManager::error_print(const char * ptr) { perror(ptr); exit(EXIT_FAILURE); } bool ServerManager::initialization(const int\u0026 port, const cv::VideoCapture\u0026 cap, char* addr){ m_port = htons(port); m_addr = addr; m_cap = cap; return true; } bool ServerManager::initialization(const int\u0026 port, char* addr){ m_port = htons(port); m_addr = addr; return true; } bool ServerManager::build_connect() { struct sockaddr_in server_addr; b","date":"2023-05-26T21:14:31+08:00","objectID":"b6ba58d6890d1967296448e85eab3e2c_3","order":3,"summary":"verManager.h\" #include \"ModelManager.h\" #define BUFFER_SIZE 65538 void ServerManager::error_print(const char * ptr) { perror(ptr); exit(EXIT_FAILURE); } bool ServerManager::initialization(const int\u0026 port, const cv::VideoCapture\u0026 cap, char* addr){ m_port = htons(port); m_addr = addr; m_cap = cap; return true; } bool ServerManager::initialization(const int\u0026 port, char* addr){ m_port = htons(port); m_addr = addr; return true; } bool ServerManager::build_connect() { struct sockaddr_in server_addr; b","tags":["C++","Python","TCP"],"title":"混合编程python与C++","url":"https://keepjolly.com/posts/create/python-client-c-server/"},{"categories":["create"],"content":"zero(\u0026server_addr,sizeof(server_addr)); server_addr.sin_family = AF_INET; server_addr.sin_addr.s_addr = m_addr?inet_addr(m_addr):INADDR_ANY; server_addr.sin_port = m_port; // create socket m_server = socket(AF_INET, SOCK_STREAM, 0); if(m_server \u0026lt; 0) error_print(\"socket bind error\"); // can reuse port int on = 1; if(setsockopt(m_server,SOL_SOCKET,SO_REUSEADDR,\u0026on,sizeof(on)) \u0026lt; 0) error_print(\"setsockopt error\"); // bind addr if(bind(m_server, (struct sockaddr*)\u0026server_addr, sizeof(server_ad","date":"2023-05-26T21:14:31+08:00","objectID":"b6ba58d6890d1967296448e85eab3e2c_4","order":4,"summary":"zero(\u0026server_addr,sizeof(server_addr)); server_addr.sin_family = AF_INET; server_addr.sin_addr.s_addr = m_addr?inet_addr(m_addr):INADDR_ANY; server_addr.sin_port = m_port; // create socket m_server = socket(AF_INET, SOCK_STREAM, 0); if(m_server \u0026lt; 0) error_print(\"socket bind error\"); // can reuse port int on = 1; if(setsockopt(m_server,SOL_SOCKET,SO_REUSEADDR,\u0026on,sizeof(on)) \u0026lt; 0) error_print(\"setsockopt error\"); // bind addr if(bind(m_server, (struct sockaddr*)\u0026server_addr, sizeof(server_ad","tags":["C++","Python","TCP"],"title":"混合编程python与C++","url":"https://keepjolly.com/posts/create/python-client-c-server/"},{"categories":["learn"],"content":"音频原理 博客声音 频率（音调）：声音1秒内周期性变化的次数 人耳的听觉范围在20Hz-20kHz。 低频的声音沉闷厚重，高频的声音尖锐刺耳。 高于 20kHz的声音为超声波。 振幅（响度）：声音的大小 有的时候，我们用分贝（dB）形容声音大小。值得注意的是，dB是一个比值，是一个数值，没有任何单位标注。（功率强度之比的对数的10倍） 2. 声音采集与存储 采样，指把时间域或空间域的连续量转化成离散量的过程 。 对声音的采样常用麦克风等设备将声音信号转换成电信号，再用模/数转换器将电信号转换成一串用1和0表示的二进制数字（数字信号）。 采样频率指录音设备在一秒钟内对声音信号的采样次数。采样频率越高，声音的还原就越真实越自然。 目前主流的采样频率有22.05KHz、44.1KHz、48KHz三种。PCM PCM(Pulse Code Modulation)也被称为 脉码编码调制。PCM中的声音数据没有被压缩，如果是单声道的文件，采样数据按时间的先后顺序依次存入。(它的基本组织单位是BYTE(8bit)或WORD(16bit)) 一般情况下，一帧PCM是由2048次采样组成的( 参考 ht","date":"2023-05-26T21:04:25+08:00","objectID":"d751bc6a8e22efd84a49dc27357be288_0","order":0,"summary":"音频原理 博客声音 频率（音调）：声音1秒内周期性变化的次数 人耳的听觉范围在20Hz-20kHz。 低频的声音沉闷厚重，高频的声音尖锐刺耳。 高于 20kHz的声音为超声波。 振幅（响度）：声音的大小 有的时候，我们用分贝（dB）形容声音大小。值得注意的是，dB是一个比值，是一个数值，没有任何单位标注。（功率强度之比的对数的10倍） 2. 声音采集与存储 采样，指把时间域或空间域的连续量转化成离散量的过程 。 对声音的采样常用麦克风等设备将声音信号转换成电信号，再用模/数转换器将电信号转换成一串用1和0表示的二进制数字（数字信号）。 采样频率指录音设备在一秒钟内对声音信号的采样次数。采样频率越高，声音的还原就越真实越自然。 目前主流的采样频率有22.05KHz、44.1KHz、48KHz三种。PCM PCM(Pulse Code Modulation)也被称为 脉码编码调制。PCM中的声音数据没有被压缩，如果是单声道的文件，采样数据按时间的先后顺序依次存入。(它的基本组织单位是BYTE(8bit)或WORD(16bit)) 一般情况下，一帧PCM是由2048次采样组成的( 参考 ht","tags":["C++","RTSP"],"title":"第3、4讲：实现一个基于TCP的RTP同时传输h264和aac的RTSP服务器","url":"https://keepjolly.com/posts/learn/rtsp-server-of-h264-and-aac-based-on-rtp-over-tcp/"},{"categories":["learn"],"content":"tp://discussion.forum.nokia.com/forum/showthread.php?129458-请问PCM格式的音频流，每次读入或输出的块的大小是必须固定为4096B么\u0026s=e79e9dd1707157281e3725a163844c49 )。 如果是双声道的文件，采样数据按时间先后顺序交叉地存入。如图所示: aac的码流格式 AAC的ADTS头文件信息介绍、C++ 解析aac-adts的头部信息、AAC ADTS格式分析、保留用 AAC音频格式：Advanced Audio Coding(高级音频解码)，是一种由MPEG-4标准定义的有损音频压缩格式，由Fraunhofer发展，Dolby, Sony和AT\u0026T是主要的贡献者。ADIF：Audio Data Interchange Format 音频数据交换格式。这种格式的特征是可以确定的找到这个音频数据的开始，不需进行在音频数据流中间开始的解码，即它的解码必须在明确定义的开始处进行。故这种格式常用在磁盘文件中。 ADTS的全称是Audio Data Transport Stream。是AAC音频的传输流格式。","date":"2023-05-26T21:04:25+08:00","objectID":"d751bc6a8e22efd84a49dc27357be288_1","order":1,"summary":"tp://discussion.forum.nokia.com/forum/showthread.php?129458-请问PCM格式的音频流，每次读入或输出的块的大小是必须固定为4096B么\u0026s=e79e9dd1707157281e3725a163844c49 )。 如果是双声道的文件，采样数据按时间先后顺序交叉地存入。如图所示: aac的码流格式 AAC的ADTS头文件信息介绍、C++ 解析aac-adts的头部信息、AAC ADTS格式分析、保留用 AAC音频格式：Advanced Audio Coding(高级音频解码)，是一种由MPEG-4标准定义的有损音频压缩格式，由Fraunhofer发展，Dolby, Sony和AT\u0026T是主要的贡献者。ADIF：Audio Data Interchange Format 音频数据交换格式。这种格式的特征是可以确定的找到这个音频数据的开始，不需进行在音频数据流中间开始的解码，即它的解码必须在明确定义的开始处进行。故这种格式常用在磁盘文件中。 ADTS的全称是Audio Data Transport Stream。是AAC音频的传输流格式。","tags":["C++","RTSP"],"title":"第3、4讲：实现一个基于TCP的RTP同时传输h264和aac的RTSP服务器","url":"https://keepjolly.com/posts/learn/rtsp-server-of-h264-and-aac-based-on-rtp-over-tcp/"},{"categories":["learn"],"content":"AAC音频格式在MPEG-2（ISO-13318-7 2003）中有定义。AAC后来又被采用到MPEG-4标准中。这种格式的特征是它是一个有同步字的比特流，解码可以在这个流中任何位置开始。它的特征类似于mp3数据流格式。常用在数据传输中。 ADTS Header syncword ：总是0xFFF, 代表一个ADTS帧的开始, 用于同步.解码器可通过0xFFF确定每个ADTS的开始位置.因为它的存在，解码可以在这个流中任何位置开始, 即可以在任意帧解码。 ID：MPEG Version: 0 for MPEG-4，1 for MPEG-2 Layer：always: '00' protection_absent：Warning, set to 1 if there is no CRC and 0 if there is CRC profile：表示使用哪个级别的AAC profile的值等于 Audio Object Type的值减1. 但是有17个，2bit能表示？ profile = MPEG-4 Audio Object Type - 1 sampling_frequency_i","date":"2023-05-26T21:04:25+08:00","objectID":"d751bc6a8e22efd84a49dc27357be288_2","order":2,"summary":"AAC音频格式在MPEG-2（ISO-13318-7 2003）中有定义。AAC后来又被采用到MPEG-4标准中。这种格式的特征是它是一个有同步字的比特流，解码可以在这个流中任何位置开始。它的特征类似于mp3数据流格式。常用在数据传输中。 ADTS Header syncword ：总是0xFFF, 代表一个ADTS帧的开始, 用于同步.解码器可通过0xFFF确定每个ADTS的开始位置.因为它的存在，解码可以在这个流中任何位置开始, 即可以在任意帧解码。 ID：MPEG Version: 0 for MPEG-4，1 for MPEG-2 Layer：always: '00' protection_absent：Warning, set to 1 if there is no CRC and 0 if there is CRC profile：表示使用哪个级别的AAC profile的值等于 Audio Object Type的值减1. 但是有17个，2bit能表示？ profile = MPEG-4 Audio Object Type - 1 sampling_frequency_i","tags":["C++","RTSP"],"title":"第3、4讲：实现一个基于TCP的RTP同时传输h264和aac的RTSP服务器","url":"https://keepjolly.com/posts/learn/rtsp-server-of-h264-and-aac-based-on-rtp-over-tcp/"},{"categories":["learn"],"content":"ndex：采样率的下标 channel_configuration：声道数，比如2表示立体声双声道 接下来看下adts_variable_header(); aac_frame_length：一个ADTS帧的长度包括ADTS头和AAC原始流。 frame length, this value must include 7 or 9 bytes of header length: aac_frame_length = (protection_absent == 1 ? 7 : 9) + size(AACFrame) protection_absent=0时, header length=9bytes protection_absent=1时, header length=7bytes adts_buffer_fullness：0x7FF 说明是码率可变的码流。 number_of_raw_data_blocks_in_frame：表示ADTS帧中有number_of_raw_data_blocks_in_frame + 1个AAC原始帧。所以说number_of_raw_data_blo","date":"2023-05-26T21:04:25+08:00","objectID":"d751bc6a8e22efd84a49dc27357be288_3","order":3,"summary":"ndex：采样率的下标 channel_configuration：声道数，比如2表示立体声双声道 接下来看下adts_variable_header(); aac_frame_length：一个ADTS帧的长度包括ADTS头和AAC原始流。 frame length, this value must include 7 or 9 bytes of header length: aac_frame_length = (protection_absent == 1 ? 7 : 9) + size(AACFrame) protection_absent=0时, header length=9bytes protection_absent=1时, header length=7bytes adts_buffer_fullness：0x7FF 说明是码率可变的码流。 number_of_raw_data_blocks_in_frame：表示ADTS帧中有number_of_raw_data_blocks_in_frame + 1个AAC原始帧。所以说number_of_raw_data_blo","tags":["C++","RTSP"],"title":"第3、4讲：实现一个基于TCP的RTP同时传输h264和aac的RTSP服务器","url":"https://keepjolly.com/posts/learn/rtsp-server-of-h264-and-aac-based-on-rtp-over-tcp/"},{"categories":["learn"],"content":"cks_in_frame == 0 表示说ADTS帧中有一个AAC数据块。(一个AAC原始帧包含一段时间内1024个采样及相关数据) 代码 rtp.h、 rtp.cpp参考前文1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 ","date":"2023-05-26T21:04:25+08:00","objectID":"d751bc6a8e22efd84a49dc27357be288_4","order":4,"summary":"cks_in_frame == 0 表示说ADTS帧中有一个AAC数据块。(一个AAC原始帧包含一段时间内1024个采样及相关数据) 代码 rtp.h、 rtp.cpp参考前文1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 ","tags":["C++","RTSP"],"title":"第3、4讲：实现一个基于TCP的RTP同时传输h264和aac的RTSP服务器","url":"https://keepjolly.com/posts/learn/rtsp-server-of-h264-and-aac-based-on-rtp-over-tcp/"},{"categories":["learn"],"content":"131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 ","date":"2023-05-26T21:04:25+08:00","objectID":"d751bc6a8e22efd84a49dc27357be288_5","order":5,"summary":"131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 ","tags":["C++","RTSP"],"title":"第3、4讲：实现一个基于TCP的RTP同时传输h264和aac的RTSP服务器","url":"https://keepjolly.com/posts/learn/rtsp-server-of-h264-and-aac-based-on-rtp-over-tcp/"},{"categories":["learn"],"content":"256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 ","date":"2023-05-26T21:04:25+08:00","objectID":"d751bc6a8e22efd84a49dc27357be288_6","order":6,"summary":"256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 ","tags":["C++","RTSP"],"title":"第3、4讲：实现一个基于TCP的RTP同时传输h264和aac的RTSP服务器","url":"https://keepjolly.com/posts/learn/rtsp-server-of-h264-and-aac-based-on-rtp-over-tcp/"},{"categories":["learn"],"content":"381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 #include \"rtp.h\" #include \u0026lt;stdio.h\u003e #include \u0026lt;stdlib.h\u003e #include \u0026lt;strin","date":"2023-05-26T21:04:25+08:00","objectID":"d751bc6a8e22efd84a49dc27357be288_7","order":7,"summary":"381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 #include \"rtp.h\" #include \u0026lt;stdio.h\u003e #include \u0026lt;stdlib.h\u003e #include \u0026lt;strin","tags":["C++","RTSP"],"title":"第3、4讲：实现一个基于TCP的RTP同时传输h264和aac的RTSP服务器","url":"https://keepjolly.com/posts/learn/rtsp-server-of-h264-and-aac-based-on-rtp-over-tcp/"},{"categories":["learn"],"content":"g.h\u003e #include \u0026lt;unistd.h\u003e #include \u0026lt;arpa/inet.h\u003e #include \u0026lt;sys/socket.h\u003e #include \u0026lt;string\u003e #include \u0026lt;stdint.h\u003e #define SERVER_PORT 8554 #define SERVER_RTP_PORT 55532 #define SERVER_RTCP_PORT 55533 #define BUF_MAX_SIZE (1024*1024) #define AAC_FILE_NAME \"./data/test.aac\" static int createTcpSocket() { int sockfd; int on = 1; sockfd = socket(AF_INET, SOCK_STREAM, 0); if (sockfd \u0026lt; 0) return -1; setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (const char*)\u0026on, sizeof(on)); return sockfd","date":"2023-05-26T21:04:25+08:00","objectID":"d751bc6a8e22efd84a49dc27357be288_8","order":8,"summary":"g.h\u003e #include \u0026lt;unistd.h\u003e #include \u0026lt;arpa/inet.h\u003e #include \u0026lt;sys/socket.h\u003e #include \u0026lt;string\u003e #include \u0026lt;stdint.h\u003e #define SERVER_PORT 8554 #define SERVER_RTP_PORT 55532 #define SERVER_RTCP_PORT 55533 #define BUF_MAX_SIZE (1024*1024) #define AAC_FILE_NAME \"./data/test.aac\" static int createTcpSocket() { int sockfd; int on = 1; sockfd = socket(AF_INET, SOCK_STREAM, 0); if (sockfd \u0026lt; 0) return -1; setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (const char*)\u0026on, sizeof(on)); return sockfd","tags":["C++","RTSP"],"title":"第3、4讲：实现一个基于TCP的RTP同时传输h264和aac的RTSP服务器","url":"https://keepjolly.com/posts/learn/rtsp-server-of-h264-and-aac-based-on-rtp-over-tcp/"},{"categories":["learn"],"content":"; } static int createUdpSocket() { int sockfd; int on = 1; sockfd = socket(AF_INET, SOCK_DGRAM, 0); if (sockfd \u0026lt; 0) return -1; setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (const char*)\u0026on, sizeof(on)); return sockfd; } static int bindSocketAddr(int sockfd, const char* ip, int port) { struct sockaddr_in addr; addr.sin_family = AF_INET; addr.sin_port = htons(port); addr.sin_addr.s_addr = inet_addr(ip); if (bind(sockfd, (struct sockaddr*)\u0026addr, sizeof(struct sockaddr)) \u0026lt; 0) return -1; return","date":"2023-05-26T21:04:25+08:00","objectID":"d751bc6a8e22efd84a49dc27357be288_9","order":9,"summary":"; } static int createUdpSocket() { int sockfd; int on = 1; sockfd = socket(AF_INET, SOCK_DGRAM, 0); if (sockfd \u0026lt; 0) return -1; setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (const char*)\u0026on, sizeof(on)); return sockfd; } static int bindSocketAddr(int sockfd, const char* ip, int port) { struct sockaddr_in addr; addr.sin_family = AF_INET; addr.sin_port = htons(port); addr.sin_addr.s_addr = inet_addr(ip); if (bind(sockfd, (struct sockaddr*)\u0026addr, sizeof(struct sockaddr)) \u0026lt; 0) return -1; return","tags":["C++","RTSP"],"title":"第3、4讲：实现一个基于TCP的RTP同时传输h264和aac的RTSP服务器","url":"https://keepjolly.com/posts/learn/rtsp-server-of-h264-and-aac-based-on-rtp-over-tcp/"},{"categories":["learn"],"content":" 0; } static int closesocket(int fd){ close(fd); return 1; } struct AdtsHeader { unsigned int syncword; //12 bit 同步字 '1111 1111 1111'，一个ADTS帧的开始 uint8_t id; //1 bit 0代表MPEG-4, 1代表MPEG-2。 uint8_t layer; //2 bit 必须为0 uint8_t protectionAbsent; //1 bit 1代表没有CRC，0代表有CRC uint8_t profile; //2 bit AAC级别（MPEG-2 AAC中定义了3种profile，MPEG-4 AAC中定义了6种profile） uint8_t samplingFreqIndex; //4 bit 采样率 uint8_t privateBit; //1bit 编码时设置为0，解码时忽略 uint8_t channelCfg; //3 bit 声道数量 uint8_t originalCopy; //1bit 编码时设置为0，解码时忽","date":"2023-05-26T21:04:25+08:00","objectID":"d751bc6a8e22efd84a49dc27357be288_10","order":10,"summary":" 0; } static int closesocket(int fd){ close(fd); return 1; } struct AdtsHeader { unsigned int syncword; //12 bit 同步字 '1111 1111 1111'，一个ADTS帧的开始 uint8_t id; //1 bit 0代表MPEG-4, 1代表MPEG-2。 uint8_t layer; //2 bit 必须为0 uint8_t protectionAbsent; //1 bit 1代表没有CRC，0代表有CRC uint8_t profile; //2 bit AAC级别（MPEG-2 AAC中定义了3种profile，MPEG-4 AAC中定义了6种profile） uint8_t samplingFreqIndex; //4 bit 采样率 uint8_t privateBit; //1bit 编码时设置为0，解码时忽略 uint8_t channelCfg; //3 bit 声道数量 uint8_t originalCopy; //1bit 编码时设置为0，解码时忽","tags":["C++","RTSP"],"title":"第3、4讲：实现一个基于TCP的RTP同时传输h264和aac的RTSP服务器","url":"https://keepjolly.com/posts/learn/rtsp-server-of-h264-and-aac-based-on-rtp-over-tcp/"},{"categories":["learn"],"content":"略 uint8_t home; //1 bit 编码时设置为0，解码时忽略 uint8_t copyrightIdentificationBit; //1 bit 编码时设置为0，解码时忽略 uint8_t copyrightIdentificationStart; //1 bit 编码时设置为0，解码时忽略 unsigned int aacFrameLength; //13 bit 一个ADTS帧的长度包括ADTS头和AAC原始流 unsigned int adtsBufferFullness; //11 bit 缓冲区充满度，0x7FF说明是码率可变的码流，不需要此字段。CBR可能需要此字段，不同编码器使用情况不同。这个在使用音频编码的时候需要注意。 /* number_of_raw_data_blocks_in_frame * 表示ADTS帧中有number_of_raw_data_blocks_in_frame + 1个AAC原始帧 * 所以说number_of_raw_data_blocks_in_frame == 0 * 表示说ADTS帧中有一个AAC数据块并不是说没有。(","date":"2023-05-26T21:04:25+08:00","objectID":"d751bc6a8e22efd84a49dc27357be288_11","order":11,"summary":"略 uint8_t home; //1 bit 编码时设置为0，解码时忽略 uint8_t copyrightIdentificationBit; //1 bit 编码时设置为0，解码时忽略 uint8_t copyrightIdentificationStart; //1 bit 编码时设置为0，解码时忽略 unsigned int aacFrameLength; //13 bit 一个ADTS帧的长度包括ADTS头和AAC原始流 unsigned int adtsBufferFullness; //11 bit 缓冲区充满度，0x7FF说明是码率可变的码流，不需要此字段。CBR可能需要此字段，不同编码器使用情况不同。这个在使用音频编码的时候需要注意。 /* number_of_raw_data_blocks_in_frame * 表示ADTS帧中有number_of_raw_data_blocks_in_frame + 1个AAC原始帧 * 所以说number_of_raw_data_blocks_in_frame == 0 * 表示说ADTS帧中有一个AAC数据块并不是说没有。(","tags":["C++","RTSP"],"title":"第3、4讲：实现一个基于TCP的RTP同时传输h264和aac的RTSP服务器","url":"https://keepjolly.com/posts/learn/rtsp-server-of-h264-and-aac-based-on-rtp-over-tcp/"},{"categories":["learn"],"content":"一个AAC原始帧包含一段时间内1024个采样及相关数据) */ uint8_t numberOfRawDataBlockInFrame; //2 bit }; static int parseAdtsHeader(uint8_t* in, struct AdtsHeader* res) { static int frame_number = 0; memset(res, 0, sizeof(*res)); if ((in[0] == 0xFF) \u0026\u0026 ((in[1] \u0026 0xF0) == 0xF0)) { res-\u003eid = ((uint8_t)in[1] \u0026 0x08) \u003e\u003e 3;//第二个字节与0x08与运算之后，获得第13位bit对应的值 res-\u003elayer = ((uint8_t)in[1] \u0026 0x06) \u003e\u003e 1;//第二个字节与0x06与运算之后，右移1位，获得第14,15位两个bit对应的值 res-\u003eprotectionAbsent = (uint8_t)in[1] \u0026 0x01; res-\u003eprofile = ((uint8_t)in[2] \u0026 0xc0) \u003e\u003e ","date":"2023-05-26T21:04:25+08:00","objectID":"d751bc6a8e22efd84a49dc27357be288_12","order":12,"summary":"一个AAC原始帧包含一段时间内1024个采样及相关数据) */ uint8_t numberOfRawDataBlockInFrame; //2 bit }; static int parseAdtsHeader(uint8_t* in, struct AdtsHeader* res) { static int frame_number = 0; memset(res, 0, sizeof(*res)); if ((in[0] == 0xFF) \u0026\u0026 ((in[1] \u0026 0xF0) == 0xF0)) { res-\u003eid = ((uint8_t)in[1] \u0026 0x08) \u003e\u003e 3;//第二个字节与0x08与运算之后，获得第13位bit对应的值 res-\u003elayer = ((uint8_t)in[1] \u0026 0x06) \u003e\u003e 1;//第二个字节与0x06与运算之后，右移1位，获得第14,15位两个bit对应的值 res-\u003eprotectionAbsent = (uint8_t)in[1] \u0026 0x01; res-\u003eprofile = ((uint8_t)in[2] \u0026 0xc0) \u003e\u003e ","tags":["C++","RTSP"],"title":"第3、4讲：实现一个基于TCP的RTP同时传输h264和aac的RTSP服务器","url":"https://keepjolly.com/posts/learn/rtsp-server-of-h264-and-aac-based-on-rtp-over-tcp/"},{"categories":["learn"],"content":"6; res-\u003esamplingFreqIndex = ((uint8_t)in[2] \u0026 0x3c) \u003e\u003e 2; res-\u003eprivateBit = ((uint8_t)in[2] \u0026 0x02) \u003e\u003e 1; res-\u003echannelCfg = ((((uint8_t)in[2] \u0026 0x01) \u0026lt;\u0026lt; 2) | (((unsigned int)in[3] \u0026 0xc0) \u003e\u003e 6)); res-\u003eoriginalCopy = ((uint8_t)in[3] \u0026 0x20) \u003e\u003e 5; res-\u003ehome = ((uint8_t)in[3] \u0026 0x10) \u003e\u003e 4; res-\u003ecopyrightIdentificationBit = ((uint8_t)in[3] \u0026 0x08) \u003e\u003e 3; res-\u003ecopyrightIdentificationStart = (uint8_t)in[3] \u0026 0x04 \u003e\u003e 2; res-\u003eaacFrameLength = (((((unsigned int)in[3]) \u0026 0x03) \u0026lt;\u0026lt; 11) | (((unsig","date":"2023-05-26T21:04:25+08:00","objectID":"d751bc6a8e22efd84a49dc27357be288_13","order":13,"summary":"6; res-\u003esamplingFreqIndex = ((uint8_t)in[2] \u0026 0x3c) \u003e\u003e 2; res-\u003eprivateBit = ((uint8_t)in[2] \u0026 0x02) \u003e\u003e 1; res-\u003echannelCfg = ((((uint8_t)in[2] \u0026 0x01) \u0026lt;\u0026lt; 2) | (((unsigned int)in[3] \u0026 0xc0) \u003e\u003e 6)); res-\u003eoriginalCopy = ((uint8_t)in[3] \u0026 0x20) \u003e\u003e 5; res-\u003ehome = ((uint8_t)in[3] \u0026 0x10) \u003e\u003e 4; res-\u003ecopyrightIdentificationBit = ((uint8_t)in[3] \u0026 0x08) \u003e\u003e 3; res-\u003ecopyrightIdentificationStart = (uint8_t)in[3] \u0026 0x04 \u003e\u003e 2; res-\u003eaacFrameLength = (((((unsigned int)in[3]) \u0026 0x03) \u0026lt;\u0026lt; 11) | (((unsig","tags":["C++","RTSP"],"title":"第3、4讲：实现一个基于TCP的RTP同时传输h264和aac的RTSP服务器","url":"https://keepjolly.com/posts/learn/rtsp-server-of-h264-and-aac-based-on-rtp-over-tcp/"},{"categories":["learn"],"content":"ned int)in[4] \u0026 0xFF) \u0026lt;\u0026lt; 3) | ((unsigned int)in[5] \u0026 0xE0) \u003e\u003e 5); res-\u003eadtsBufferFullness = (((unsigned int)in[5] \u0026 0x1f) \u0026lt;\u0026lt; 6 | ((unsigned int)in[6] \u0026 0xfc) \u003e\u003e 2); res-\u003enumberOfRawDataBlockInFrame = ((uint8_t)in[6] \u0026 0x03); return 0; } else { printf(\"failed to parse adts header\\n\"); return -1; } } static int rtpSendAACFrame(int socket, const char* ip, int16_t port, struct RtpPacket* rtpPacket, uint8_t* frame, uint32_t frameSize) { //打包文档：https://blog.csdn.net/yangguoyu8023/article/d","date":"2023-05-26T21:04:25+08:00","objectID":"d751bc6a8e22efd84a49dc27357be288_14","order":14,"summary":"ned int)in[4] \u0026 0xFF) \u0026lt;\u0026lt; 3) | ((unsigned int)in[5] \u0026 0xE0) \u003e\u003e 5); res-\u003eadtsBufferFullness = (((unsigned int)in[5] \u0026 0x1f) \u0026lt;\u0026lt; 6 | ((unsigned int)in[6] \u0026 0xfc) \u003e\u003e 2); res-\u003enumberOfRawDataBlockInFrame = ((uint8_t)in[6] \u0026 0x03); return 0; } else { printf(\"failed to parse adts header\\n\"); return -1; } } static int rtpSendAACFrame(int socket, const char* ip, int16_t port, struct RtpPacket* rtpPacket, uint8_t* frame, uint32_t frameSize) { //打包文档：https://blog.csdn.net/yangguoyu8023/article/d","tags":["C++","RTSP"],"title":"第3、4讲：实现一个基于TCP的RTP同时传输h264和aac的RTSP服务器","url":"https://keepjolly.com/posts/learn/rtsp-server-of-h264-and-aac-based-on-rtp-over-tcp/"},{"categories":["learn"],"content":"vscode配置 vscode编译多个cpp文件 将${file}更改为选中部分，使之编译所有cpp文件。注意：变更之后本工程内不能出现多个main函数！！ 或者使用命令行：gcc file1.cpp file2.cpp main.cpp -o myprogram 或者使用cmake1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 #假设我们有三个源代码文件： #main.cpp #myclass.cpp #utils.cpp #以及两个头文件： #myclass.h #utils.h #那么，我们首先需要在CMakeLists.txt中指定这些源代码文件，并创建一个库： cmake_minimum_required(VERSION 3.5) project(myproject) ## 添加源代码文件 add_library(mylib SHARED myclass.cpp utils.cpp ) ## 包含头文件搜索路径 include_directori","date":"2023-05-26T21:03:50+08:00","objectID":"e219d930eff9c7bed03842ed05ac8e41_0","order":0,"summary":"vscode配置 vscode编译多个cpp文件 将${file}更改为选中部分，使之编译所有cpp文件。注意：变更之后本工程内不能出现多个main函数！！ 或者使用命令行：gcc file1.cpp file2.cpp main.cpp -o myprogram 或者使用cmake1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 #假设我们有三个源代码文件： #main.cpp #myclass.cpp #utils.cpp #以及两个头文件： #myclass.h #utils.h #那么，我们首先需要在CMakeLists.txt中指定这些源代码文件，并创建一个库： cmake_minimum_required(VERSION 3.5) project(myproject) ## 添加源代码文件 add_library(mylib SHARED myclass.cpp utils.cpp ) ## 包含头文件搜索路径 include_directori","tags":["C++","RTSP"],"title":"第2讲：实现一个传输h264的RTSP服务器","url":"https://keepjolly.com/posts/learn/h264-rtsp-server/"},{"categories":["learn"],"content":"es(${CMAKE_CURRENT_SOURCE_DIR}) ## 指定头文件 set(MY_HEADERS myclass.h utils.h ) ## 指定生成可执行文件，并链接库 add_executable(myapp main.cpp) target_link_libraries(myapp mylib) 项目功能 服务端需要源源不断的读取一个本地h264视频文件，并将读取到的h264视频流封装到RTP数据包中，再推送至客户端。这样我们就实现了一个简单的支持RTSP协议流媒体分发服务。RTP理解 RTP:实时传输协议（Real-time Transport Protocol或简写RTP）是一个网络传输协议. RTP定义了两种报文：RTP报文和RTCP报文，RTP报文用于传送媒体数据（如音频和视频），它由 RTP报头和数据两部分组成，RTP数据部分称为有效载荷(payload)；RTCP报文用于传送控制信息，以实现协议控制功能。RTP报文和RTCP 报文将作为下层协议（TCP/UDP）的数据单元进行传输。如果使用UDP，则RTP报文和RTCP报文分别使用两个相邻的UDP端口，","date":"2023-05-26T21:03:50+08:00","objectID":"e219d930eff9c7bed03842ed05ac8e41_1","order":1,"summary":"es(${CMAKE_CURRENT_SOURCE_DIR}) ## 指定头文件 set(MY_HEADERS myclass.h utils.h ) ## 指定生成可执行文件，并链接库 add_executable(myapp main.cpp) target_link_libraries(myapp mylib) 项目功能 服务端需要源源不断的读取一个本地h264视频文件，并将读取到的h264视频流封装到RTP数据包中，再推送至客户端。这样我们就实现了一个简单的支持RTSP协议流媒体分发服务。RTP理解 RTP:实时传输协议（Real-time Transport Protocol或简写RTP）是一个网络传输协议. RTP定义了两种报文：RTP报文和RTCP报文，RTP报文用于传送媒体数据（如音频和视频），它由 RTP报头和数据两部分组成，RTP数据部分称为有效载荷(payload)；RTCP报文用于传送控制信息，以实现协议控制功能。RTP报文和RTCP 报文将作为下层协议（TCP/UDP）的数据单元进行传输。如果使用UDP，则RTP报文和RTCP报文分别使用两个相邻的UDP端口，","tags":["C++","RTSP"],"title":"第2讲：实现一个传输h264的RTSP服务器","url":"https://keepjolly.com/posts/learn/h264-rtsp-server/"},{"categories":["learn"],"content":"RTP报文使用低端口，RTCP报文使用高端口。如果使用其它的下层协议（TCP），RTP报文和RTCP报文可以合并，放在一个数据单元中一起传送，控制信息在前，媒体数据在后。通常，RTP是由应用程序实现的。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 // RTP头的结构体 struct RtpHeader { /* byte 0 */ uint8_t csrcLen : 4; //CSRC计数器，占后4位，指示CSRC 标识符的个数。 uint8_t extension : 1; //占1位，后第五位，如果X=1，则在RTP报头后跟有一个扩展报头。 uint8_t padding : 1; //填充标志，占1位，如果P=1，则在该报文的尾部填充一个或多个额外的八位组，它们不是有效载荷的一部分。 uint8_t version : 2; //RTP协议的版本号，占2位，当前协议版本号为2。 /* byte 1 */ uint8_t ","date":"2023-05-26T21:03:50+08:00","objectID":"e219d930eff9c7bed03842ed05ac8e41_2","order":2,"summary":"RTP报文使用低端口，RTCP报文使用高端口。如果使用其它的下层协议（TCP），RTP报文和RTCP报文可以合并，放在一个数据单元中一起传送，控制信息在前，媒体数据在后。通常，RTP是由应用程序实现的。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 // RTP头的结构体 struct RtpHeader { /* byte 0 */ uint8_t csrcLen : 4; //CSRC计数器，占后4位，指示CSRC 标识符的个数。 uint8_t extension : 1; //占1位，后第五位，如果X=1，则在RTP报头后跟有一个扩展报头。 uint8_t padding : 1; //填充标志，占1位，如果P=1，则在该报文的尾部填充一个或多个额外的八位组，它们不是有效载荷的一部分。 uint8_t version : 2; //RTP协议的版本号，占2位，当前协议版本号为2。 /* byte 1 */ uint8_t ","tags":["C++","RTSP"],"title":"第2讲：实现一个传输h264的RTSP服务器","url":"https://keepjolly.com/posts/learn/h264-rtsp-server/"},{"categories":["learn"],"content":"payloadType : 7;//有效载荷类型，占7位，用于说明RTP报文中有效载荷的类型，如GSM音频、JPEM图像等。 uint8_t marker : 1;//标记，占1位，不同的有效载荷有不同的含义，对于视频，标记一帧的结束；对于音频，标记会话的开始。 /* bytes 2,3 */ uint16_t seq;//占16位，用于标识发送者所发送的RTP报文的序列号，每发送一个报文，序列号增1。接收者通过序列号来检测报文丢失情况，重新排序报文，恢复数据。 /* bytes 4-7 */ uint32_t timestamp;//占32位，时戳反映了该RTP报文的第一个八位组的采样时刻。接收者使用时戳来计算延迟和延迟抖动，并进行同步控制。 /* bytes 8-11 */ uint32_t ssrc;//占32位，用于标识同步信源。该标识符是随机选择的，参加同一视频会议的两个同步信源不能有相同的SSRC。 /*标准的RTP Header 还可能存在 0-15个特约信源(CSRC)标识符 每个CSRC标识符占32位，可以有0～15个。每个CSRC标识了包含在该RTP报文有效载荷中的","date":"2023-05-26T21:03:50+08:00","objectID":"e219d930eff9c7bed03842ed05ac8e41_3","order":3,"summary":"payloadType : 7;//有效载荷类型，占7位，用于说明RTP报文中有效载荷的类型，如GSM音频、JPEM图像等。 uint8_t marker : 1;//标记，占1位，不同的有效载荷有不同的含义，对于视频，标记一帧的结束；对于音频，标记会话的开始。 /* bytes 2,3 */ uint16_t seq;//占16位，用于标识发送者所发送的RTP报文的序列号，每发送一个报文，序列号增1。接收者通过序列号来检测报文丢失情况，重新排序报文，恢复数据。 /* bytes 4-7 */ uint32_t timestamp;//占32位，时戳反映了该RTP报文的第一个八位组的采样时刻。接收者使用时戳来计算延迟和延迟抖动，并进行同步控制。 /* bytes 8-11 */ uint32_t ssrc;//占32位，用于标识同步信源。该标识符是随机选择的，参加同一视频会议的两个同步信源不能有相同的SSRC。 /*标准的RTP Header 还可能存在 0-15个特约信源(CSRC)标识符 每个CSRC标识符占32位，可以有0～15个。每个CSRC标识了包含在该RTP报文有效载荷中的","tags":["C++","RTSP"],"title":"第2讲：实现一个传输h264的RTSP服务器","url":"https://keepjolly.com/posts/learn/h264-rtsp-server/"},{"categories":["learn"],"content":"所有特约信源 */ }; // RTP包的结构体 // 包含一个RTP头部和RTP载荷 struct RtpPacket { struct RtpHeader rtpHeader; uint8_t payload[0]; }; H264理解 链接I帧(intraframe frame),关键帧。 采用帧内压缩技术。I帧是所有数据帧最关键的帧，如果缺少了I帧，后面的数据帧将无法使用。IDR帧属于I帧。举例我将GOP中第一帧就可以称作I帧。在编码时，I帧是不需要参考前后帧数据，是独立编码。GOP至少有一个I帧。 P帧(forward Predicted frame)，向前参考帧。 压缩时，只参考前面已经处理的帧，采用帧间压缩技术。它占I帧的一半大小。 B帧(Bidirectionally predicted frame)，双向参考帧。 压缩时，既参考前面已经处理的帧，也参考后面的帧，帧间压缩技术。它占I帧1/4大小。压缩率变高 编码后数据，根据I帧P帧B帧的特性，在解码的过程是按I帧、P帧和B帧进行解码，文件播放还是按I帧、B帧和P帧顺序播放 IDR帧和I帧的关系： IDR(Instant","date":"2023-05-26T21:03:50+08:00","objectID":"e219d930eff9c7bed03842ed05ac8e41_4","order":4,"summary":"所有特约信源 */ }; // RTP包的结构体 // 包含一个RTP头部和RTP载荷 struct RtpPacket { struct RtpHeader rtpHeader; uint8_t payload[0]; }; H264理解 链接I帧(intraframe frame),关键帧。 采用帧内压缩技术。I帧是所有数据帧最关键的帧，如果缺少了I帧，后面的数据帧将无法使用。IDR帧属于I帧。举例我将GOP中第一帧就可以称作I帧。在编码时，I帧是不需要参考前后帧数据，是独立编码。GOP至少有一个I帧。 P帧(forward Predicted frame)，向前参考帧。 压缩时，只参考前面已经处理的帧，采用帧间压缩技术。它占I帧的一半大小。 B帧(Bidirectionally predicted frame)，双向参考帧。 压缩时，既参考前面已经处理的帧，也参考后面的帧，帧间压缩技术。它占I帧1/4大小。压缩率变高 编码后数据，根据I帧P帧B帧的特性，在解码的过程是按I帧、P帧和B帧进行解码，文件播放还是按I帧、B帧和P帧顺序播放 IDR帧和I帧的关系： IDR(Instant","tags":["C++","RTSP"],"title":"第2讲：实现一个传输h264的RTSP服务器","url":"https://keepjolly.com/posts/learn/h264-rtsp-server/"},{"categories":["learn"],"content":"annous Decoder Refresh) 解码器立即刷新 作用：在解码的过程，一旦有一帧数据出现错误，将是无法恢复的过程，后面数据帧不能使用。当有了IDR帧，解码器收到IDR帧时，就会将缓冲区的数据清空，找到第一个IDR帧，重新解码。I和IDR帧都使用帧内预测，在编码解码中为了方便，首个I帧要和其他I帧区别开，把第一个I帧叫IDR，这样方便控制编码和解码流程。IDR帧必须是一个I帧，但是I帧不一定是IDR帧，这个帧出现的时候，是告诉解码器，可以清除掉所有的参考帧，这是一个全新的序列，新的GOP已经开始。I帧有被跨帧参考的可能,IDR不会。 每个GOP中的第一帧就是IDR帧。H264码流进行RTP封装 RTP封装 H.264由一个一个的NALU组成，每个NALU之间使用00 00 00 01或00 00 01分隔开 F(forbiden):禁止位，占用NALU头的第一个位，当禁止位值为1时表示语法错误； NRI:参考级别，占用NALU头的第二到第三个位；值越大，该NAL越重要。 Type:Nalu数据类型，也就是标识该NALu的数据类型是哪种，占用NALU头的第4到第8个位； 图片","date":"2023-05-26T21:03:50+08:00","objectID":"e219d930eff9c7bed03842ed05ac8e41_5","order":5,"summary":"annous Decoder Refresh) 解码器立即刷新 作用：在解码的过程，一旦有一帧数据出现错误，将是无法恢复的过程，后面数据帧不能使用。当有了IDR帧，解码器收到IDR帧时，就会将缓冲区的数据清空，找到第一个IDR帧，重新解码。I和IDR帧都使用帧内预测，在编码解码中为了方便，首个I帧要和其他I帧区别开，把第一个I帧叫IDR，这样方便控制编码和解码流程。IDR帧必须是一个I帧，但是I帧不一定是IDR帧，这个帧出现的时候，是告诉解码器，可以清除掉所有的参考帧，这是一个全新的序列，新的GOP已经开始。I帧有被跨帧参考的可能,IDR不会。 每个GOP中的第一帧就是IDR帧。H264码流进行RTP封装 RTP封装 H.264由一个一个的NALU组成，每个NALU之间使用00 00 00 01或00 00 01分隔开 F(forbiden):禁止位，占用NALU头的第一个位，当禁止位值为1时表示语法错误； NRI:参考级别，占用NALU头的第二到第三个位；值越大，该NAL越重要。 Type:Nalu数据类型，也就是标识该NALu的数据类型是哪种，占用NALU头的第4到第8个位； 图片","tags":["C++","RTSP"],"title":"第2讲：实现一个传输h264的RTSP服务器","url":"https://keepjolly.com/posts/learn/h264-rtsp-server/"},{"categories":["learn"],"content":"来源 0x61 (0 11 00001) I帧 type = 1 0x41 (0 10 00001) P帧 type = 1 0x01 (0 00 00001) B帧 type = 1 打包方式：单NALU打包 所谓单NALU打包就是将一整个NALU的数据放入RTP包（RTP头+RTP载荷）的载荷中，这是最简单的一种方式。分片打包 每个RTP包都有大小限制的，因为RTP一般都是使用UDP发送，UDP没有流量控制，所以要限制每一次发送的大小，所以如果一个NALU的太大，就需要分成多个RTP包发送，至于如何分成多个RTP包，如下： 首先要明确，RTP包的格式是绝不会变的，永远都是RTP头+RTP载荷 RTP头部是固定的，那么只能在RTP载荷中去添加额外信息来说明这个RTP包是表示同一个NALU 如果是分片打包的话，那么在RTP载荷开始有两个字节的信息，然后再是NALU的内容 第一个字节FU Indicator，其格式如下 高三位：与NALU第一个字节的高三位相同 Type：28，表示该RTP包一个分片，为什么是28？因为H.264的规范中定义的，此外还有许多其他Type，这里不详讲 第二个","date":"2023-05-26T21:03:50+08:00","objectID":"e219d930eff9c7bed03842ed05ac8e41_6","order":6,"summary":"来源 0x61 (0 11 00001) I帧 type = 1 0x41 (0 10 00001) P帧 type = 1 0x01 (0 00 00001) B帧 type = 1 打包方式：单NALU打包 所谓单NALU打包就是将一整个NALU的数据放入RTP包（RTP头+RTP载荷）的载荷中，这是最简单的一种方式。分片打包 每个RTP包都有大小限制的，因为RTP一般都是使用UDP发送，UDP没有流量控制，所以要限制每一次发送的大小，所以如果一个NALU的太大，就需要分成多个RTP包发送，至于如何分成多个RTP包，如下： 首先要明确，RTP包的格式是绝不会变的，永远都是RTP头+RTP载荷 RTP头部是固定的，那么只能在RTP载荷中去添加额外信息来说明这个RTP包是表示同一个NALU 如果是分片打包的话，那么在RTP载荷开始有两个字节的信息，然后再是NALU的内容 第一个字节FU Indicator，其格式如下 高三位：与NALU第一个字节的高三位相同 Type：28，表示该RTP包一个分片，为什么是28？因为H.264的规范中定义的，此外还有许多其他Type，这里不详讲 第二个","tags":["C++","RTSP"],"title":"第2讲：实现一个传输h264的RTSP服务器","url":"https://keepjolly.com/posts/learn/h264-rtsp-server/"},{"categories":["learn"],"content":"字节FU Header，其格式如下 S：标记该分片打包的第一个RTP包 E：比较该分片打包的最后一个RTP包 Type：NALU的Type，不同与FU Indicator的type代码 **ffmpeg -i test.mp4 -codec copy -bsf: h264_mp4toannexb -f h264 test.h264 **生成h264文件rtp.h文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 #pragma once #include \u0026lt;stdint.h\u003e #define RTP_VERSION 2 #define RTP_PAYLOAD_TYPE_H264 96 #define RTP_PAYLOAD_TYPE_AAC 97 #de","date":"2023-05-26T21:03:50+08:00","objectID":"e219d930eff9c7bed03842ed05ac8e41_7","order":7,"summary":"字节FU Header，其格式如下 S：标记该分片打包的第一个RTP包 E：比较该分片打包的最后一个RTP包 Type：NALU的Type，不同与FU Indicator的type代码 **ffmpeg -i test.mp4 -codec copy -bsf: h264_mp4toannexb -f h264 test.h264 **生成h264文件rtp.h文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 #pragma once #include \u0026lt;stdint.h\u003e #define RTP_VERSION 2 #define RTP_PAYLOAD_TYPE_H264 96 #define RTP_PAYLOAD_TYPE_AAC 97 #de","tags":["C++","RTSP"],"title":"第2讲：实现一个传输h264的RTSP服务器","url":"https://keepjolly.com/posts/learn/h264-rtsp-server/"},{"categories":["learn"],"content":"fine RTP_HEADER_SIZE 12 #define RTP_MAX_PKT_SIZE 1400 /* * 0 1 2 3 * 7 6 5 4 3 2 1 0|7 6 5 4 3 2 1 0|7 6 5 4 3 2 1 0|7 6 5 4 3 2 1 0 * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ * |V=2|P|X| CC |M| PT | sequence number | * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ * | timestamp | * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ * | synchronization source (SSRC) identifier | * +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=","date":"2023-05-26T21:03:50+08:00","objectID":"e219d930eff9c7bed03842ed05ac8e41_8","order":8,"summary":"fine RTP_HEADER_SIZE 12 #define RTP_MAX_PKT_SIZE 1400 /* * 0 1 2 3 * 7 6 5 4 3 2 1 0|7 6 5 4 3 2 1 0|7 6 5 4 3 2 1 0|7 6 5 4 3 2 1 0 * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ * |V=2|P|X| CC |M| PT | sequence number | * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ * | timestamp | * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ * | synchronization source (SSRC) identifier | * +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=","tags":["C++","RTSP"],"title":"第2讲：实现一个传输h264的RTSP服务器","url":"https://keepjolly.com/posts/learn/h264-rtsp-server/"},{"categories":["learn"],"content":"+=+=+=+=+ * | contributing source (CSRC) identifiers | * : .... : * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ * */ struct RtpHeader { /* byte 0 */ uint8_t csrcLen : 4;//CSRC计数器，占4位，指示CSRC 标识符的个数。 uint8_t extension : 1;//占1位，如果X=1，则在RTP报头后跟有一个扩展报头。 uint8_t padding : 1;//填充标志，占1位，如果P=1，则在该报文的尾部填充一个或多个额外的八位组，它们不是有效载荷的一部分。 uint8_t version : 2;//RTP协议的版本号，占2位，当前协议版本号为2。 /* byte 1 */ uint8_t payloadType : 7;//有效载荷类型，占7位，用于说明RTP报文中有效载荷的类型，如GSM音频、JPEM图像等。 uint8_t marker : 1;//标记，","date":"2023-05-26T21:03:50+08:00","objectID":"e219d930eff9c7bed03842ed05ac8e41_9","order":9,"summary":"+=+=+=+=+ * | contributing source (CSRC) identifiers | * : .... : * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ * */ struct RtpHeader { /* byte 0 */ uint8_t csrcLen : 4;//CSRC计数器，占4位，指示CSRC 标识符的个数。 uint8_t extension : 1;//占1位，如果X=1，则在RTP报头后跟有一个扩展报头。 uint8_t padding : 1;//填充标志，占1位，如果P=1，则在该报文的尾部填充一个或多个额外的八位组，它们不是有效载荷的一部分。 uint8_t version : 2;//RTP协议的版本号，占2位，当前协议版本号为2。 /* byte 1 */ uint8_t payloadType : 7;//有效载荷类型，占7位，用于说明RTP报文中有效载荷的类型，如GSM音频、JPEM图像等。 uint8_t marker : 1;//标记，","tags":["C++","RTSP"],"title":"第2讲：实现一个传输h264的RTSP服务器","url":"https://keepjolly.com/posts/learn/h264-rtsp-server/"},{"categories":["learn"],"content":"占1位，不同的有效载荷有不同的含义，对于视频，标记一帧的结束；对于音频，标记会话的开始。 /* bytes 2,3 */ uint16_t seq;//占16位，用于标识发送者所发送的RTP报文的序列号，每发送一个报文，序列号增1。接收者通过序列号来检测报文丢失情况，重新排序报文，恢复数据。 /* bytes 4-7 */ uint32_t timestamp;//占32位，时戳反映了该RTP报文的第一个八位组的采样时刻。接收者使用时戳来计算延迟和延迟抖动，并进行同步控制。 /* bytes 8-11 */ uint32_t ssrc;//占32位，用于标识同步信源。该标识符是随机选择的，参加同一视频会议的两个同步信源不能有相同的SSRC。 /*标准的RTP Header 还可能存在 0-15个特约信源(CSRC)标识符 每个CSRC标识符占32位，可以有0～15个。每个CSRC标识了包含在该RTP报文有效载荷中的所有特约信源 */ }; struct RtpPacket { struct RtpHeader rtpHeader; uint8_t payload[0]; }; void","date":"2023-05-26T21:03:50+08:00","objectID":"e219d930eff9c7bed03842ed05ac8e41_10","order":10,"summary":"占1位，不同的有效载荷有不同的含义，对于视频，标记一帧的结束；对于音频，标记会话的开始。 /* bytes 2,3 */ uint16_t seq;//占16位，用于标识发送者所发送的RTP报文的序列号，每发送一个报文，序列号增1。接收者通过序列号来检测报文丢失情况，重新排序报文，恢复数据。 /* bytes 4-7 */ uint32_t timestamp;//占32位，时戳反映了该RTP报文的第一个八位组的采样时刻。接收者使用时戳来计算延迟和延迟抖动，并进行同步控制。 /* bytes 8-11 */ uint32_t ssrc;//占32位，用于标识同步信源。该标识符是随机选择的，参加同一视频会议的两个同步信源不能有相同的SSRC。 /*标准的RTP Header 还可能存在 0-15个特约信源(CSRC)标识符 每个CSRC标识符占32位，可以有0～15个。每个CSRC标识了包含在该RTP报文有效载荷中的所有特约信源 */ }; struct RtpPacket { struct RtpHeader rtpHeader; uint8_t payload[0]; }; void","tags":["C++","RTSP"],"title":"第2讲：实现一个传输h264的RTSP服务器","url":"https://keepjolly.com/posts/learn/h264-rtsp-server/"},{"categories":["learn"],"content":" rtpHeaderInit(struct RtpPacket* rtpPacket, uint8_t csrcLen, uint8_t extension, uint8_t padding, uint8_t version, uint8_t payloadType, uint8_t marker, uint16_t seq, uint32_t timestamp, uint32_t ssrc); int rtpSendPacketOverTcp(int clientSockfd, struct RtpPacket* rtpPacket, uint32_t dataSize, char channel); int rtpSendPacketOverUdp(int serverRtpSockfd, const char* ip, int16_t port, struct RtpPacket* rtpPacket, uint32_t dataSize); rtp.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 ","date":"2023-05-26T21:03:50+08:00","objectID":"e219d930eff9c7bed03842ed05ac8e41_11","order":11,"summary":" rtpHeaderInit(struct RtpPacket* rtpPacket, uint8_t csrcLen, uint8_t extension, uint8_t padding, uint8_t version, uint8_t payloadType, uint8_t marker, uint16_t seq, uint32_t timestamp, uint32_t ssrc); int rtpSendPacketOverTcp(int clientSockfd, struct RtpPacket* rtpPacket, uint32_t dataSize, char channel); int rtpSendPacketOverUdp(int serverRtpSockfd, const char* ip, int16_t port, struct RtpPacket* rtpPacket, uint32_t dataSize); rtp.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 ","tags":["C++","RTSP"],"title":"第2讲：实现一个传输h264的RTSP服务器","url":"https://keepjolly.com/posts/learn/h264-rtsp-server/"},{"categories":["learn"],"content":"24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 #include \"rtp.h\" #include \u0026lt;stdio.h\u003e #include \u0026lt;stdlib.h\u003e #include \u0026lt;string.h\u003e #include \u0026lt;unistd.h\u003e #include \u0026lt;arpa/inet.h\u003e #include \u0026lt;sys/socket.h\u003e #include \u0026lt;string\u003e #include \u0026lt;stdint.h\u003e void rtpHeaderInit(struct RtpPacket* rtpPacket, uint8_t csrcLen, uint8_t extension, uint8_t padding, uint8_t version, uint8_t payloadType, uint8_","date":"2023-05-26T21:03:50+08:00","objectID":"e219d930eff9c7bed03842ed05ac8e41_12","order":12,"summary":"24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 #include \"rtp.h\" #include \u0026lt;stdio.h\u003e #include \u0026lt;stdlib.h\u003e #include \u0026lt;string.h\u003e #include \u0026lt;unistd.h\u003e #include \u0026lt;arpa/inet.h\u003e #include \u0026lt;sys/socket.h\u003e #include \u0026lt;string\u003e #include \u0026lt;stdint.h\u003e void rtpHeaderInit(struct RtpPacket* rtpPacket, uint8_t csrcLen, uint8_t extension, uint8_t padding, uint8_t version, uint8_t payloadType, uint8_","tags":["C++","RTSP"],"title":"第2讲：实现一个传输h264的RTSP服务器","url":"https://keepjolly.com/posts/learn/h264-rtsp-server/"},{"categories":["learn"],"content":" RTSP是一个实时传输流协议，是一个应用层的协议。通常说的RTSP包括RTSP协议、RTP协议、RTCP协议，对于这些协议的作用简单的理解如下 RTSP协议：负责服务器与客户端之间的请求与响应 RTP协议：负责服务器与客户端之间传输媒体数据 RTCP协议：负责提供有关RTP传输质量的反馈，就是确保RTP传输的质量 三者的关系：rtsp并不会发送媒体数据，只是完成服务器和客户端之间的信令交互，rtp协议负责媒体数据传输，rtcp负责rtp数据包的监视和反馈。rtp和rtcp并没有规定传输层的类型，可以选择udp和tcp。Rtsp的传输层则要求是基于tcp。 准备工作 安装ffmepg 因为已经装过了，所以这里自行安装。安装wireshark sudo apt-get update sudo apt-get install wireshark 出现一个对话框选yes 将wireshark加入到当前用户，使其可以命令行访问，sudo vim /etc/group （应该在最后一行）找到wireshark，最后加入你的ubuntu用户名 wireshark:x:129:ubuntu用户名 然","date":"2023-05-26T21:02:17+08:00","objectID":"fa7946280d1507e1bcf076833c5744f6_0","order":0,"summary":" RTSP是一个实时传输流协议，是一个应用层的协议。通常说的RTSP包括RTSP协议、RTP协议、RTCP协议，对于这些协议的作用简单的理解如下 RTSP协议：负责服务器与客户端之间的请求与响应 RTP协议：负责服务器与客户端之间传输媒体数据 RTCP协议：负责提供有关RTP传输质量的反馈，就是确保RTP传输的质量 三者的关系：rtsp并不会发送媒体数据，只是完成服务器和客户端之间的信令交互，rtp协议负责媒体数据传输，rtcp负责rtp数据包的监视和反馈。rtp和rtcp并没有规定传输层的类型，可以选择udp和tcp。Rtsp的传输层则要求是基于tcp。 准备工作 安装ffmepg 因为已经装过了，所以这里自行安装。安装wireshark sudo apt-get update sudo apt-get install wireshark 出现一个对话框选yes 将wireshark加入到当前用户，使其可以命令行访问，sudo vim /etc/group （应该在最后一行）找到wireshark，最后加入你的ubuntu用户名 wireshark:x:129:ubuntu用户名 然","tags":["C++","RTSP"],"title":"第1讲：RTSP协议讲解及代码实现","url":"https://keepjolly.com/posts/learn/rtsp-protocol-explanation-and-code-implementation/"},{"categories":["learn"],"content":"后命令行输入sudo wireshark即可 参考博客 注意运行需要管理员运行，即sudo 选择本地回环：loopback 然后双击该行，进入监听 随后运行程序即可，然后再开启一个终端（ctrl+alt+T），输入ffplay -i rtsp://127.0.0.1:8554 然后wireshark就会出现 RTSP相关选项 options请求，用于查询RTSP服务器支持的方法（如DESCRIBE、SETUP、PLAY等）。 DESCRIBE请求，用于获取有关流媒体的信息，例如它的编码格式、分辨率、码率等。（sdp） SETUP请求，作用是指明媒体流该以什么方式传输；每个流PLAY之前必须执行SETUP操作；发送SETUP请求时，客户端会指定两个端口，一个端口用于接收RTP数据；另一个端口接收RTCP数据，偶数端口用来接收RTP数据，相邻的奇数端口用于接收RTCP数据！ PLAY请求，发送播放请求的时候可以指定播放区间！发起播放请求后，如果连接正常，则服务端开始播放，即开始向客户端按照之前在TRASPORT中约定好的方式发送音视频数据包！播放流程便这样开始了 Linux代码 1 2 3","date":"2023-05-26T21:02:17+08:00","objectID":"fa7946280d1507e1bcf076833c5744f6_1","order":1,"summary":"后命令行输入sudo wireshark即可 参考博客 注意运行需要管理员运行，即sudo 选择本地回环：loopback 然后双击该行，进入监听 随后运行程序即可，然后再开启一个终端（ctrl+alt+T），输入ffplay -i rtsp://127.0.0.1:8554 然后wireshark就会出现 RTSP相关选项 options请求，用于查询RTSP服务器支持的方法（如DESCRIBE、SETUP、PLAY等）。 DESCRIBE请求，用于获取有关流媒体的信息，例如它的编码格式、分辨率、码率等。（sdp） SETUP请求，作用是指明媒体流该以什么方式传输；每个流PLAY之前必须执行SETUP操作；发送SETUP请求时，客户端会指定两个端口，一个端口用于接收RTP数据；另一个端口接收RTCP数据，偶数端口用来接收RTP数据，相邻的奇数端口用于接收RTCP数据！ PLAY请求，发送播放请求的时候可以指定播放区间！发起播放请求后，如果连接正常，则服务端开始播放，即开始向客户端按照之前在TRASPORT中约定好的方式发送音视频数据包！播放流程便这样开始了 Linux代码 1 2 3","tags":["C++","RTSP"],"title":"第1讲：RTSP协议讲解及代码实现","url":"https://keepjolly.com/posts/learn/rtsp-protocol-explanation-and-code-implementation/"},{"categories":["learn"],"content":" 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 1","date":"2023-05-26T21:02:17+08:00","objectID":"fa7946280d1507e1bcf076833c5744f6_2","order":2,"summary":" 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 1","tags":["C++","RTSP"],"title":"第1讲：RTSP协议讲解及代码实现","url":"https://keepjolly.com/posts/learn/rtsp-protocol-explanation-and-code-implementation/"},{"categories":["learn"],"content":"54 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 2","date":"2023-05-26T21:02:17+08:00","objectID":"fa7946280d1507e1bcf076833c5744f6_3","order":3,"summary":"54 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 2","tags":["C++","RTSP"],"title":"第1讲：RTSP协议讲解及代码实现","url":"https://keepjolly.com/posts/learn/rtsp-protocol-explanation-and-code-implementation/"},{"categories":["learn"],"content":"79 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 #include \u0026lt;stdio.h\u003e #include \u0026lt;stdlib.h\u003e #include \u0026lt;string.h\u003e #include \u0026lt;unistd.h\u003e #include \u0026lt;arpa/inet.h\u003e #include \u0026lt;sys/socket.h\u003e #include \u0026lt;string\u003e #pragma comment(lib, \"ws2_32.lib\") #include \u0026lt;stdint.h\u003e #pragma warning( disable : 4996 ) #define SERVER_PORT 8554 #define SERVER_RTP_PORT 55532 #define SERVER_RTCP_PORT 55533 static int createTcpSocket() { int sockfd; int on = 1; sockfd = socket(AF_INET, SO","date":"2023-05-26T21:02:17+08:00","objectID":"fa7946280d1507e1bcf076833c5744f6_4","order":4,"summary":"79 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 #include \u0026lt;stdio.h\u003e #include \u0026lt;stdlib.h\u003e #include \u0026lt;string.h\u003e #include \u0026lt;unistd.h\u003e #include \u0026lt;arpa/inet.h\u003e #include \u0026lt;sys/socket.h\u003e #include \u0026lt;string\u003e #pragma comment(lib, \"ws2_32.lib\") #include \u0026lt;stdint.h\u003e #pragma warning( disable : 4996 ) #define SERVER_PORT 8554 #define SERVER_RTP_PORT 55532 #define SERVER_RTCP_PORT 55533 static int createTcpSocket() { int sockfd; int on = 1; sockfd = socket(AF_INET, SO","tags":["C++","RTSP"],"title":"第1讲：RTSP协议讲解及代码实现","url":"https://keepjolly.com/posts/learn/rtsp-protocol-explanation-and-code-implementation/"},{"categories":["tech"],"content":"主要参考博客: 在cmake工程中使用ZeroMQ,并加以补充 次要博客:Linux下ZeroMQ的编译安装与运行 文中提到arm,我只装在linux系统上，原本想用在通信中，最后还是用tcp实现了安装libzmq git clone https://github.com/zeromq/libzmq.git 在当前文件夹内下载libzmq文件夹,建议先cd到你想要放的文件夹 cd libzmq ./autogen.sh ./configure 安装zmqpp git clone https://github.com/zeromq/zmqpp.git 同理,找个文件夹放 make -j4 \u0026\u0026 sudo make install 上述安装完成后查看头文件和库文件路径如果当前在用户路径下 cd ../../user头文件路径 ： /usr/local/include 库文件路径 : /usr/local/libCMakeList.txt 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 cmake","date":"2023-05-26T20:55:03+08:00","objectID":"781c4a32a9ed8f05233aad0454e6728d_0","order":0,"summary":"主要参考博客: 在cmake工程中使用ZeroMQ,并加以补充 次要博客:Linux下ZeroMQ的编译安装与运行 文中提到arm,我只装在linux系统上，原本想用在通信中，最后还是用tcp实现了安装libzmq git clone https://github.com/zeromq/libzmq.git 在当前文件夹内下载libzmq文件夹,建议先cd到你想要放的文件夹 cd libzmq ./autogen.sh ./configure 安装zmqpp git clone https://github.com/zeromq/zmqpp.git 同理,找个文件夹放 make -j4 \u0026\u0026 sudo make install 上述安装完成后查看头文件和库文件路径如果当前在用户路径下 cd ../../user头文件路径 ： /usr/local/include 库文件路径 : /usr/local/libCMakeList.txt 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 cmake","tags":["Install"],"title":"zmq 小白简易安装C++版","url":"https://keepjolly.com/posts/tech/zmq-install/"},{"categories":["create"],"content":" 前言: 小白一个, 没有系统性的学习过python网络通信,只是单纯的cv加修改代码,仅作留念以及参考用,感谢互联网博主们和bito插件,使得chatGPT得以免费使用. 另外该多线程传输图片的速度比没有多线程执行还满,后续不对python服务端做优化,而改为C++服务端实现.写出来继续再分享把前篇博客地址python客户端 采用生存者消费者模式、模式２和joinablequeue库. 客户端实现还是比较简单的,麻烦在server端1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 import pickle import time from multiprocessing import Process,","date":"2023-05-26T20:34:37+08:00","objectID":"905182ba3023292b4fdc50ddecfd93e7_0","order":0,"summary":" 前言: 小白一个, 没有系统性的学习过python网络通信,只是单纯的cv加修改代码,仅作留念以及参考用,感谢互联网博主们和bito插件,使得chatGPT得以免费使用. 另外该多线程传输图片的速度比没有多线程执行还满,后续不对python服务端做优化,而改为C++服务端实现.写出来继续再分享把前篇博客地址python客户端 采用生存者消费者模式、模式２和joinablequeue库. 客户端实现还是比较简单的,麻烦在server端1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 import pickle import time from multiprocessing import Process,","tags":["Ctype","TCP","Python"],"title":"混合编程之多线程","url":"https://keepjolly.com/posts/create/ctype-with-threading/"},{"categories":["create"],"content":" JoinableQueue from queue import Queue from multiprocessing.connection import Client, Listener from client_apart import draw_box from image import plot_boxes, img_encode import os from natsort import ns, natsorted host = 'localhost' port = 9006 total_time = 0 def img_product(img_queue, path, path_mode='image'): if path_mode == 'image': img = img_encode(path) img_obj = {'frame_num': 1, 'image': img} # need frame_num? img_queue.put(img_obj) elif path_mode == 'dir': dir_list = os.listdir(path) file","date":"2023-05-26T20:34:37+08:00","objectID":"905182ba3023292b4fdc50ddecfd93e7_1","order":1,"summary":" JoinableQueue from queue import Queue from multiprocessing.connection import Client, Listener from client_apart import draw_box from image import plot_boxes, img_encode import os from natsort import ns, natsorted host = 'localhost' port = 9006 total_time = 0 def img_product(img_queue, path, path_mode='image'): if path_mode == 'image': img = img_encode(path) img_obj = {'frame_num': 1, 'image': img} # need frame_num? img_queue.put(img_obj) elif path_mode == 'dir': dir_list = os.listdir(path) file","tags":["Ctype","TCP","Python"],"title":"混合编程之多线程","url":"https://keepjolly.com/posts/create/ctype-with-threading/"},{"categories":["create"],"content":"s = natsorted(dir_list, alg=ns.PATH) # 顺序读取文件名 i = 1 for filename in files: img_path = path + '/' + filename img = img_encode(img_path) img_obj = {'frame_num': i, 'image': img} # need frame_num? i += 1 img_queue.put(img_obj) img_queue.put({'frame_num': 0, 'image': \"end\"}) # end signal img_queue.join() def server_consumer(img_queue): # 1. send data while True: img_obj = img_queue.get() if img_obj is None: client.close() # avoid connection-reset-by-peer break # exit end data_bytes = pickle.dumps(i","date":"2023-05-26T20:34:37+08:00","objectID":"905182ba3023292b4fdc50ddecfd93e7_2","order":2,"summary":"s = natsorted(dir_list, alg=ns.PATH) # 顺序读取文件名 i = 1 for filename in files: img_path = path + '/' + filename img = img_encode(img_path) img_obj = {'frame_num': i, 'image': img} # need frame_num? i += 1 img_queue.put(img_obj) img_queue.put({'frame_num': 0, 'image': \"end\"}) # end signal img_queue.join() def server_consumer(img_queue): # 1. send data while True: img_obj = img_queue.get() if img_obj is None: client.close() # avoid connection-reset-by-peer break # exit end data_bytes = pickle.dumps(i","tags":["Ctype","TCP","Python"],"title":"混合编程之多线程","url":"https://keepjolly.com/posts/create/ctype-with-threading/"},{"categories":["create"],"content":"mg_obj) start = int(round(time.time() * 1000)) start_time = time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime()) client.send(data_bytes) # 40ms/per send img # print('send cost time: ', (end - start)) img_queue.task_done() try: det_result = client.recv() end = int(round(time.time() * 1000)) end_time = time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime()) print('recv cost time: ', (end-start)) except EOFError: break det_result = pickle.loads(det_result) draw_box(det_result, img_obj) if __name__ == ","date":"2023-05-26T20:34:37+08:00","objectID":"905182ba3023292b4fdc50ddecfd93e7_3","order":3,"summary":"mg_obj) start = int(round(time.time() * 1000)) start_time = time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime()) client.send(data_bytes) # 40ms/per send img # print('send cost time: ', (end - start)) img_queue.task_done() try: det_result = client.recv() end = int(round(time.time() * 1000)) end_time = time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime()) print('recv cost time: ', (end-start)) except EOFError: break det_result = pickle.loads(det_result) draw_box(det_result, img_obj) if __name__ == ","tags":["Ctype","TCP","Python"],"title":"混合编程之多线程","url":"https://keepjolly.com/posts/create/ctype-with-threading/"},{"categories":["learn"],"content":"三维重建与极几何 单视图重构会受到多义性的影响，并且需要场景知识 而人眼是有两个眼睛，可以组合两种图片，采用多视图几何三维重建基础 三角化 未知参数：xyz 难点： 需要知道摄像机的内参矩阵，以及R、T矩阵，P点的三维坐标多视图几何的关键问题 极几何与基础矩阵 极几何 极几何描述了同一场景或者物体的两个视点图像间的几何关系；利用极几何解决第三个关键问题。 本质矩阵和基础矩阵就是通过p来求极线l平行视图 前向平移（无旋转） 用于深度估计，非课程内容 极几何约束--本质矩阵 通过极几何约束，将搜索范围缩小到对应的极线上。 本质矩阵是对规范化摄像机拍摄的两个视点图像间的极几何关系进行代数描述。 从本质矩阵到基础矩阵 基础矩阵是对一般的透视摄像机拍摄的两个视点图像间的极几何关系进行代数描述，具有泛化性 将O1看作世界坐标系 总结： 基础矩阵估计 八点算法 精度较低，采用 归一化八点法： 补充知识 单应矩阵 结合基础矩阵，使slam系统更鲁棒 空间平面在两个摄像机下的投影几何 双目立体视觉 基于平行试图的双目立体视觉 平行视图 F和e'的关系 平行视图基础矩阵 哦，平行视图基础矩阵长这样。 平行","date":"2023-05-26T20:28:22+08:00","objectID":"c1f228b8acef6451b4ac8c7297c30fb0_0","order":0,"summary":"三维重建与极几何 单视图重构会受到多义性的影响，并且需要场景知识 而人眼是有两个眼睛，可以组合两种图片，采用多视图几何三维重建基础 三角化 未知参数：xyz 难点： 需要知道摄像机的内参矩阵，以及R、T矩阵，P点的三维坐标多视图几何的关键问题 极几何与基础矩阵 极几何 极几何描述了同一场景或者物体的两个视点图像间的几何关系；利用极几何解决第三个关键问题。 本质矩阵和基础矩阵就是通过p来求极线l平行视图 前向平移（无旋转） 用于深度估计，非课程内容 极几何约束--本质矩阵 通过极几何约束，将搜索范围缩小到对应的极线上。 本质矩阵是对规范化摄像机拍摄的两个视点图像间的极几何关系进行代数描述。 从本质矩阵到基础矩阵 基础矩阵是对一般的透视摄像机拍摄的两个视点图像间的极几何关系进行代数描述，具有泛化性 将O1看作世界坐标系 总结： 基础矩阵估计 八点算法 精度较低，采用 归一化八点法： 补充知识 单应矩阵 结合基础矩阵，使slam系统更鲁棒 空间平面在两个摄像机下的投影几何 双目立体视觉 基于平行试图的双目立体视觉 平行视图 F和e'的关系 平行视图基础矩阵 哦，平行视图基础矩阵长这样。 平行","tags":["ComputerVision"],"title":"三维重建之路中","url":"https://keepjolly.com/posts/learn/three-d-reconstruction-3/"},{"categories":["learn"],"content":"视图极线、p和p'关系 我的问题：找到pp'之后可以解决唯一确定一个三维点，从而构建三维模型？p'怎么确定，扫描线上哪个点：相似性处理 平行视图三角测量（三角化） 双目立体视觉系统构建的核心问题 如何获得平行视图 如何建立点对应关系 图像校正 在平行视图下极线平行，且极点位于无穷远处，则极点坐标e'=[1;0;0]，只要令非平行视图的e'变为平行视图的e'即可12步 计算出e' 3步 e'变换到无穷远点 45步 计算出H、H'进行重采样 H的计算不能通过上述步骤完成，可能最后算出来不在同一个平面，因此利用求最小值来近似结果。 重采样就是将非平行视图的像素点利用H、H'分别映射到对应平行视图的像素点上 对应点搜索 相关匹配 对亮度敏感 归一化相关匹配 对应点问题 引入约束 其中顺序约束，要在物体没被遮挡的假设下成立 多视图几何 运动恢复结构问题 通过三维场景的多张图像，恢复出该场景的三维结构信息以及每张图片对应的摄像机参数 数学表达： 欧式结构恢复问题 124问题已经解决，只需要处理本质矩阵即可 无视E的符号及尺度 分解出E中的R矩阵 分解出E中的T向量 分解本质矩阵总结 计算三角化 欧","date":"2023-05-26T20:28:22+08:00","objectID":"c1f228b8acef6451b4ac8c7297c30fb0_1","order":1,"summary":"视图极线、p和p'关系 我的问题：找到pp'之后可以解决唯一确定一个三维点，从而构建三维模型？p'怎么确定，扫描线上哪个点：相似性处理 平行视图三角测量（三角化） 双目立体视觉系统构建的核心问题 如何获得平行视图 如何建立点对应关系 图像校正 在平行视图下极线平行，且极点位于无穷远处，则极点坐标e'=[1;0;0]，只要令非平行视图的e'变为平行视图的e'即可12步 计算出e' 3步 e'变换到无穷远点 45步 计算出H、H'进行重采样 H的计算不能通过上述步骤完成，可能最后算出来不在同一个平面，因此利用求最小值来近似结果。 重采样就是将非平行视图的像素点利用H、H'分别映射到对应平行视图的像素点上 对应点搜索 相关匹配 对亮度敏感 归一化相关匹配 对应点问题 引入约束 其中顺序约束，要在物体没被遮挡的假设下成立 多视图几何 运动恢复结构问题 通过三维场景的多张图像，恢复出该场景的三维结构信息以及每张图片对应的摄像机参数 数学表达： 欧式结构恢复问题 124问题已经解决，只需要处理本质矩阵即可 无视E的符号及尺度 分解出E中的R矩阵 分解出E中的T向量 分解本质矩阵总结 计算三角化 欧","tags":["ComputerVision"],"title":"三维重建之路中","url":"https://keepjolly.com/posts/learn/three-d-reconstruction-3/"},{"categories":["learn"],"content":"式结构恢复的歧义 仿射结构恢复问题 回顾：弱透视投影摄像机 v 应该是 1×3 仿射结构问题 基于因式分解的仿射结构恢复 数据中心化 这里有点没听懂，直接记结论了，为什么bi=0 因式分解 M也可以利用U3W3，S用V3T，解会不唯一，参考恢复歧义 总结 用欧式的话，每次拿两个点来算，会造成误差累积，而仿射一次性计算所有点，可以减少误差；但是仿射遇到被遮挡的点，其一列都不能参与计算，必须所有摄像机都看到 仿射结构恢复歧义 必须2mn\u003e8m+n-8才有解；2mn表示一对点在m个摄像机下映射到n个三维点透视变换结构恢复 透视结构恢复歧义 由歧义引出解 恢复方法 困难点：K1、K2、R、T均未知代数方法 F包含KRT矩阵信息，所以从F中分解出M1，M2矩阵即可 M1已知，M2未知 得到F关于A、b的表达式 计算A，b，求M2* N视图情况 Bundle Adjustment 代数法与分解法的局限性 最小化重投影误差 MiXj = xij' 即xij（真实值）的测量点 补充知识 PnP问题 原先欧式结构是已知三维点和像素点的对应关系求F→E→RT，而现在是已知摄像机位姿的视图来求新摄像机位姿，","date":"2023-05-26T20:28:22+08:00","objectID":"c1f228b8acef6451b4ac8c7297c30fb0_2","order":2,"summary":"式结构恢复的歧义 仿射结构恢复问题 回顾：弱透视投影摄像机 v 应该是 1×3 仿射结构问题 基于因式分解的仿射结构恢复 数据中心化 这里有点没听懂，直接记结论了，为什么bi=0 因式分解 M也可以利用U3W3，S用V3T，解会不唯一，参考恢复歧义 总结 用欧式的话，每次拿两个点来算，会造成误差累积，而仿射一次性计算所有点，可以减少误差；但是仿射遇到被遮挡的点，其一列都不能参与计算，必须所有摄像机都看到 仿射结构恢复歧义 必须2mn\u003e8m+n-8才有解；2mn表示一对点在m个摄像机下映射到n个三维点透视变换结构恢复 透视结构恢复歧义 由歧义引出解 恢复方法 困难点：K1、K2、R、T均未知代数方法 F包含KRT矩阵信息，所以从F中分解出M1，M2矩阵即可 M1已知，M2未知 得到F关于A、b的表达式 计算A，b，求M2* N视图情况 Bundle Adjustment 代数法与分解法的局限性 最小化重投影误差 MiXj = xij' 即xij（真实值）的测量点 补充知识 PnP问题 原先欧式结构是已知三维点和像素点的对应关系求F→E→RT，而现在是已知摄像机位姿的视图来求新摄像机位姿，","tags":["ComputerVision"],"title":"三维重建之路中","url":"https://keepjolly.com/posts/learn/three-d-reconstruction-3/"},{"categories":["learn"],"content":"运动恢复结构SfM系统解析 回顾 本质矩阵与单应矩阵区别 Global Bundle Adjustment P3P 已知内参矩阵，3个像素点坐标及对应三维点坐标，求RT SfM系统问题描述 内参读取exif文件即可 用欧式结构恢复（2视图） 对应点计算--特征提取sift 对应点计算--特征匹配 其中计算出x'y'的128维描述子后，与左图找出的所有描述子计算距离，选出top2的点，再进行求比，防止x'y'与两个点都距离近，从而不好区分该匹配哪个点，所以直接不要。但是会出现特征点匹配错误的问题。 如果图像多、特征数多，用词袋模型，相同的单词就构成一对匹配。对应点计算--特征拟合 RANSAC 减轻特征点匹配的错误 求解步骤结束 对应点求解（SIFT特征提取+近邻匹配） 求解基础矩阵F （RANSAC+归一化八点法） 求解本质矩阵 （下面三步老方法即可） 分解本质矩阵 三角化 基于增量法的SfM系统--OpenMVG（多视图） 预处理 增量法总体步骤 计算轨迹 根据预处理的结果特征提取和特征匹配就可以构建轨迹 计算共视图（连通图） G中选边e 选出初始两张图构建初始三维模型。图中是三维点","date":"2023-05-26T20:09:59+08:00","objectID":"0213615582e8099a78d2dd67f14f413a_0","order":0,"summary":"运动恢复结构SfM系统解析 回顾 本质矩阵与单应矩阵区别 Global Bundle Adjustment P3P 已知内参矩阵，3个像素点坐标及对应三维点坐标，求RT SfM系统问题描述 内参读取exif文件即可 用欧式结构恢复（2视图） 对应点计算--特征提取sift 对应点计算--特征匹配 其中计算出x'y'的128维描述子后，与左图找出的所有描述子计算距离，选出top2的点，再进行求比，防止x'y'与两个点都距离近，从而不好区分该匹配哪个点，所以直接不要。但是会出现特征点匹配错误的问题。 如果图像多、特征数多，用词袋模型，相同的单词就构成一对匹配。对应点计算--特征拟合 RANSAC 减轻特征点匹配的错误 求解步骤结束 对应点求解（SIFT特征提取+近邻匹配） 求解基础矩阵F （RANSAC+归一化八点法） 求解本质矩阵 （下面三步老方法即可） 分解本质矩阵 三角化 基于增量法的SfM系统--OpenMVG（多视图） 预处理 增量法总体步骤 计算轨迹 根据预处理的结果特征提取和特征匹配就可以构建轨迹 计算共视图（连通图） G中选边e 选出初始两张图构建初始三维模型。图中是三维点","tags":["ComputerVision"],"title":"三维重建之路下","url":"https://keepjolly.com/posts/learn/three-d-reconstruction-2/"},{"categories":["learn"],"content":"在两幅图上的像素点 两视图重构 t是轨迹中大于2的点，e是连通边上两张图所有的匹配点，取交集 增量法 有了连通图，就由处理所有图片变成处理G中的边即可。选取最大化是为了使得P3P结果更加鲁棒，因为新加入的图片与重建完的图片匹配的点最多，通过前两幅图的像素点和三维点来构建新图片的位姿，因为新图片和旧图片的像素点是匹配的（track含义），所以旧图片的像素点和三维点的匹配可以推出新图片也跟该三维点匹配，由此再知道内参矩阵，就可以构建出位姿就是把未构建三维点的像素点拿来三角化（并且是tracks中的点）删边优化结果补充知识 词袋模型 提取特征 数据库所有的图片找到所有sift特征点 聚类 学习视觉词典 考虑的问题：词典大小适中 计算效率：词汇树、AKM 利用视觉词汇出现的频率表达图像 基于词袋模型的图像检索 搜索中使用相似性度量 排除无意义特征：TF-IDF SLAM系统解析 优化问题 生成树 SLAM介绍 Simultaneous Localization and Mapping(SLAM)：Localization：传感器的位置和姿态； Mapping：地图构建 SLAM：同时定位和建图","date":"2023-05-26T20:09:59+08:00","objectID":"0213615582e8099a78d2dd67f14f413a_1","order":1,"summary":"在两幅图上的像素点 两视图重构 t是轨迹中大于2的点，e是连通边上两张图所有的匹配点，取交集 增量法 有了连通图，就由处理所有图片变成处理G中的边即可。选取最大化是为了使得P3P结果更加鲁棒，因为新加入的图片与重建完的图片匹配的点最多，通过前两幅图的像素点和三维点来构建新图片的位姿，因为新图片和旧图片的像素点是匹配的（track含义），所以旧图片的像素点和三维点的匹配可以推出新图片也跟该三维点匹配，由此再知道内参矩阵，就可以构建出位姿就是把未构建三维点的像素点拿来三角化（并且是tracks中的点）删边优化结果补充知识 词袋模型 提取特征 数据库所有的图片找到所有sift特征点 聚类 学习视觉词典 考虑的问题：词典大小适中 计算效率：词汇树、AKM 利用视觉词汇出现的频率表达图像 基于词袋模型的图像检索 搜索中使用相似性度量 排除无意义特征：TF-IDF SLAM系统解析 优化问题 生成树 SLAM介绍 Simultaneous Localization and Mapping(SLAM)：Localization：传感器的位置和姿态； Mapping：地图构建 SLAM：同时定位和建图","tags":["ComputerVision"],"title":"三维重建之路下","url":"https://keepjolly.com/posts/learn/three-d-reconstruction-2/"},{"categories":["learn"],"content":" 应用场景：定位、导航、避障、重建、交互 SLAM传感器分类：携带于机器人本体上的，例如机器人的轮式编码器、相机、激光等； 安装于环境中的，如导轨、二维码标志等； 按照相机的工作方式，相机可分为：单目（Monocular）、双目（Stereo）和深度相机（RGB-D） 地图： 地图的用处 ORB-SLAM 开源方案 数据结构与数据库 核心数据库内容： 地图点世界坐标系下的3D点坐标； 观测方向，即所有可以观测到该特征点的视图所产生的观测方向均值； 排除离特征点方向过大的视图，提高鲁棒 ORB特征描述子； 该点能被观测到的最大距离与最小距离； 排除离特征点过远过近的视图，提高鲁棒 关键帧摄像机位姿； 内参数； 该帧中提取到的全部ORB特征描述子（近似SIFT），以及它们和地图点之间的对应关系； 没有对应关系的等待下次重建时再填充 共视图（近似OpenMVG连通图）一种有向无权图，节点为关键帧，如两个节点共享的地图点数量大于阈值（至少15个），则存在一条边，边的权重设置为共享地图点的个数。 后续用于bundle adjustment优化 本质图是共视图的子图，保留所有节点，边数量相较于共视","date":"2023-05-26T20:09:59+08:00","objectID":"0213615582e8099a78d2dd67f14f413a_2","order":2,"summary":" 应用场景：定位、导航、避障、重建、交互 SLAM传感器分类：携带于机器人本体上的，例如机器人的轮式编码器、相机、激光等； 安装于环境中的，如导轨、二维码标志等； 按照相机的工作方式，相机可分为：单目（Monocular）、双目（Stereo）和深度相机（RGB-D） 地图： 地图的用处 ORB-SLAM 开源方案 数据结构与数据库 核心数据库内容： 地图点世界坐标系下的3D点坐标； 观测方向，即所有可以观测到该特征点的视图所产生的观测方向均值； 排除离特征点方向过大的视图，提高鲁棒 ORB特征描述子； 该点能被观测到的最大距离与最小距离； 排除离特征点过远过近的视图，提高鲁棒 关键帧摄像机位姿； 内参数； 该帧中提取到的全部ORB特征描述子（近似SIFT），以及它们和地图点之间的对应关系； 没有对应关系的等待下次重建时再填充 共视图（近似OpenMVG连通图）一种有向无权图，节点为关键帧，如两个节点共享的地图点数量大于阈值（至少15个），则存在一条边，边的权重设置为共享地图点的个数。 后续用于bundle adjustment优化 本质图是共视图的子图，保留所有节点，边数量相较于共视","tags":["ComputerVision"],"title":"三维重建之路下","url":"https://keepjolly.com/posts/learn/three-d-reconstruction-2/"},{"categories":["learn"],"content":"图更少，尽量减少边，其作用是加速回环校正的计算。 本质图=生成树+共视图边权重超过100的边+回环边 回环边：检测中自己生成的边，把视图拉回正常视角的边 生成树：Kruskal算法 系统工作流程 ⭐ 跟踪 核心功能：1. 确定当前帧位姿（RT）；2. 确定其是否将其作为关键帧地图初始化 初始位姿估计 2.2 对于每一个候选参考关键帧： 位姿优化 运用优化问题中的位姿优化公式 关键帧选取 Kref来自于数据集中的某帧 （前一步位姿优化中出现）建图 该线程核心功能：完成局部地图构建关键帧插入 地图点剔除 新地图点生成 局部地图优化 当前帧K1，共视关键帧K2，能看到但没有共视K3 局部关键帧剔除 回环校正 该线程核心功能：修正累计误差 回环候选帧检测 图中的第三步的绿云里红色圈假设就是关键帧，因为在前几帧里也出现了，然后选为候选帧计算Sim3变换 Sim3就是Sij 回环融合 位姿优化 总结 摄像机几何 在针孔摄像机下，建立世界坐标系上的三维点到像平面坐标系上像素点的关系外参矩阵将世界坐标系转换到摄像机坐标系 内参矩阵将摄像机坐标系上的空间点映射到像平面坐标上的像素点 摄像机标定 通过已知","date":"2023-05-26T20:09:59+08:00","objectID":"0213615582e8099a78d2dd67f14f413a_3","order":3,"summary":"图更少，尽量减少边，其作用是加速回环校正的计算。 本质图=生成树+共视图边权重超过100的边+回环边 回环边：检测中自己生成的边，把视图拉回正常视角的边 生成树：Kruskal算法 系统工作流程 ⭐ 跟踪 核心功能：1. 确定当前帧位姿（RT）；2. 确定其是否将其作为关键帧地图初始化 初始位姿估计 2.2 对于每一个候选参考关键帧： 位姿优化 运用优化问题中的位姿优化公式 关键帧选取 Kref来自于数据集中的某帧 （前一步位姿优化中出现）建图 该线程核心功能：完成局部地图构建关键帧插入 地图点剔除 新地图点生成 局部地图优化 当前帧K1，共视关键帧K2，能看到但没有共视K3 局部关键帧剔除 回环校正 该线程核心功能：修正累计误差 回环候选帧检测 图中的第三步的绿云里红色圈假设就是关键帧，因为在前几帧里也出现了，然后选为候选帧计算Sim3变换 Sim3就是Sij 回环融合 位姿优化 总结 摄像机几何 在针孔摄像机下，建立世界坐标系上的三维点到像平面坐标系上像素点的关系外参矩阵将世界坐标系转换到摄像机坐标系 内参矩阵将摄像机坐标系上的空间点映射到像平面坐标上的像素点 摄像机标定 通过已知","tags":["ComputerVision"],"title":"三维重建之路下","url":"https://keepjolly.com/posts/learn/three-d-reconstruction-2/"},{"categories":["learn"],"content":"二维点、三维点，利用p=MP求解摄像机内外参数矩阵，求出参数矩阵就可以应用摄像机几何 单视图几何 通过影消点和直线方向的关系，影消线和平面法向量的关系，摄像机几何（还是标定？）恢复三维场景结构 求出内参矩阵 利用影消点和直线方向的关系,找到互相垂直的点得到$v_{1}^{T} \\omega v_{2}=0 (\\theta =90^\\circ)$，然后利用$\\omega$获得K矩阵 求出平面法向量 求出K矩阵后利用影消线和平面法向量的关系，求出平面法向量 求出三维场景 已知内参矩阵、平面法向量、利用摄像机几何（还是摄像机标定？）中三维点和像素点的转换关系，求得最终的三维重建，不考虑外参矩阵三维重建基础知识 三角化 已知p, p', K, K', R, T，求三维点线性解法：奇异值分解 非线性解法：牛顿法、L-M方法 极几何 在同一场景下两个视点图像的几何关系：点线关系，点点关系，基础矩阵和极点关系 获得近似基础矩阵：归一化八点法 P3P 基于词袋模型的图像检索 本质矩阵于单应矩阵 Bundle Adjustment 双目立体视觉 利用平行视图获取深度构建双目立体视觉系统将非平行视图转换为","date":"2023-05-26T20:09:59+08:00","objectID":"0213615582e8099a78d2dd67f14f413a_4","order":4,"summary":"二维点、三维点，利用p=MP求解摄像机内外参数矩阵，求出参数矩阵就可以应用摄像机几何 单视图几何 通过影消点和直线方向的关系，影消线和平面法向量的关系，摄像机几何（还是标定？）恢复三维场景结构 求出内参矩阵 利用影消点和直线方向的关系,找到互相垂直的点得到$v_{1}^{T} \\omega v_{2}=0 (\\theta =90^\\circ)$，然后利用$\\omega$获得K矩阵 求出平面法向量 求出K矩阵后利用影消线和平面法向量的关系，求出平面法向量 求出三维场景 已知内参矩阵、平面法向量、利用摄像机几何（还是摄像机标定？）中三维点和像素点的转换关系，求得最终的三维重建，不考虑外参矩阵三维重建基础知识 三角化 已知p, p', K, K', R, T，求三维点线性解法：奇异值分解 非线性解法：牛顿法、L-M方法 极几何 在同一场景下两个视点图像的几何关系：点线关系，点点关系，基础矩阵和极点关系 获得近似基础矩阵：归一化八点法 P3P 基于词袋模型的图像检索 本质矩阵于单应矩阵 Bundle Adjustment 双目立体视觉 利用平行视图获取深度构建双目立体视觉系统将非平行视图转换为","tags":["ComputerVision"],"title":"三维重建之路下","url":"https://keepjolly.com/posts/learn/three-d-reconstruction-2/"},{"categories":["learn"],"content":"平行视图 平行视图的双目立体视觉 平行视图基础矩阵：$F = \\begin{bmatrix} 0\u00260 \u00260 \\ 0\u00260 \u0026-1 \\ 0\u00261 \u00260 \\end{bmatrix}$ 平行视图的极线平行于u轴，p和p'的v坐标相等，因此沿着扫描线搜索即可 对应点搜索使用归一化相关匹配，再加上一些约束 由此构建点对应关系 通过p'和p坐标，利用平行视图三角化公式$p_{u}-p_{u}^{\\prime}=\\frac{B \\cdot f}{z}$，就可求出深度z 有了深度，就可以形成深度图或者3D电影，构建双目立体视觉系统 多视图几何 通过三维场景的多张二维图像，恢复出该场景的三维结构信息以及每张图片对应的摄像机参数欧式结构恢复 求解步骤：求解基础矩阵F (归一化八点法) 求解本质矩阵 $(E=K_{2}^{T} F K_{1})$ 分解本质矩阵 三角化 （线性法、非线性法） SfM系统 欧式结构运动恢复(两视图) 欧式结构恢复(两视图)求解步骤：对应点求解（SIFT特征提取+近邻匹配） 求解基础矩阵F （RANSAC+归一化八点法） 求解本质矩阵 $E=K_{2}^{T} F K_{1}$ 分解","date":"2023-05-26T20:09:59+08:00","objectID":"0213615582e8099a78d2dd67f14f413a_5","order":5,"summary":"平行视图 平行视图的双目立体视觉 平行视图基础矩阵：$F = \\begin{bmatrix} 0\u00260 \u00260 \\ 0\u00260 \u0026-1 \\ 0\u00261 \u00260 \\end{bmatrix}$ 平行视图的极线平行于u轴，p和p'的v坐标相等，因此沿着扫描线搜索即可 对应点搜索使用归一化相关匹配，再加上一些约束 由此构建点对应关系 通过p'和p坐标，利用平行视图三角化公式$p_{u}-p_{u}^{\\prime}=\\frac{B \\cdot f}{z}$，就可求出深度z 有了深度，就可以形成深度图或者3D电影，构建双目立体视觉系统 多视图几何 通过三维场景的多张二维图像，恢复出该场景的三维结构信息以及每张图片对应的摄像机参数欧式结构恢复 求解步骤：求解基础矩阵F (归一化八点法) 求解本质矩阵 $(E=K_{2}^{T} F K_{1})$ 分解本质矩阵 三角化 （线性法、非线性法） SfM系统 欧式结构运动恢复(两视图) 欧式结构恢复(两视图)求解步骤：对应点求解（SIFT特征提取+近邻匹配） 求解基础矩阵F （RANSAC+归一化八点法） 求解本质矩阵 $E=K_{2}^{T} F K_{1}$ 分解","tags":["ComputerVision"],"title":"三维重建之路下","url":"https://keepjolly.com/posts/learn/three-d-reconstruction-2/"},{"categories":["tech"],"content":"安装git和go Installing on Windows git 官方文档 There are also a few ways to install Git on Windows. The most official build is available for download on the Git website. Just go to https://git-scm.com/download/win and the download will start automatically. Note that this is a project called Git for Windows, which is separate from Git itself; for more information on it, go to https://gitforwindows.org. To get an automated installation you can use the Git Chocolatey package. Note that the Chocolatey pack","date":"2023-05-24T21:51:34+08:00","objectID":"13b625fdfc595633a6f76460e9c754c7_0","order":0,"summary":"安装git和go Installing on Windows git 官方文档 There are also a few ways to install Git on Windows. The most official build is available for download on the Git website. Just go to https://git-scm.com/download/win and the download will start automatically. Note that this is a project called Git for Windows, which is separate from Git itself; for more information on it, go to https://gitforwindows.org. To get an automated installation you can use the Git Chocolatey package. Note that the Chocolatey pack","tags":["Blog","Hugo"],"title":"hugo主题-meme配置","url":"https://keepjolly.com/posts/tech/hugo_theme_meme_configuration/"},{"categories":["tech"],"content":"age is community maintained.Go installation 官方文档 download goOpen the MSI file you downloaded and follow the prompts to install Go.By default, the installer will install Go to Program Files or Program Files (x86). You can change the location as needed. After installing, you will need to close and reopen any open command prompts so that changes to the environment made by the installer are reflected at the command prompt.(安装完成后关闭所有cmd) Verify that you've installed Go. In Windows, click the Start me","date":"2023-05-24T21:51:34+08:00","objectID":"13b625fdfc595633a6f76460e9c754c7_1","order":1,"summary":"age is community maintained.Go installation 官方文档 download goOpen the MSI file you downloaded and follow the prompts to install Go.By default, the installer will install Go to Program Files or Program Files (x86). You can change the location as needed. After installing, you will need to close and reopen any open command prompts so that changes to the environment made by the installer are reflected at the command prompt.(安装完成后关闭所有cmd) Verify that you've installed Go. In Windows, click the Start me","tags":["Blog","Hugo"],"title":"hugo主题-meme配置","url":"https://keepjolly.com/posts/tech/hugo_theme_meme_configuration/"},{"categories":["learn"],"content":"instant-ngp --scene data/nerf/fox 视频：计算机视觉之三维重建 找到一个同样是这个视频的笔记网址 摄像机几何 针孔模型 \u0026 透镜 针孔摄像机 物体直接映射到胶片上，会导致多个点映射到同一个点上，因此采用针孔成像。如下图，其中x,y,z是世界点Pw在摄像机坐标系上的坐标，已知；f是焦距，已知；由此可求得P'在像平面坐标。 加透镜 可以让上述摄像机保持焦距越小，图像越清晰的情况下，增加亮度。 透镜将所有平行于光轴的光线汇聚到焦点，焦点到透镜中心的距离称为焦距（非上述焦距）。穿过透镜中心的光线的方向不会改变。 产生的问题：失焦，物体“聚焦”有特定距离，一些地方清晰，一些地方模糊 径向畸变 摄像机几何 为了将像平面图像（连续）转到数字图像（离散），使其可被建模。进行一些修正： 前三步是摄像机坐标系下 偏置 单位变换 （下图f=f+z0,简化符号）转化为齐次坐标系 其中M是相机内参，不变矩阵，P是3D点，变化向量，建立了P'到P的线性关系 插曲：将坐标转为线性关系 齐次坐标：EtoH：多加一维，值为1；HtoE：前n-1维除以第n维（E欧氏空间、H齐次空间） （α","date":"2023-03-26T09:07:02.96Z","objectID":"20e4e1a168bbfd15518900ad8105bdf8_0","order":0,"summary":"instant-ngp --scene data/nerf/fox 视频：计算机视觉之三维重建 找到一个同样是这个视频的笔记网址 摄像机几何 针孔模型 \u0026 透镜 针孔摄像机 物体直接映射到胶片上，会导致多个点映射到同一个点上，因此采用针孔成像。如下图，其中x,y,z是世界点Pw在摄像机坐标系上的坐标，已知；f是焦距，已知；由此可求得P'在像平面坐标。 加透镜 可以让上述摄像机保持焦距越小，图像越清晰的情况下，增加亮度。 透镜将所有平行于光轴的光线汇聚到焦点，焦点到透镜中心的距离称为焦距（非上述焦距）。穿过透镜中心的光线的方向不会改变。 产生的问题：失焦，物体“聚焦”有特定距离，一些地方清晰，一些地方模糊 径向畸变 摄像机几何 为了将像平面图像（连续）转到数字图像（离散），使其可被建模。进行一些修正： 前三步是摄像机坐标系下 偏置 单位变换 （下图f=f+z0,简化符号）转化为齐次坐标系 其中M是相机内参，不变矩阵，P是3D点，变化向量，建立了P'到P的线性关系 插曲：将坐标转为线性关系 齐次坐标：EtoH：多加一维，值为1；HtoE：前n-1维除以第n维（E欧氏空间、H齐次空间） （α","tags":["ComputerVision"],"title":"三维重建之路上","url":"https://keepjolly.com/archives/three-d-reconstruction-1/"},{"categories":["learn"],"content":"=fk。β=fl） 约定后续Ph写做P，除非特别指明是欧式空间下的P 摄像机偏移 工艺问题，不能垂直，所以需要加偏移系数 自由度：α，β，θ，Cx，Cy 世界坐标系转换到摄像机坐标系 摄像机模型P'=K[R T]Pw RT矩阵具体内容不知道是什么，如有链接欢迎评论，后面的摄像机标定的补充知识有讲物理意义、自由度、欧式空间 自由度：五个内参+6个外参（3个旋转3个平移）= 11个自由度（图中应该是1×4） 齐次空间转换为欧式空间： Fauferas定理 零倾斜就是没有θ 投影变换的性质 其他摄像机模型 规范化摄像机 弱透视投影摄像机 当相对景深小于其与相机的距离时，可以对其进行一些简化，就简单地认为这些点就在一个深度上，直接投影到平面上，适合拍摄中远距离图像 其中f'为焦距，z0是物体到光圈O的距离，xy物体真实位置，x'y'像素面位置。这样子将z0固定为常数，使其为线性变换，而不是非线性变换。 v应该是 1×3 矩阵，Abv是K[R T]之后的结果 正交投影摄像机 当摄像机中心到像平面距离无限远时，直接映射。 总结 正交投影，更多地应用在建筑设计AUTOCAD，或者工业设计行业 弱透视","date":"2023-03-26T09:07:02.96Z","objectID":"20e4e1a168bbfd15518900ad8105bdf8_1","order":1,"summary":"=fk。β=fl） 约定后续Ph写做P，除非特别指明是欧式空间下的P 摄像机偏移 工艺问题，不能垂直，所以需要加偏移系数 自由度：α，β，θ，Cx，Cy 世界坐标系转换到摄像机坐标系 摄像机模型P'=K[R T]Pw RT矩阵具体内容不知道是什么，如有链接欢迎评论，后面的摄像机标定的补充知识有讲物理意义、自由度、欧式空间 自由度：五个内参+6个外参（3个旋转3个平移）= 11个自由度（图中应该是1×4） 齐次空间转换为欧式空间： Fauferas定理 零倾斜就是没有θ 投影变换的性质 其他摄像机模型 规范化摄像机 弱透视投影摄像机 当相对景深小于其与相机的距离时，可以对其进行一些简化，就简单地认为这些点就在一个深度上，直接投影到平面上，适合拍摄中远距离图像 其中f'为焦距，z0是物体到光圈O的距离，xy物体真实位置，x'y'像素面位置。这样子将z0固定为常数，使其为线性变换，而不是非线性变换。 v应该是 1×3 矩阵，Abv是K[R T]之后的结果 正交投影摄像机 当摄像机中心到像平面距离无限远时，直接映射。 总结 正交投影，更多地应用在建筑设计AUTOCAD，或者工业设计行业 弱透视","tags":["ComputerVision"],"title":"三维重建之路上","url":"https://keepjolly.com/archives/three-d-reconstruction-1/"},{"categories":["learn"],"content":"投影在数学方面更简单，当物体较小且较远时准确，常用于图像识别任务 透视投影对于3D到2D映射的建模更为准确，用于运动恢复结构或SLAM 参考博客 机器视觉学习（七）摄像机模型 常用相机投影及畸变模型（针孔|广角|鱼眼） 针孔相机成像模型 二维坐标转换与坐标系转换 三维空间中的几何变换-平移旋转缩放 计算机图形学 补充知识 线性方程组的最小二乘解 齐次线性方程组的最小二乘解 只需记住齐次线性用奇异值分解即可，后面经常用 非线性方程组的最小二乘解 只需记住齐次非线性用牛顿、L-M方法即可，后面经常用 摄像机标定 摄像机标定，即已知点坐标求解摄像机内、外参数矩阵，使得二维转三维可行。 更换符号：p=P'（像平面P'变为p） P=Pw（世界坐标Pw变为P）。 标定问题基本思路 超定齐次方程的原因 转换成矩阵形式 利用奇异值分解求超定齐次方程 其中M求解的值是真实世界的值差一个放大系数 提取摄像机系数 详细过程参见：提取摄像机内参数 课堂知识：互相垂直点乘·为0（r1r2r3互相垂直）；r1×r2=r3 （另外图中矩阵大小可能有误） 求u0、v0，放大系数ρ 不知道为什么a有时候转置有时候不转置","date":"2023-03-26T09:07:02.96Z","objectID":"20e4e1a168bbfd15518900ad8105bdf8_2","order":2,"summary":"投影在数学方面更简单，当物体较小且较远时准确，常用于图像识别任务 透视投影对于3D到2D映射的建模更为准确，用于运动恢复结构或SLAM 参考博客 机器视觉学习（七）摄像机模型 常用相机投影及畸变模型（针孔|广角|鱼眼） 针孔相机成像模型 二维坐标转换与坐标系转换 三维空间中的几何变换-平移旋转缩放 计算机图形学 补充知识 线性方程组的最小二乘解 齐次线性方程组的最小二乘解 只需记住齐次线性用奇异值分解即可，后面经常用 非线性方程组的最小二乘解 只需记住齐次非线性用牛顿、L-M方法即可，后面经常用 摄像机标定 摄像机标定，即已知点坐标求解摄像机内、外参数矩阵，使得二维转三维可行。 更换符号：p=P'（像平面P'变为p） P=Pw（世界坐标Pw变为P）。 标定问题基本思路 超定齐次方程的原因 转换成矩阵形式 利用奇异值分解求超定齐次方程 其中M求解的值是真实世界的值差一个放大系数 提取摄像机系数 详细过程参见：提取摄像机内参数 课堂知识：互相垂直点乘·为0（r1r2r3互相垂直）；r1×r2=r3 （另外图中矩阵大小可能有误） 求u0、v0，放大系数ρ 不知道为什么a有时候转置有时候不转置","tags":["ComputerVision"],"title":"三维重建之路上","url":"https://keepjolly.com/archives/three-d-reconstruction-1/"},{"categories":["learn"],"content":" u0、v0就是偏置Cx、Cy r1·r3 = 0；r2·r3=0；r3·r3=1，且都互不相关，正交矩阵 （图中是点乘不是叉乘） 求θ 然后左式子点乘 比上 右式子点乘即可出现下图 （具体看视频，虽然讲的也不怎么清楚，参考弹幕或前面的链接） ps. 如果θ=90° 则符合faugeras定理 求α和β 如果α=β，则符合faugeras定理 求外参r1，r2，r3 求外参T K满秩所必可逆 总结 取点不能都位于同一平面，否则三点确定一个平面，多余的点都是没用的 径向畸变的摄像机标定 畸变模型 Sλ就是畸变矩阵 非线性求解 m1m2m3是提取摄像机系数里的投影矩阵的三行 求解线性部分加快迭代 ui÷vi即在原世界坐标下的等比例缩放直线，就那个d2 补充知识 2D平面上的变换 欧式变换 相似变换 仿射变换 透视变换 3D变换 欧式+相似变换 仿射变换 透视变换 单视图几何 用单张图构建三维模型 单视测量 00:17:46 影消点 无穷远点、无穷远线、无穷远面 2D空间 用l表示一条直线 x是两条直线的交点，x是l和l'的叉乘 2D空间中的无穷远点即当前直线方向的前两行加0即可。[a,b,","date":"2023-03-26T09:07:02.96Z","objectID":"20e4e1a168bbfd15518900ad8105bdf8_3","order":3,"summary":" u0、v0就是偏置Cx、Cy r1·r3 = 0；r2·r3=0；r3·r3=1，且都互不相关，正交矩阵 （图中是点乘不是叉乘） 求θ 然后左式子点乘 比上 右式子点乘即可出现下图 （具体看视频，虽然讲的也不怎么清楚，参考弹幕或前面的链接） ps. 如果θ=90° 则符合faugeras定理 求α和β 如果α=β，则符合faugeras定理 求外参r1，r2，r3 求外参T K满秩所必可逆 总结 取点不能都位于同一平面，否则三点确定一个平面，多余的点都是没用的 径向畸变的摄像机标定 畸变模型 Sλ就是畸变矩阵 非线性求解 m1m2m3是提取摄像机系数里的投影矩阵的三行 求解线性部分加快迭代 ui÷vi即在原世界坐标下的等比例缩放直线，就那个d2 补充知识 2D平面上的变换 欧式变换 相似变换 仿射变换 透视变换 3D变换 欧式+相似变换 仿射变换 透视变换 单视图几何 用单张图构建三维模型 单视测量 00:17:46 影消点 无穷远点、无穷远线、无穷远面 2D空间 用l表示一条直线 x是两条直线的交点，x是l和l'的叉乘 2D空间中的无穷远点即当前直线方向的前两行加0即可。[a,b,","tags":["ComputerVision"],"title":"三维重建之路上","url":"https://keepjolly.com/archives/three-d-reconstruction-1/"},{"categories":["learn"],"content":"0] 2D空间中的无穷远直线 3D空间 3D空间的面 3D空间中的直线 为了方便，将其直线定义为直线方向，或者两平面的交线 3D空间中的无穷远点 根据2D中的无穷远点，即在直线方向上（a,b,c）最后一行多加0即可 3D空间中的无穷远平面 无穷远直线即为同个平面上的平行线上的无穷远点集汇聚成无穷远直线；或者是两个平行平面在无穷远处交与一条直线。视频位置33:30. 影消点和影消面 2D平面 无穷远点的变换 只要第三行为0就是无穷远点，透视除非v为0否则就不是。 无穷远线的变换 透视一般不是无穷远线，仿射一般是无穷远线。 因为仿射变换保持平行线不变，而透视变换可能会有在近处有交点而不会在无穷远处相交。 影消点 影消点与直线方向 也可这样理解：K是做仿射变换，所以v=Kd（为什么这里证明的时候不考虑外参矩阵，摄像机坐标系？） 影消线 橙色即影消线 影消线与平面法向量 总结（单视图重构关键） 单视图重构 在假设下，θ已知，α=β，则还剩下Cx，Cy未知，一共三个变量未知？，并且v1v2v3互相在三维中是垂直关系，然后三个方程求解。 总结 根据前面的求出摄像机内参矩阵后，就可以根据摄像机几何来","date":"2023-03-26T09:07:02.96Z","objectID":"20e4e1a168bbfd15518900ad8105bdf8_4","order":4,"summary":"0] 2D空间中的无穷远直线 3D空间 3D空间的面 3D空间中的直线 为了方便，将其直线定义为直线方向，或者两平面的交线 3D空间中的无穷远点 根据2D中的无穷远点，即在直线方向上（a,b,c）最后一行多加0即可 3D空间中的无穷远平面 无穷远直线即为同个平面上的平行线上的无穷远点集汇聚成无穷远直线；或者是两个平行平面在无穷远处交与一条直线。视频位置33:30. 影消点和影消面 2D平面 无穷远点的变换 只要第三行为0就是无穷远点，透视除非v为0否则就不是。 无穷远线的变换 透视一般不是无穷远线，仿射一般是无穷远线。 因为仿射变换保持平行线不变，而透视变换可能会有在近处有交点而不会在无穷远处相交。 影消点 影消点与直线方向 也可这样理解：K是做仿射变换，所以v=Kd（为什么这里证明的时候不考虑外参矩阵，摄像机坐标系？） 影消线 橙色即影消线 影消线与平面法向量 总结（单视图重构关键） 单视图重构 在假设下，θ已知，α=β，则还剩下Cx，Cy未知，一共三个变量未知？，并且v1v2v3互相在三维中是垂直关系，然后三个方程求解。 总结 根据前面的求出摄像机内参矩阵后，就可以根据摄像机几何来","tags":["ComputerVision"],"title":"三维重建之路上","url":"https://keepjolly.com/archives/three-d-reconstruction-1/"},{"categories":["learn"],"content":"获取像素点和三维点的关系，然后根据场景平面方向n来重建三维场景。 缺点是：场景的实际比例无法恢复，需要手动选择影消点与影消线，还需要场景先验信息（点对应关系，线、面几何信息等） 总结 01:16:00.知道法向量和影消线的关系，影消点和直线的方向后，然后通过取三垂直的面来计算摄像机的内参矩阵，在两个假设下成立。然后通过法向量和影消线的关系，已知影消线就可求平面法向量，然后通过p=MP，获得三维点就可以三维重构了吗？期待评论单视图重构详细过程 推荐阅读博客：单视图测量 Harris角点 视频地址 uv与Euv的关系 通过观察uv的变化进而观察E(u, v)的变化，从而发现是不是角点，但是此处不方便，都需要经过I来计算，下面通过泰勒二阶展开，简化运算 泰勒展开 得到M与Euv的关系，进而只需要分析M矩阵 M矩阵对变化程度的关系 R是旋转矩阵使其变为水平椭圆， λ是方向变化剧烈程度，其值越大（λ1，λ2）则变化越快 更进一步转化 总结 Partially invariant to affine intensity change Corner location is covariant w.r","date":"2023-03-26T09:07:02.96Z","objectID":"20e4e1a168bbfd15518900ad8105bdf8_5","order":5,"summary":"获取像素点和三维点的关系，然后根据场景平面方向n来重建三维场景。 缺点是：场景的实际比例无法恢复，需要手动选择影消点与影消线，还需要场景先验信息（点对应关系，线、面几何信息等） 总结 01:16:00.知道法向量和影消线的关系，影消点和直线的方向后，然后通过取三垂直的面来计算摄像机的内参矩阵，在两个假设下成立。然后通过法向量和影消线的关系，已知影消线就可求平面法向量，然后通过p=MP，获得三维点就可以三维重构了吗？期待评论单视图重构详细过程 推荐阅读博客：单视图测量 Harris角点 视频地址 uv与Euv的关系 通过观察uv的变化进而观察E(u, v)的变化，从而发现是不是角点，但是此处不方便，都需要经过I来计算，下面通过泰勒二阶展开，简化运算 泰勒展开 得到M与Euv的关系，进而只需要分析M矩阵 M矩阵对变化程度的关系 R是旋转矩阵使其变为水平椭圆， λ是方向变化剧烈程度，其值越大（λ1，λ2）则变化越快 更进一步转化 总结 Partially invariant to affine intensity change Corner location is covariant w.r","tags":["ComputerVision"],"title":"三维重建之路上","url":"https://keepjolly.com/archives/three-d-reconstruction-1/"},{"categories":["learn"],"content":".t. translation Corner location is covariant w.r.t. rotation Corner location is not covariant to scaling!SIFT特征 Scale selection Spatial selection: the magnitude of the Laplacian response will achieve a maximum at the center of the blob, provided the scale of the Laplacian is “matched” to the scale of the blobThe response of a derivative of Gaussian filter to a perfect step **edge decreases as σ increases ** To keep response the same (scale-invariant), must **multiply Gaussian derivative by σ，**固","date":"2023-03-26T09:07:02.96Z","objectID":"20e4e1a168bbfd15518900ad8105bdf8_6","order":6,"summary":".t. translation Corner location is covariant w.r.t. rotation Corner location is not covariant to scaling!SIFT特征 Scale selection Spatial selection: the magnitude of the Laplacian response will achieve a maximum at the center of the blob, provided the scale of the Laplacian is “matched” to the scale of the blobThe response of a derivative of Gaussian filter to a perfect step **edge decreases as σ increases ** To keep response the same (scale-invariant), must **multiply Gaussian derivative by σ，**固","tags":["ComputerVision"],"title":"三维重建之路上","url":"https://keepjolly.com/archives/three-d-reconstruction-1/"},{"categories":["learn"],"content":"定为1/√2Π Laplacian is the second Gaussian derivative, so it **must be multiplied by σ2 ** Blob detection in 2D 前面听完一遍没听懂，可以去26:30min Characteristic scale 尺度特性 找到对应核后，就可以在图中画出对应圆圈，r=√2Πσ Scale-space blob detector 三个尺度为一组进行判断，只有尺度变化σ最大的那个点并且在333-1个点内是尺度变化σ最大的，才输出圆 SIFT，更高效的做法 原先用拉普拉斯太耗时，图片越大计算量越大 下图听不懂的话继续往后听，在老师问大家的时候 回复3后面的时间讲的很清晰 1:09:20 首先DoG近似于拉普拉斯算子，它利用差分来逼近，所以通过构造DoG减少运算量 为了输出一个尺度空间，需要三个DoG结果，因此图中只能输出两个尺度空间k、k2（有可能会因为nms而减少，暂不考虑） 同理： 这里因为下采样了，为了获得原图的圆半径大小，所以乘以2 [1:12:10] 为了使其输出的尺度空间可以连续，即映射到","date":"2023-03-26T09:07:02.96Z","objectID":"20e4e1a168bbfd15518900ad8105bdf8_7","order":7,"summary":"定为1/√2Π Laplacian is the second Gaussian derivative, so it **must be multiplied by σ2 ** Blob detection in 2D 前面听完一遍没听懂，可以去26:30min Characteristic scale 尺度特性 找到对应核后，就可以在图中画出对应圆圈，r=√2Πσ Scale-space blob detector 三个尺度为一组进行判断，只有尺度变化σ最大的那个点并且在333-1个点内是尺度变化σ最大的，才输出圆 SIFT，更高效的做法 原先用拉普拉斯太耗时，图片越大计算量越大 下图听不懂的话继续往后听，在老师问大家的时候 回复3后面的时间讲的很清晰 1:09:20 首先DoG近似于拉普拉斯算子，它利用差分来逼近，所以通过构造DoG减少运算量 为了输出一个尺度空间，需要三个DoG结果，因此图中只能输出两个尺度空间k、k2（有可能会因为nms而减少，暂不考虑） 同理： 这里因为下采样了，为了获得原图的圆半径大小，所以乘以2 [1:12:10] 为了使其输出的尺度空间可以连续，即映射到","tags":["ComputerVision"],"title":"三维重建之路上","url":"https://keepjolly.com/archives/three-d-reconstruction-1/"},{"categories":["learn"],"content":"source insightC++ 概括 C++优点强大的封装能力：既有开发工程能力，又保留高性能 高性能：运行快，快并且占用资源少是C++的追求 低功耗：适合嵌入式 C++缺点：语法复杂，细节多 需要好的规范和范式 C++ 基础语法 编程语言层次 机器语言，汇编语言 编译型语言 C++，C 解释型语言 Basic Python Java 脚本语言 bash csh 逐级运行效率低，更易理解 数据类型 疑问，为什么64位三个字节对齐常量 定义常量的方法：#define： #define PI 3.14159 #define MA(x) x*(x-1) MA(1 + (a + b)) = 1+(a+b)*(1+(a+b)-1) const：const double PI = 3.14159 （推荐） 整数常量前缀：0x 十六进制、0 八进制、0b 整数常量后缀：u(unsigned)、l(long)、可组合使用，大小写任意 字符常量：单引号括起来，用L（必须大写）表示宽字符常量运算符与表达式 关系运算符 A == B 其值为bool类型 而直接判断为1为int类型，注意空间大小杂项运算符","date":"2023-03-26T09:06:56.507Z","objectID":"73bb10e51b7f067e544d9c61522cce91_0","order":0,"summary":"source insightC++ 概括 C++优点强大的封装能力：既有开发工程能力，又保留高性能 高性能：运行快，快并且占用资源少是C++的追求 低功耗：适合嵌入式 C++缺点：语法复杂，细节多 需要好的规范和范式 C++ 基础语法 编程语言层次 机器语言，汇编语言 编译型语言 C++，C 解释型语言 Basic Python Java 脚本语言 bash csh 逐级运行效率低，更易理解 数据类型 疑问，为什么64位三个字节对齐常量 定义常量的方法：#define： #define PI 3.14159 #define MA(x) x*(x-1) MA(1 + (a + b)) = 1+(a+b)*(1+(a+b)-1) const：const double PI = 3.14159 （推荐） 整数常量前缀：0x 十六进制、0 八进制、0b 整数常量后缀：u(unsigned)、l(long)、可组合使用，大小写任意 字符常量：单引号括起来，用L（必须大写）表示宽字符常量运算符与表达式 关系运算符 A == B 其值为bool类型 而直接判断为1为int类型，注意空间大小杂项运算符","tags":["C++"],"title":"C++学习","url":"https://keepjolly.com/archives/cplusplus-learn/"},{"categories":["learn"],"content":" ，：顺序执行一系列运算后，取最后一个表达式的值（int o = a,b,c）补码 正数原补反码一致 负数反码是原码除符号位取反，补码=反码+1，反码=补码-1 二进制to补码：$B 2 T_{w}(\\vec{x}) \\stackrel{.}{=} x_{w-1} 2^{w-1}+\\sum_{i=0}^{w-2} x_{i} 2^{i}$ 一文搞清二进制补码字节序 一个字在内存中如何以byte存放大端法：大多数IBM机器、网络传输，正序存放 8f ff ff ff 小端法：Intel兼容机，逆序存放，但字节内正序 ff ff ff 8f 位运算 C陷阱和C++改进 char语法陷阱 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #include \u0026lt;iostream\u003e void main() { char c1 = 'yes'; // 截断：1.保留第一个字符 2.保留第二个字符 std::cout \u0026lt;\u0026lt; c1 \u0026lt;\u0026lt; std::endl; // char* 32bi机器占4位，64占8位，为了搜索整个地址空间 const char* s1","date":"2023-03-26T09:06:56.507Z","objectID":"73bb10e51b7f067e544d9c61522cce91_1","order":1,"summary":" ，：顺序执行一系列运算后，取最后一个表达式的值（int o = a,b,c）补码 正数原补反码一致 负数反码是原码除符号位取反，补码=反码+1，反码=补码-1 二进制to补码：$B 2 T_{w}(\\vec{x}) \\stackrel{.}{=} x_{w-1} 2^{w-1}+\\sum_{i=0}^{w-2} x_{i} 2^{i}$ 一文搞清二进制补码字节序 一个字在内存中如何以byte存放大端法：大多数IBM机器、网络传输，正序存放 8f ff ff ff 小端法：Intel兼容机，逆序存放，但字节内正序 ff ff ff 8f 位运算 C陷阱和C++改进 char语法陷阱 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #include \u0026lt;iostream\u003e void main() { char c1 = 'yes'; // 截断：1.保留第一个字符 2.保留第二个字符 std::cout \u0026lt;\u0026lt; c1 \u0026lt;\u0026lt; std::endl; // char* 32bi机器占4位，64占8位，为了搜索整个地址空间 const char* s1","tags":["C++"],"title":"C++学习","url":"https://keepjolly.com/archives/cplusplus-learn/"},{"categories":["learn"],"content":" = \"/\"; // ==\u003e '/''\\0' // const char* s2 = '/'; 字符常量-\u003echar* 类型不匹配 const char* s2 = \u0026c1; // C++ 改进， string 在namespace std中 std::string s1(3, 'yes'); // s std::string s2(\"yes\"); // yes } 数组退化陷阱 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 #include \u0026lt;iostream\u003e #include \u0026lt;vector\u003e // double average1(int arr[10], int len) { double average1(int* arr, int len) { // C：数组退化成指针 // 传递char数组可以通过计算到'\\0'的长度来不借助l","date":"2023-03-26T09:06:56.507Z","objectID":"73bb10e51b7f067e544d9c61522cce91_2","order":2,"summary":" = \"/\"; // ==\u003e '/''\\0' // const char* s2 = '/'; 字符常量-\u003echar* 类型不匹配 const char* s2 = \u0026c1; // C++ 改进， string 在namespace std中 std::string s1(3, 'yes'); // s std::string s2(\"yes\"); // yes } 数组退化陷阱 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 #include \u0026lt;iostream\u003e #include \u0026lt;vector\u003e // double average1(int arr[10], int len) { double average1(int* arr, int len) { // C：数组退化成指针 // 传递char数组可以通过计算到'\\0'的长度来不借助l","tags":["C++"],"title":"C++学习","url":"https://keepjolly.com/archives/cplusplus-learn/"},{"categories":["learn"],"content":"en double result = 0; // 形参arr[10]变为int指针,arr[0]为int类型 =\u003e len = 4/4 = 1 // int len = sizeof(arr) / sizeof(arr[0]); for (int i = 0; i \u0026lt; len; i++){ result += arr[i]; } return result / len; } // C++ 改进 double average3(std::vector\u0026lt;int\u003e \u0026v) { double result = 0; std::vector\u0026lt;int\u003e::iterator it = v.begin(); // auto it = v.begin(); for (; it != v.end(); ++it){ result += *it; } return result / v.size(); } double average2DV(std::vector\u0026lt;std::vector\u0026lt;int\u003e\u003e\u0026 vv) { double result = 0.0; unsigned in","date":"2023-03-26T09:06:56.507Z","objectID":"73bb10e51b7f067e544d9c61522cce91_3","order":3,"summary":"en double result = 0; // 形参arr[10]变为int指针,arr[0]为int类型 =\u003e len = 4/4 = 1 // int len = sizeof(arr) / sizeof(arr[0]); for (int i = 0; i \u0026lt; len; i++){ result += arr[i]; } return result / len; } // C++ 改进 double average3(std::vector\u0026lt;int\u003e \u0026v) { double result = 0; std::vector\u0026lt;int\u003e::iterator it = v.begin(); // auto it = v.begin(); for (; it != v.end(); ++it){ result += *it; } return result / v.size(); } double average2DV(std::vector\u0026lt;std::vector\u0026lt;int\u003e\u003e\u0026 vv) { double result = 0.0; unsigned in","tags":["C++"],"title":"C++学习","url":"https://keepjolly.com/archives/cplusplus-learn/"},{"categories":["learn"],"content":"t size = 0; for (unsigned int i = 0; i \u0026lt; vv.size(); ++i) { for (unsigned int j = 0; j \u0026lt; vv[i].size(); ++j) { result += vv[i][j]; size += 1; std::cout \u0026lt;\u0026lt; (vv[i][j])+\" \"; // +' '自动变为int } std::cout \u0026lt;\u0026lt; std::endl; } return result / size; } void main() { int arr[10] = { 10, 20, 30, 40,50 }; int len = sizeof(arr) / sizeof(arr[0]); // std::cout \u0026lt;\u0026lt; average1(arr, len) \u0026lt;\u0026lt; std::endl; std::vector\u0026lt;int\u003e vt{ 12,3,4,5,6,5 }; std::cout \u0026lt;\u0026lt; average3(vt) \u0026lt;\u0026lt; std::endl; st","date":"2023-03-26T09:06:56.507Z","objectID":"73bb10e51b7f067e544d9c61522cce91_4","order":4,"summary":"t size = 0; for (unsigned int i = 0; i \u0026lt; vv.size(); ++i) { for (unsigned int j = 0; j \u0026lt; vv[i].size(); ++j) { result += vv[i][j]; size += 1; std::cout \u0026lt;\u0026lt; (vv[i][j])+\" \"; // +' '自动变为int } std::cout \u0026lt;\u0026lt; std::endl; } return result / size; } void main() { int arr[10] = { 10, 20, 30, 40,50 }; int len = sizeof(arr) / sizeof(arr[0]); // std::cout \u0026lt;\u0026lt; average1(arr, len) \u0026lt;\u0026lt; std::endl; std::vector\u0026lt;int\u003e vt{ 12,3,4,5,6,5 }; std::cout \u0026lt;\u0026lt; average3(vt) \u0026lt;\u0026lt; std::endl; st","tags":["C++"],"title":"C++学习","url":"https://keepjolly.com/archives/cplusplus-learn/"},{"categories":["learn"],"content":"d::vector\u0026lt; std::vector\u0026lt;int\u003e\u003e vv{8,std::vector\u0026lt;int\u003e(12, 3) }; std::cout \u0026lt;\u0026lt; average2DV(vv); } 移位问题 问题： 逻辑右移还是算数右移 -\u003e 右移只对无符号数 移位操作位数的限制 -\u003e 移位数大于0， 小于位数C中需要考虑整数移位上下文情况（有无符号数，类型占字节数） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 #include \u0026lt;iostream\u003e #include \u0026lt;bitset\u003e using namespace std; int main() { char a1 = 0x63; // 0110 0011 a1 = (a1 \u003e\u003e 4); // 0000 0110 逻辑右移 printf(\"0x%x\\n\", a1); char a2 = 0x95; // 1001 0101 a2 = (a2 \u003e\u003e 4); // 1111 1001 算法右移","date":"2023-03-26T09:06:56.507Z","objectID":"73bb10e51b7f067e544d9c61522cce91_5","order":5,"summary":"d::vector\u0026lt; std::vector\u0026lt;int\u003e\u003e vv{8,std::vector\u0026lt;int\u003e(12, 3) }; std::cout \u0026lt;\u0026lt; average2DV(vv); } 移位问题 问题： 逻辑右移还是算数右移 -\u003e 右移只对无符号数 移位操作位数的限制 -\u003e 移位数大于0， 小于位数C中需要考虑整数移位上下文情况（有无符号数，类型占字节数） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 #include \u0026lt;iostream\u003e #include \u0026lt;bitset\u003e using namespace std; int main() { char a1 = 0x63; // 0110 0011 a1 = (a1 \u003e\u003e 4); // 0000 0110 逻辑右移 printf(\"0x%x\\n\", a1); char a2 = 0x95; // 1001 0101 a2 = (a2 \u003e\u003e 4); // 1111 1001 算法右移","tags":["C++"],"title":"C++学习","url":"https://keepjolly.com/archives/cplusplus-learn/"},{"categories":["learn"],"content":" printf(\"0x%x\\n\", a2); unsigned char a3 = 0x95; // 1001 0101 C建议先转无符号再右移 a3 = (a3 \u003e\u003e 4);\t// 0000 1001 逻辑右移 printf(\"0x%x\\n\", a3); //const unsigned char priv = 0xff; //const unsigned char P_BACKUP = (1 \u0026lt;\u0026lt; 7); //const unsigned char P_ADMIN = (1 \u0026lt;\u0026lt; 8); // 超过char位数-\u003e =0 //// 判断用户权限的技巧 //if (priv \u0026 P_BACKUP) cout \u0026lt;\u0026lt; \"BACKUP\" \u0026lt;\u0026lt; endl; // C++ 改进 bitset\u0026lt;10\u003e priv = 0xff; bitset\u0026lt;10\u003e P_BACKUP = (1 \u0026lt;\u0026lt; 6); bitset\u0026lt;10\u003e P_ADMIN = (1 \u0026lt;\u0026lt; 7); // 超过char位数-\u003e =0 // 判断用户权限的技","date":"2023-03-26T09:06:56.507Z","objectID":"73bb10e51b7f067e544d9c61522cce91_6","order":6,"summary":" printf(\"0x%x\\n\", a2); unsigned char a3 = 0x95; // 1001 0101 C建议先转无符号再右移 a3 = (a3 \u003e\u003e 4);\t// 0000 1001 逻辑右移 printf(\"0x%x\\n\", a3); //const unsigned char priv = 0xff; //const unsigned char P_BACKUP = (1 \u0026lt;\u0026lt; 7); //const unsigned char P_ADMIN = (1 \u0026lt;\u0026lt; 8); // 超过char位数-\u003e =0 //// 判断用户权限的技巧 //if (priv \u0026 P_BACKUP) cout \u0026lt;\u0026lt; \"BACKUP\" \u0026lt;\u0026lt; endl; // C++ 改进 bitset\u0026lt;10\u003e priv = 0xff; bitset\u0026lt;10\u003e P_BACKUP = (1 \u0026lt;\u0026lt; 6); bitset\u0026lt;10\u003e P_ADMIN = (1 \u0026lt;\u0026lt; 7); // 超过char位数-\u003e =0 // 判断用户权限的技","tags":["C++"],"title":"C++学习","url":"https://keepjolly.com/archives/cplusplus-learn/"},{"categories":["learn"],"content":"巧 if ((priv \u0026 P_BACKUP) == P_BACKUP) cout \u0026lt;\u0026lt; \"BACKUP\" \u0026lt;\u0026lt; endl; } 类型转换问题 C缺陷：隐式转换问题（sizeof(unsigned long long) 跟int比较，int转换为unsigned int）、double除法问题 C++改进：static_cast、const_cast、dynamic_cast、reinterpret_cast，建议尽量少使用转换，多长啊溢出问题 C整数固定为int所占字节，溢出会有问题 C++：使用boost库的cpp_int字符串问题 C 以'\\0'结尾，遇到即停止，忽视其后面的值，运行效率低，只能以'\\0'表示字符串结束 C++：string库（仍保留'\\0'）、redis库（用多个结构体优化存储空间，并用len防止'\\0'问题） 字符串比较 \u003e\u0026lt; 比较的是首地址大小头文件顺序 系统的头文件要放在最前面； 其次是语言相关的； 然后比较古老的第三方库头文件； 比较新的第三方库头文件； 最后才是自定义的头文件。 基础容器 数组（差一错误） off-by-o","date":"2023-03-26T09:06:56.507Z","objectID":"73bb10e51b7f067e544d9c61522cce91_7","order":7,"summary":"巧 if ((priv \u0026 P_BACKUP) == P_BACKUP) cout \u0026lt;\u0026lt; \"BACKUP\" \u0026lt;\u0026lt; endl; } 类型转换问题 C缺陷：隐式转换问题（sizeof(unsigned long long) 跟int比较，int转换为unsigned int）、double除法问题 C++改进：static_cast、const_cast、dynamic_cast、reinterpret_cast，建议尽量少使用转换，多长啊溢出问题 C整数固定为int所占字节，溢出会有问题 C++：使用boost库的cpp_int字符串问题 C 以'\\0'结尾，遇到即停止，忽视其后面的值，运行效率低，只能以'\\0'表示字符串结束 C++：string库（仍保留'\\0'）、redis库（用多个结构体优化存储空间，并用len防止'\\0'问题） 字符串比较 \u003e\u0026lt; 比较的是首地址大小头文件顺序 系统的头文件要放在最前面； 其次是语言相关的； 然后比较古老的第三方库头文件； 比较新的第三方库头文件； 最后才是自定义的头文件。 基础容器 数组（差一错误） off-by-o","tags":["C++"],"title":"C++学习","url":"https://keepjolly.com/archives/cplusplus-learn/"},{"categories":["learn"],"content":"ne error 解决思路：先考虑简单特例，然后外推结果；仔细计算边界 判断范围时采取左闭右开，使其相减为元素个数 for (int i =0; i\u0026lt;10; i++) 数组的下标访问和指针访问方式效率分析 二维数组访问时的原则：尽可能满足空间局部性在一个小的时间窗口内，访问的变量地址越接近越好，执行速度越快 一般将最长的循环放最内层，最短的放最外层，以减少CPU跨切循环层的次数 vector 字符串 表示Unicode字符集：UTF-8：1byte表示字符，兼容ASCII码；特点是存储效率高，变长（不方便内部随机访问），无字节序问题（作为外部编码，供其他平台使用Linux） 微软平台下又细分为UTF-8-BOM，二进制首位为EF BB BF，可能在其他平台有问题，可以删去首位来适配 UTF-16：分为UTF-16BD(big endian)、UTF-16LD(little endian)；特点是定长（方便内部随机访问），有字节序问题。 BD文件的二进制首位为FE FF、LD为FF FE（正序） UTF-32：分为UTF-32BD、UTF-32LD；特点同上 字符串的指针表示方法c","date":"2023-03-26T09:06:56.507Z","objectID":"73bb10e51b7f067e544d9c61522cce91_8","order":8,"summary":"ne error 解决思路：先考虑简单特例，然后外推结果；仔细计算边界 判断范围时采取左闭右开，使其相减为元素个数 for (int i =0; i\u0026lt;10; i++) 数组的下标访问和指针访问方式效率分析 二维数组访问时的原则：尽可能满足空间局部性在一个小的时间窗口内，访问的变量地址越接近越好，执行速度越快 一般将最长的循环放最内层，最短的放最外层，以减少CPU跨切循环层的次数 vector 字符串 表示Unicode字符集：UTF-8：1byte表示字符，兼容ASCII码；特点是存储效率高，变长（不方便内部随机访问），无字节序问题（作为外部编码，供其他平台使用Linux） 微软平台下又细分为UTF-8-BOM，二进制首位为EF BB BF，可能在其他平台有问题，可以删去首位来适配 UTF-16：分为UTF-16BD(big endian)、UTF-16LD(little endian)；特点是定长（方便内部随机访问），有字节序问题。 BD文件的二进制首位为FE FF、LD为FF FE（正序） UTF-32：分为UTF-32BD、UTF-32LD；特点同上 字符串的指针表示方法c","tags":["C++"],"title":"C++学习","url":"https://keepjolly.com/archives/cplusplus-learn/"},{"categories":["learn"],"content":"har[] 和 char*的区别： char[] 地址不可变 其内的值可变 char* 地址可变，其内的值取决于所指存储区域是否可变 常用函数安全问题 strlen、strcpy等没有对边界检查容易导致缓冲区溢出，修改一些值 修改为strlen_s、strcpy_s等函数 调试时加入_CRT_SECURE_NO_WARNINGS String 和 char* char* / char[] ：strcpy_s 拷贝 strlen 字符串长度 strcat 拼接 strcmp 比较ASCII码 String：= str.size() \\ str.length() += == str.capacity() 容量，自动扩容 相比来说String 性能不是特别好C++指针 指针占用空间由操作系统位数决定，因为要指向所有地址左值与右值 左值为编译器为其单独分配一块存储空间，可以取其地址。可以放在任意侧赋值运算符函数或数据成员的名字 右值为数据本身，不能取其地址。只能放在赋值运算符右侧。没有标识符(变量名)，不可以\u0026取地址的表达式，一般称为“临时对象”。 指针分类 数组指针 array of poi","date":"2023-03-26T09:06:56.507Z","objectID":"73bb10e51b7f067e544d9c61522cce91_9","order":9,"summary":"har[] 和 char*的区别： char[] 地址不可变 其内的值可变 char* 地址可变，其内的值取决于所指存储区域是否可变 常用函数安全问题 strlen、strcpy等没有对边界检查容易导致缓冲区溢出，修改一些值 修改为strlen_s、strcpy_s等函数 调试时加入_CRT_SECURE_NO_WARNINGS String 和 char* char* / char[] ：strcpy_s 拷贝 strlen 字符串长度 strcat 拼接 strcmp 比较ASCII码 String：= str.size() \\ str.length() += == str.capacity() 容量，自动扩容 相比来说String 性能不是特别好C++指针 指针占用空间由操作系统位数决定，因为要指向所有地址左值与右值 左值为编译器为其单独分配一块存储空间，可以取其地址。可以放在任意侧赋值运算符函数或数据成员的名字 右值为数据本身，不能取其地址。只能放在赋值运算符右侧。没有标识符(变量名)，不可以\u0026取地址的表达式，一般称为“临时对象”。 指针分类 数组指针 array of poi","tags":["C++"],"title":"C++学习","url":"https://keepjolly.com/archives/cplusplus-learn/"},{"categories":["learn"],"content":"nters：int* a[4]，包含四个指针的a数组 输出结果：*(a[3]) a pointer to an array：int (*a)[4]，指向一个包含四个值的数组，其中4要与数组个数匹配 输出结果：(*a)[3] -\u003e array[3] \u0026lt;=\u003e *(array+3) \u0026lt;=\u003e array[3] 同样的 int *a = array 输出结果：*(a+3) const指针 const修饰的部分为不可修改内容，其修饰的部分看左侧最近的部分，如果左侧没有，则看右侧1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 #include \"stdafx.h\" #include \u0026lt;iostream\u003e using namespace std; unsigned int MAX_LEN = 11; int main() { char strHelloworld[] = { \"helloworld\" }; // 与strHelloWorld变量共享内存 char const *","date":"2023-03-26T09:06:56.507Z","objectID":"73bb10e51b7f067e544d9c61522cce91_10","order":10,"summary":"nters：int* a[4]，包含四个指针的a数组 输出结果：*(a[3]) a pointer to an array：int (*a)[4]，指向一个包含四个值的数组，其中4要与数组个数匹配 输出结果：(*a)[3] -\u003e array[3] \u0026lt;=\u003e *(array+3) \u0026lt;=\u003e array[3] 同样的 int *a = array 输出结果：*(a+3) const指针 const修饰的部分为不可修改内容，其修饰的部分看左侧最近的部分，如果左侧没有，则看右侧1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 #include \"stdafx.h\" #include \u0026lt;iostream\u003e using namespace std; unsigned int MAX_LEN = 11; int main() { char strHelloworld[] = { \"helloworld\" }; // 与strHelloWorld变量共享内存 char const *","tags":["C++"],"title":"C++学习","url":"https://keepjolly.com/archives/cplusplus-learn/"},{"categories":["learn"],"content":" pStr1 = \"helloworld\"; // const char* 不能修改指向的char内容 // 导致此处赋值后使得pStr1指向的空间可被修改，不能只读 char* const pStr2 = strHelloworld;\t// 不能修改指针值 char const* const pStr3 = \"helloworld\"; // const char* const 不能修改内容和指针 pStr1 = strHelloworld; //pStr2 = strHelloworld; // pStr2不可改 //pStr3 = strHelloworld; // pStr3不可改 unsigned int len = strnlen_s(pStr2, MAX_LEN); cout \u0026lt;\u0026lt; len \u0026lt;\u0026lt; endl; for (unsigned int index = 0; index \u0026lt; len; ++index) { //pStr1[index] += 1; // pStr1里的值不可改 pStr2[index] += 1; //pStr3[inde","date":"2023-03-26T09:06:56.507Z","objectID":"73bb10e51b7f067e544d9c61522cce91_11","order":11,"summary":" pStr1 = \"helloworld\"; // const char* 不能修改指向的char内容 // 导致此处赋值后使得pStr1指向的空间可被修改，不能只读 char* const pStr2 = strHelloworld;\t// 不能修改指针值 char const* const pStr3 = \"helloworld\"; // const char* const 不能修改内容和指针 pStr1 = strHelloworld; //pStr2 = strHelloworld; // pStr2不可改 //pStr3 = strHelloworld; // pStr3不可改 unsigned int len = strnlen_s(pStr2, MAX_LEN); cout \u0026lt;\u0026lt; len \u0026lt;\u0026lt; endl; for (unsigned int index = 0; index \u0026lt; len; ++index) { //pStr1[index] += 1; // pStr1里的值不可改 pStr2[index] += 1; //pStr3[inde","tags":["C++"],"title":"C++学习","url":"https://keepjolly.com/archives/cplusplus-learn/"},{"categories":["learn"],"content":"x] += 1; // pStr3里的值不可改 } return 0; } 多级指针 1 2 3 4 5 int a = 12; int* b = \u0026a; int** c = \u0026b; // *有从右向左的结合性，不清楚优先级就用括号 *(*c) = *(b) = a = 12 野指针 未初始化的指针可能导致无法定位错误 用指针进行间接访问时，确保访问的值已被初始化赋值 NULL指针初始化指针，使其无地址 对指针进行间接引用时，最好判断指针是否NULL 不用，没有初始化，超出范围时，使其NULL 野指针分类指针变量没有初始化 已经释放不用的指针没有置NULL 指针操作超越了变量的作用范围，指向不确定的空间 指针基本操作 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 char ch = 'a'; char* cp = \u0026ch; // ++,--操作符 char* cp2 = ++cp; char* cp3 = cp++; char* cp4 = --cp; char* cp5 = cp--; // ++ 左值 ","date":"2023-03-26T09:06:56.507Z","objectID":"73bb10e51b7f067e544d9c61522cce91_12","order":12,"summary":"x] += 1; // pStr3里的值不可改 } return 0; } 多级指针 1 2 3 4 5 int a = 12; int* b = \u0026a; int** c = \u0026b; // *有从右向左的结合性，不清楚优先级就用括号 *(*c) = *(b) = a = 12 野指针 未初始化的指针可能导致无法定位错误 用指针进行间接访问时，确保访问的值已被初始化赋值 NULL指针初始化指针，使其无地址 对指针进行间接引用时，最好判断指针是否NULL 不用，没有初始化，超出范围时，使其NULL 野指针分类指针变量没有初始化 已经释放不用的指针没有置NULL 指针操作超越了变量的作用范围，指向不确定的空间 指针基本操作 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 char ch = 'a'; char* cp = \u0026ch; // ++,--操作符 char* cp2 = ++cp; char* cp3 = cp++; char* cp4 = --cp; char* cp5 = cp--; // ++ 左值 ","tags":["C++"],"title":"C++学习","url":"https://keepjolly.com/archives/cplusplus-learn/"},{"categories":["learn"],"content":"//++cp2 = 97; //cp2++ = 97; // *++, ++* *++cp2 = 98; // cp2地址加1后赋值 char ch3 = *++cp2; // cp2地址加1后将引用的值给左值 *cp2++ = 98; // 将cp2指向的空间赋值后地址加1 char ch4 = *cp2++; // 将cp引用的值给左值后地址加1 // ++++, ----操作符等 int a = 1, b = 2, c, d; //c = a++b; // error c = a++ + b; // 贪心法 //d = a++++b; // error char ch5 = ++*++cp; // 1.先cp地址+1, 2.得到其引用的值, 3.值+1, 4.赋给左值 delete and delete[]、删除指针后并不会置为nullptr 对于像 int/char/long/int*/struct 等等简单数据类型，由于对象没有 destructor，所以用 delete 和 delete [] 是一样的！但是如果是C++ 对象数组就不同了！内存分配 stack：由程序分配地","date":"2023-03-26T09:06:56.507Z","objectID":"73bb10e51b7f067e544d9c61522cce91_13","order":13,"summary":"//++cp2 = 97; //cp2++ = 97; // *++, ++* *++cp2 = 98; // cp2地址加1后赋值 char ch3 = *++cp2; // cp2地址加1后将引用的值给左值 *cp2++ = 98; // 将cp2指向的空间赋值后地址加1 char ch4 = *cp2++; // 将cp引用的值给左值后地址加1 // ++++, ----操作符等 int a = 1, b = 2, c, d; //c = a++b; // error c = a++ + b; // 贪心法 //d = a++++b; // error char ch5 = ++*++cp; // 1.先cp地址+1, 2.得到其引用的值, 3.值+1, 4.赋给左值 delete and delete[]、删除指针后并不会置为nullptr 对于像 int/char/long/int*/struct 等等简单数据类型，由于对象没有 destructor，所以用 delete 和 delete [] 是一样的！但是如果是C++ 对象数组就不同了！内存分配 stack：由程序分配地","tags":["C++"],"title":"C++学习","url":"https://keepjolly.com/archives/cplusplus-learn/"},{"categories":["learn"],"content":"址 heap：由程序员分配地址 new/delete heap和bss之间是常量区 bss：未初始化区 gvap：初始化区 text：代码、函数。。。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #include \u0026lt;string\u003e int a = 0; // (GVAR)全局初始化区 int* p1; // (bss)全局未初始化区 int main() // (text)代码区 { int b=1; // (stack)栈区变量 32位/64位地址递减/递增 栈区初始化值cc char s[] = \"abc\"; // (stack)栈区变量 int*p2=NULL; // (stack)栈区变量 char *p3 = \"123456\"; // 123456\\0在常量区, p3在(stack)栈区 static int c = 0; // (GVAR)全局(静态)初始化区 p1 = new int(10); // (heap)堆区变量 32位/64位地址递增 堆区初始化值cd p2 = new int(20); // (heap)堆区变量 ","date":"2023-03-26T09:06:56.507Z","objectID":"73bb10e51b7f067e544d9c61522cce91_14","order":14,"summary":"址 heap：由程序员分配地址 new/delete heap和bss之间是常量区 bss：未初始化区 gvap：初始化区 text：代码、函数。。。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #include \u0026lt;string\u003e int a = 0; // (GVAR)全局初始化区 int* p1; // (bss)全局未初始化区 int main() // (text)代码区 { int b=1; // (stack)栈区变量 32位/64位地址递减/递增 栈区初始化值cc char s[] = \"abc\"; // (stack)栈区变量 int*p2=NULL; // (stack)栈区变量 char *p3 = \"123456\"; // 123456\\0在常量区, p3在(stack)栈区 static int c = 0; // (GVAR)全局(静态)初始化区 p1 = new int(10); // (heap)堆区变量 32位/64位地址递增 堆区初始化值cd p2 = new int(20); // (heap)堆区变量 ","tags":["C++"],"title":"C++学习","url":"https://keepjolly.com/archives/cplusplus-learn/"},{"categories":["learn"],"content":"char* p4 = new char[7]; // (heap)堆区变量 strcpy_s(p4, 7, \"123456\"); // (text)代码区 return 0; // (text)代码区 } C++智能指针 auto_ptr:C++17 废弃 会自动删除指针以及指向的对象，会产生所有权转移现象 unique_ptr:专属所有权，unique_ptr管理的内存，只能被一个指针持有，不支持复制 该指针禁止复制，因此用是std::move()语句进行所有权转移 离开作用域后，自动释放指针和数据 share_ptr / weak_ptr：通过一个引用计数共享对象，当计数位0时，调用析构函数 会带来额外的存储开 销 weak_ptr用于防止循环引用 引用 一个特殊的指针，可以看作是变量的别名，但会同时修改变量的值，且不可更换指针对象 有了指针为什么还要引用？为了支持函数运算符重载 有了引用为什么还用指针？为了兼容C 函数传参说明：对内置基础类型（如int，double）而言，函数传递时pass by value更高效，直接传值而不是指针/引用 对面向对象中的自定义类型而言，传递时p","date":"2023-03-26T09:06:56.507Z","objectID":"73bb10e51b7f067e544d9c61522cce91_15","order":15,"summary":"char* p4 = new char[7]; // (heap)堆区变量 strcpy_s(p4, 7, \"123456\"); // (text)代码区 return 0; // (text)代码区 } C++智能指针 auto_ptr:C++17 废弃 会自动删除指针以及指向的对象，会产生所有权转移现象 unique_ptr:专属所有权，unique_ptr管理的内存，只能被一个指针持有，不支持复制 该指针禁止复制，因此用是std::move()语句进行所有权转移 离开作用域后，自动释放指针和数据 share_ptr / weak_ptr：通过一个引用计数共享对象，当计数位0时，调用析构函数 会带来额外的存储开 销 weak_ptr用于防止循环引用 引用 一个特殊的指针，可以看作是变量的别名，但会同时修改变量的值，且不可更换指针对象 有了指针为什么还要引用？为了支持函数运算符重载 有了引用为什么还用指针？为了兼容C 函数传参说明：对内置基础类型（如int，double）而言，函数传递时pass by value更高效，直接传值而不是指针/引用 对面向对象中的自定义类型而言，传递时p","tags":["C++"],"title":"C++学习","url":"https://keepjolly.com/archives/cplusplus-learn/"},{"categories":["learn"],"content":"ass by reference to const更高效，因为防止传递大数据而使用地址占用空间更小，const为了防止无意的修改 C++基础语法 if if将命中率高（更容易判true/false）的条件放首位，使得判断条件更快 与switch比较 使用场景：switch只支持常量值固定相等的分支判断 if可以判断区间 switch是if的特集 性能比较：分支较少时，差别不大；分支多时，switch更快，因为是汇编是查表的形式 if多分支的开始几个分支效果高，之后效率递减；因为汇编下需要不断判断再跳转 switch所有case速度几乎一样，查表形式 枚举 枚举值不可以做左值 非枚举变量不可以赋值给枚举变量，除非强转；枚举可以赋值给非枚举 Union / Struct 共用体所有变量占用最大空间的变量的存储空间 大字节最后赋值会覆盖小字节内容 赋值从内存最右边赋值 缺省对齐原则char 任何地址 short 偶数地址 int 4的整数倍地址 double 8的整数倍地址 32位内存里一行四字节，变量占用空间不足会扩充到最大占用空间变量 32位，char+int=8；8+double=16","date":"2023-03-26T09:06:56.507Z","objectID":"73bb10e51b7f067e544d9c61522cce91_16","order":16,"summary":"ass by reference to const更高效，因为防止传递大数据而使用地址占用空间更小，const为了防止无意的修改 C++基础语法 if if将命中率高（更容易判true/false）的条件放首位，使得判断条件更快 与switch比较 使用场景：switch只支持常量值固定相等的分支判断 if可以判断区间 switch是if的特集 性能比较：分支较少时，差别不大；分支多时，switch更快，因为是汇编是查表的形式 if多分支的开始几个分支效果高，之后效率递减；因为汇编下需要不断判断再跳转 switch所有case速度几乎一样，查表形式 枚举 枚举值不可以做左值 非枚举变量不可以赋值给枚举变量，除非强转；枚举可以赋值给非枚举 Union / Struct 共用体所有变量占用最大空间的变量的存储空间 大字节最后赋值会覆盖小字节内容 赋值从内存最右边赋值 缺省对齐原则char 任何地址 short 偶数地址 int 4的整数倍地址 double 8的整数倍地址 32位内存里一行四字节，变量占用空间不足会扩充到最大占用空间变量 32位，char+int=8；8+double=16","tags":["C++"],"title":"C++学习","url":"https://keepjolly.com/archives/cplusplus-learn/"},{"categories":["learn"],"content":" 32位，char[5]+int = 16；16+double=24 修改默认编译选项： visual C++：#pragma pack(n) g++：attribute(aligned(n))、attribute(packed) 循环 do while更快 while 次之 for最慢，但实际开发不重视速度的话，无所谓函数重载 看debug运行过程 看反汇编的地址 找到debug/.obj文件，搜搜函数名，复制【?函数名@@xx】，搜索【undname】，cmd命令 【undname 复制值】 用函数指针来确定某个函数：一般形式：数据类型(*指针变量名)(参数表) bool ProcessNum(int i, int j, int(*p)(int a, int b)) // 回调函数 命名空间 namespace 空间名{ ... } 注意使用using namespace std，会引入所有空间内方法，可能会导致方法名冲突建议引入特定空间内方法名，using namespace std::cout; 或直接指定该方法是该空间内，std::cout \u0026lt;\u0026lt; 函数体heck过","date":"2023-03-26T09:06:56.507Z","objectID":"73bb10e51b7f067e544d9c61522cce91_17","order":17,"summary":" 32位，char[5]+int = 16；16+double=24 修改默认编译选项： visual C++：#pragma pack(n) g++：attribute(aligned(n))、attribute(packed) 循环 do while更快 while 次之 for最慢，但实际开发不重视速度的话，无所谓函数重载 看debug运行过程 看反汇编的地址 找到debug/.obj文件，搜搜函数名，复制【?函数名@@xx】，搜索【undname】，cmd命令 【undname 复制值】 用函数指针来确定某个函数：一般形式：数据类型(*指针变量名)(参数表) bool ProcessNum(int i, int j, int(*p)(int a, int b)) // 回调函数 命名空间 namespace 空间名{ ... } 注意使用using namespace std，会引入所有空间内方法，可能会导致方法名冲突建议引入特定空间内方法名，using namespace std::cout; 或直接指定该方法是该空间内，std::cout \u0026lt;\u0026lt; 函数体heck过","tags":["C++"],"title":"C++学习","url":"https://keepjolly.com/archives/cplusplus-learn/"},{"categories":["error"],"content":"持续更新中imshow：qt.qpa.plugin: could not find the Qt platform plugin \"xcb\" in \"\" 这个问题在我用python创建的虚拟环境后碰到，无法找到解决办法，只能用conda创建虚拟环境，然后opencv可以显示图片了pip install -i https://pypi.doubanio.com/simple/ --trusted-host pypi.doubanio.com xxx-package-name 更新：卸载重置qt即可Linux pycharm opencv不显示代码提示 参考：链接 Linux中anaconda地址是：anaconda3安装路径/envs/虚拟环境名/lib/python版本号/site-packages/cv2!ssize.empty() in function resize 顾名思义，某个地方调用opencv库的resize时，传入空值，导致该错误，仔细检查传入值的数据是否为0或者None即可。 但是给的错误信息有点误导意思，因为我用的是另一个版本的opencv，还以为是版本不一致导致的","date":"2023-03-11T20:27:34.663Z","objectID":"9fa14f9f230daec8541f980a478e376d_0","order":0,"summary":"持续更新中imshow：qt.qpa.plugin: could not find the Qt platform plugin \"xcb\" in \"\" 这个问题在我用python创建的虚拟环境后碰到，无法找到解决办法，只能用conda创建虚拟环境，然后opencv可以显示图片了pip install -i https://pypi.doubanio.com/simple/ --trusted-host pypi.doubanio.com xxx-package-name 更新：卸载重置qt即可Linux pycharm opencv不显示代码提示 参考：链接 Linux中anaconda地址是：anaconda3安装路径/envs/虚拟环境名/lib/python版本号/site-packages/cv2!ssize.empty() in function resize 顾名思义，某个地方调用opencv库的resize时，传入空值，导致该错误，仔细检查传入值的数据是否为0或者None即可。 但是给的错误信息有点误导意思，因为我用的是另一个版本的opencv，还以为是版本不一致导致的","tags":["Python","Collection"],"title":"Python编程 遇到的问题","url":"https://keepjolly.com/archives/python-problem/"},{"categories":["error"],"content":"错误。如下，提示的是OpenCV3.4.15版本 ImportError: No module named tensorflow 如果你是在jupyter notebook中出现这个错误。先看你是否安装了tensorflow 其次看你是否安装了jupyter notebook。 我用conda管理环境的时候 运行的环境里没有jupyter notebook 他估计自动调用了全局的notebook ，但是全局没有tensorflow，然后就报错了。","date":"2023-03-11T20:27:34.663Z","objectID":"9fa14f9f230daec8541f980a478e376d_1","order":1,"summary":"错误。如下，提示的是OpenCV3.4.15版本 ImportError: No module named tensorflow 如果你是在jupyter notebook中出现这个错误。先看你是否安装了tensorflow 其次看你是否安装了jupyter notebook。 我用conda管理环境的时候 运行的环境里没有jupyter notebook 他估计自动调用了全局的notebook ，但是全局没有tensorflow，然后就报错了。","tags":["Python","Collection"],"title":"Python编程 遇到的问题","url":"https://keepjolly.com/archives/python-problem/"},{"categories":["other"],"content":"因为后续转三维重建了，所以只能写到一半了，如有需要可以找我要源文件 参考论文： Object Detection in 20 Years: A Survey总言 因为不是大神，所以都是摘自网络文章，如有错误欢迎评论目标检测 传统目标检测 Viola Jones Detector 论文：Rapid Object Detection using a Boosted Cascade of Simple Features 2001年提出，基于滑动窗口的目标检测算法，通过积分图像来加速对Haar-like特征的计算，使用如下方法来加速网络计算以及提高准确率。网络架构/使用方法 Integral image：解析 Feature selection：使用Adaboost对候选特征筛选，找到最有代表性的一小组特征 Detection cascades 优缺点 优点：具有里程碑的意义 缺点：使用的Harr-like特征较简单，稳定性较低 弱分类器采用简单的决策树，容易过拟合，对人脸的遮挡、光暗等因素处理效果不理想 鲁棒性较差 参考博客：目标检测之 Viola-Jones、viola jones人脸检测","date":"2023-03-11T20:25:51.917Z","objectID":"ff7cece43833fd3c349f3bcf44844b49_0","order":0,"summary":"因为后续转三维重建了，所以只能写到一半了，如有需要可以找我要源文件 参考论文： Object Detection in 20 Years: A Survey总言 因为不是大神，所以都是摘自网络文章，如有错误欢迎评论目标检测 传统目标检测 Viola Jones Detector 论文：Rapid Object Detection using a Boosted Cascade of Simple Features 2001年提出，基于滑动窗口的目标检测算法，通过积分图像来加速对Haar-like特征的计算，使用如下方法来加速网络计算以及提高准确率。网络架构/使用方法 Integral image：解析 Feature selection：使用Adaboost对候选特征筛选，找到最有代表性的一小组特征 Detection cascades 优缺点 优点：具有里程碑的意义 缺点：使用的Harr-like特征较简单，稳定性较低 弱分类器采用简单的决策树，容易过拟合，对人脸的遮挡、光暗等因素处理效果不理想 鲁棒性较差 参考博客：目标检测之 Viola-Jones、viola jones人脸检测","tags":["ComputerVision"],"title":"小目标检测综述-半成品","url":"https://keepjolly.com/archives/small-target-detection/"},{"categories":["other"],"content":"原理HOG Detector 论文：Histograms of Oriented Gradients for Human Detection HOG（Histogram of Oriented Gridients的简写）特征检测算法，最早是由法国研究员Dalal等在CVPR-2005上提出来的，一种解决人体目标检测的图像描述子，是一种用于表征图像局部梯度方向和梯度强度分布特性的描述符。其主要思想是：在边缘具体位置未知的情况下，边缘方向的分布也可以很好的表示行人目标的外形轮廓。网络架构/使用方法 灰度化、颜色空间归一化：Gamma校正 计算图像中每个像素的梯度值和梯度方向 将图像划分成多个pixel×pixel cells，并计算每个cell的梯度直方图，即为描述子(descriptor) 梯度直方图的x为梯度方向的映射，y为梯度值的累加 将num个cells归一化后合并成一个block，最后会形成多个带重叠部分的block。每个block内为cells内的向量concat 最后将所有block的向量再次串联，即HOG特征 示例： 图像大小为：64×128, block大小为16×16，","date":"2023-03-11T20:25:51.917Z","objectID":"ff7cece43833fd3c349f3bcf44844b49_1","order":1,"summary":"原理HOG Detector 论文：Histograms of Oriented Gradients for Human Detection HOG（Histogram of Oriented Gridients的简写）特征检测算法，最早是由法国研究员Dalal等在CVPR-2005上提出来的，一种解决人体目标检测的图像描述子，是一种用于表征图像局部梯度方向和梯度强度分布特性的描述符。其主要思想是：在边缘具体位置未知的情况下，边缘方向的分布也可以很好的表示行人目标的外形轮廓。网络架构/使用方法 灰度化、颜色空间归一化：Gamma校正 计算图像中每个像素的梯度值和梯度方向 将图像划分成多个pixel×pixel cells，并计算每个cell的梯度直方图，即为描述子(descriptor) 梯度直方图的x为梯度方向的映射，y为梯度值的累加 将num个cells归一化后合并成一个block，最后会形成多个带重叠部分的block。每个block内为cells内的向量concat 最后将所有block的向量再次串联，即HOG特征 示例： 图像大小为：64×128, block大小为16×16，","tags":["ComputerVision"],"title":"小目标检测综述-半成品","url":"https://keepjolly.com/archives/small-target-detection/"},{"categories":["other"],"content":" block stride为8×8，cell size为8×8，bins=9（直方图等级数）；块个数为：((64-16)/8+1) × ((128-16)/8 +1) = 105 其中重叠部分就是因为16 \u003e 8 (64-16)/8 计算除第一个block后还可以走多少步，然后加上第一次不动的次数+1 每个块内cell个数； (16×16)/(8×8)=4 每张图特征维度：105×4×9=3780 获取到每张图的特征维度后，再用线性SVM训练分类器即可。优缺点 优点：使用contrast-normalize the local response来使得局部几何和光学形变具有不变性 容许行人有细微肢体动作，适合人体检测 分块分单元的方法，使得图像局部像素点之间的关系得到很好地表征 缺点特征维度大，实时性差 很难处理遮挡问题 对噪点敏感 参考博客：【特征检测】HOG特征算法、目标检测HOG特征解读、HOG 特征提取算法（实践篇）、HOG特征Deformable Part-based Model(DPM) 论文：Discriminatively trained deformable part ","date":"2023-03-11T20:25:51.917Z","objectID":"ff7cece43833fd3c349f3bcf44844b49_2","order":2,"summary":" block stride为8×8，cell size为8×8，bins=9（直方图等级数）；块个数为：((64-16)/8+1) × ((128-16)/8 +1) = 105 其中重叠部分就是因为16 \u003e 8 (64-16)/8 计算除第一个block后还可以走多少步，然后加上第一次不动的次数+1 每个块内cell个数； (16×16)/(8×8)=4 每张图特征维度：105×4×9=3780 获取到每张图的特征维度后，再用线性SVM训练分类器即可。优缺点 优点：使用contrast-normalize the local response来使得局部几何和光学形变具有不变性 容许行人有细微肢体动作，适合人体检测 分块分单元的方法，使得图像局部像素点之间的关系得到很好地表征 缺点特征维度大，实时性差 很难处理遮挡问题 对噪点敏感 参考博客：【特征检测】HOG特征算法、目标检测HOG特征解读、HOG 特征提取算法（实践篇）、HOG特征Deformable Part-based Model(DPM) 论文：Discriminatively trained deformable part ","tags":["ComputerVision"],"title":"小目标检测综述-半成品","url":"https://keepjolly.com/archives/small-target-detection/"},{"categories":["other"],"content":"models 由P. Felzenszwalb在2008提出，作为HOG的扩展版。DPM的设计理念是“divide and conquer”，训练时分解对象，推理时组合不同部件。DPM的本质就是弹簧形变模型。 DPM算法采用了改进后的HOG特征，SVM分类器和滑动窗口（Sliding Windows）检测思想，针对目标的多视角问题，采用了多组件（Component）的策略，针对目标本身的形变问题，采用了基于图结构（Pictorial Structure）的部件模型策略。此外，将样本的所属的模型类别，部件模型的位置等作为潜变量（Latent Variable），采用多示例学习（Multiple-instance Learning）来自动确定。网络架构/使用方法 经典DPM由一个root-filter和多个part-filter组成。 LatentSVM：使得不用标出part框 使用硬负样本挖掘：解决样本不平衡问题 边界框回归 context priming：利用局部信息 混合模型：学习多个模型来适应物体不同形变 图像金字塔：适应形变 优缺点 优点运算速度快，适应物体形变，方法直观简单 A","date":"2023-03-11T20:25:51.917Z","objectID":"ff7cece43833fd3c349f3bcf44844b49_3","order":3,"summary":"models 由P. Felzenszwalb在2008提出，作为HOG的扩展版。DPM的设计理念是“divide and conquer”，训练时分解对象，推理时组合不同部件。DPM的本质就是弹簧形变模型。 DPM算法采用了改进后的HOG特征，SVM分类器和滑动窗口（Sliding Windows）检测思想，针对目标的多视角问题，采用了多组件（Component）的策略，针对目标本身的形变问题，采用了基于图结构（Pictorial Structure）的部件模型策略。此外，将样本的所属的模型类别，部件模型的位置等作为潜变量（Latent Variable），采用多示例学习（Multiple-instance Learning）来自动确定。网络架构/使用方法 经典DPM由一个root-filter和多个part-filter组成。 LatentSVM：使得不用标出part框 使用硬负样本挖掘：解决样本不平衡问题 边界框回归 context priming：利用局部信息 混合模型：学习多个模型来适应物体不同形变 图像金字塔：适应形变 优缺点 优点运算速度快，适应物体形变，方法直观简单 A","tags":["ComputerVision"],"title":"小目标检测综述-半成品","url":"https://keepjolly.com/archives/small-target-detection/"},{"categories":["other"],"content":"lthough today's object detectors have far surpassed DPM in terms of the detection accuracy, many of them are still deeply influenced by its valuable insights 缺点性能一般 无法适应大幅度旋转以及当图像中目标像素远小于root filter时无法检测 解惑 DPM首先采用的是HOG进行特征的提取，但是又有别于HOG，DPM中，只保留了HOG中的Cell。如上图所示，假设，一个88的Cell，将该细胞单元与其对角线临域的4个细胞单元做归一化操作。 提取有符号的HOG梯度，0-360度将产生18个梯度向量，提取无符号的HOG梯度，0-180度将产生9个梯度向量。因此，一个88的细胞单元将会产生，（18+9）4=108 （其中的4是4个相对邻域，这里看的时候没看懂），维度有点高，Felzenszwalb大神给出了其优化思想。 首先，只提取无符号的HOG梯度，将会产生49=36维特征，将其看成一个4*9的矩阵，分别将行和列分别相加，最终将生","date":"2023-03-11T20:25:51.917Z","objectID":"ff7cece43833fd3c349f3bcf44844b49_4","order":4,"summary":"lthough today's object detectors have far surpassed DPM in terms of the detection accuracy, many of them are still deeply influenced by its valuable insights 缺点性能一般 无法适应大幅度旋转以及当图像中目标像素远小于root filter时无法检测 解惑 DPM首先采用的是HOG进行特征的提取，但是又有别于HOG，DPM中，只保留了HOG中的Cell。如上图所示，假设，一个88的Cell，将该细胞单元与其对角线临域的4个细胞单元做归一化操作。 提取有符号的HOG梯度，0-360度将产生18个梯度向量，提取无符号的HOG梯度，0-180度将产生9个梯度向量。因此，一个88的细胞单元将会产生，（18+9）4=108 （其中的4是4个相对邻域，这里看的时候没看懂），维度有点高，Felzenszwalb大神给出了其优化思想。 首先，只提取无符号的HOG梯度，将会产生49=36维特征，将其看成一个4*9的矩阵，分别将行和列分别相加，最终将生","tags":["ComputerVision"],"title":"小目标检测综述-半成品","url":"https://keepjolly.com/archives/small-target-detection/"},{"categories":["other"],"content":"成4+9=13个特征向量，为了进一步提高精度，将提取的18维有符号的梯度特征也加进来，这样，一共产生13+18=31维梯度特征（另一个解释）。实现了很好的目标检测。参考博客：DPM（Deformable Part Model）原理详解、DPM(Deformable Parts Model)--原理(一)、DPM目标检测算法(毕业论文节选)、多个博客的组合体、什么是latent SVM？、DPM模型、传统目标检测算法之DPM总结 基于手工提取特征的传统目标检测算法主要有以下三个缺点：识别效果不够好，准确率不高 计算量较大，运算速度慢 可能产生多个正确识别的结果 深度学习检测 two-stage detection 总结性博客：RCNN系列总结、目标检测：R-CNN、SPP,Fast R-CNN、Faster R-CNN、Faster RCNN系列算法原理、目标检测-RCNN系列、小哲AI专栏文章分类索引 咱也不知道RCNN家族有多少，这里只好列举了RCNN→SPPnet→Fast RCNN→Faster RCNN→FPN→MaskRCNN→Cascade RCNN 另外二阶段检测所包含的","date":"2023-03-11T20:25:51.917Z","objectID":"ff7cece43833fd3c349f3bcf44844b49_5","order":5,"summary":"成4+9=13个特征向量，为了进一步提高精度，将提取的18维有符号的梯度特征也加进来，这样，一共产生13+18=31维梯度特征（另一个解释）。实现了很好的目标检测。参考博客：DPM（Deformable Part Model）原理详解、DPM(Deformable Parts Model)--原理(一)、DPM目标检测算法(毕业论文节选)、多个博客的组合体、什么是latent SVM？、DPM模型、传统目标检测算法之DPM总结 基于手工提取特征的传统目标检测算法主要有以下三个缺点：识别效果不够好，准确率不高 计算量较大，运算速度慢 可能产生多个正确识别的结果 深度学习检测 two-stage detection 总结性博客：RCNN系列总结、目标检测：R-CNN、SPP,Fast R-CNN、Faster R-CNN、Faster RCNN系列算法原理、目标检测-RCNN系列、小哲AI专栏文章分类索引 咱也不知道RCNN家族有多少，这里只好列举了RCNN→SPPnet→Fast RCNN→Faster RCNN→FPN→MaskRCNN→Cascade RCNN 另外二阶段检测所包含的","tags":["ComputerVision"],"title":"小目标检测综述-半成品","url":"https://keepjolly.com/archives/small-target-detection/"},{"categories":["other"],"content":"这些网络如有误，欢迎评论 二阶段：1，先产生高质量框，2. 对框进行微调 coarse to fine 一阶段：一步到位RCNN（提出数据稀少的解决方案） 论文：Rich feature hierarchies for accurate object detection and semantic segmentation 最近几年，物体检测陷入停滞，表现最好的检测系统是复杂的将多低层级的图像特征与高层级的物体检测器环境与场景识别相结合。我们取得这个性能主要通过两个方面：第一是应用了自底向上的候选框训练的高容量的卷积神经网络进行定位和分割物体。另外一个是使用在标签数据匮乏的情况下训练大规模神经网络的一个方法。网络架构/使用方法 目标检测： 产生候选区域：Selective Search 选出2k个候选区域 对每个候选区域进行特征提取：CNN → 2000×4096 dim特征向量 候选区域类别判断：SVM 4096×N（20类别+1背景）+NMS 使用回归对其候选框调整：regression Selective Search → CNN→ SVM→ regression 分析网络采用Ho","date":"2023-03-11T20:25:51.917Z","objectID":"ff7cece43833fd3c349f3bcf44844b49_6","order":6,"summary":"这些网络如有误，欢迎评论 二阶段：1，先产生高质量框，2. 对框进行微调 coarse to fine 一阶段：一步到位RCNN（提出数据稀少的解决方案） 论文：Rich feature hierarchies for accurate object detection and semantic segmentation 最近几年，物体检测陷入停滞，表现最好的检测系统是复杂的将多低层级的图像特征与高层级的物体检测器环境与场景识别相结合。我们取得这个性能主要通过两个方面：第一是应用了自底向上的候选框训练的高容量的卷积神经网络进行定位和分割物体。另外一个是使用在标签数据匮乏的情况下训练大规模神经网络的一个方法。网络架构/使用方法 目标检测： 产生候选区域：Selective Search 选出2k个候选区域 对每个候选区域进行特征提取：CNN → 2000×4096 dim特征向量 候选区域类别判断：SVM 4096×N（20类别+1背景）+NMS 使用回归对其候选框调整：regression Selective Search → CNN→ SVM→ regression 分析网络采用Ho","tags":["ComputerVision"],"title":"小目标检测综述-半成品","url":"https://keepjolly.com/archives/small-target-detection/"},{"categories":["other"],"content":"iem等人的定位分析工具：Diagnosing error in object detectors，看到进化版分析工具：A General Toolbox for Identifying Object Detection Errors优缺点 优点：使用CNN来提取特征，减少人工操作 使用迁移学习来提高性能 当带标签的训练数据不足时，先针对辅助数据集进行有监督方式的预训练，再进行特定小数据集的调优，就可以产生明显的性能提升。（迁移学习） 缺点：速度慢，存在大量重复计算 训练步骤繁琐 参考博客：R-CNN论文详解（论文翻译）、RCNN 论文阅读记录 还介绍了一些方法SPPnet 论文：Spatial Pyramid Pooling in Deep Convolutional Networks for Visual Recognition 普遍的CNN需要固定输入图片大小，原因是卷积层后的全连接层需要固定长度的输入。SPP是Bag-of-words模型的扩展，是视觉最成功的方法之一。它将图像划分为从精细到粗糙空间，并聚合其中的局部特征。网络架构/使用方法 网络架构： 目标检测 提取2000个","date":"2023-03-11T20:25:51.917Z","objectID":"ff7cece43833fd3c349f3bcf44844b49_7","order":7,"summary":"iem等人的定位分析工具：Diagnosing error in object detectors，看到进化版分析工具：A General Toolbox for Identifying Object Detection Errors优缺点 优点：使用CNN来提取特征，减少人工操作 使用迁移学习来提高性能 当带标签的训练数据不足时，先针对辅助数据集进行有监督方式的预训练，再进行特定小数据集的调优，就可以产生明显的性能提升。（迁移学习） 缺点：速度慢，存在大量重复计算 训练步骤繁琐 参考博客：R-CNN论文详解（论文翻译）、RCNN 论文阅读记录 还介绍了一些方法SPPnet 论文：Spatial Pyramid Pooling in Deep Convolutional Networks for Visual Recognition 普遍的CNN需要固定输入图片大小，原因是卷积层后的全连接层需要固定长度的输入。SPP是Bag-of-words模型的扩展，是视觉最成功的方法之一。它将图像划分为从精细到粗糙空间，并聚合其中的局部特征。网络架构/使用方法 网络架构： 目标检测 提取2000个","tags":["ComputerVision"],"title":"小目标检测综述-半成品","url":"https://keepjolly.com/archives/small-target-detection/"},{"categories":["other"],"content":"候选框 对整张图片通过CNN进行特征提取 将候选框映射到最终的feature maps上，进行空间金字塔池化，得到固定长度的特征向量 SVM分类器来检测 优缺点 优点：输入任意大小的图片，防止剪裁、放缩降低精度 （优化RCNN） 使用CNN共享参数后，映射候选框加速计算（优化RCNN） 可应用在许多网络上 multi-scale feature extraction 可以提高精度 缺点：同R-CNN一样分开训练CNN和SVM、BB回归器，训练SVM的特征需要提前保存在磁盘需要巨大的存储空间；多段训练实现较复杂 CNN和SVM的训练独立导致SVM的训练Loss无法更新SPP-Layer之前的卷积层参数，因此即使采用更深的CNN网络进行特征提取，也无法保证SVMs分类器的准确率一定能够提升 (1)spp layer有multi-scale的pooling，正向还好，反向传播开销大。 (2)sppnet后，fast-rcnn的roi pooling 本质上就是一层的spp pooling, 这篇paper表明, 运算成本更低的 roi pooling(即 single-scale spp)并","date":"2023-03-11T20:25:51.917Z","objectID":"ff7cece43833fd3c349f3bcf44844b49_8","order":8,"summary":"候选框 对整张图片通过CNN进行特征提取 将候选框映射到最终的feature maps上，进行空间金字塔池化，得到固定长度的特征向量 SVM分类器来检测 优缺点 优点：输入任意大小的图片，防止剪裁、放缩降低精度 （优化RCNN） 使用CNN共享参数后，映射候选框加速计算（优化RCNN） 可应用在许多网络上 multi-scale feature extraction 可以提高精度 缺点：同R-CNN一样分开训练CNN和SVM、BB回归器，训练SVM的特征需要提前保存在磁盘需要巨大的存储空间；多段训练实现较复杂 CNN和SVM的训练独立导致SVM的训练Loss无法更新SPP-Layer之前的卷积层参数，因此即使采用更深的CNN网络进行特征提取，也无法保证SVMs分类器的准确率一定能够提升 (1)spp layer有multi-scale的pooling，正向还好，反向传播开销大。 (2)sppnet后，fast-rcnn的roi pooling 本质上就是一层的spp pooling, 这篇paper表明, 运算成本更低的 roi pooling(即 single-scale spp)并","tags":["ComputerVision"],"title":"小目标检测综述-半成品","url":"https://keepjolly.com/archives/small-target-detection/"},{"categories":["other"],"content":"不比运算开销更大的multi-scale的spp 要差。这里的一层spp 池化指的应该是只有一层池化而不是像金字塔一样有多层池化。 (3)粘自 评论 参考博客：SPP优缺点、空间金字塔池化网络SPPNet详解、RCNN学习笔记(3)、ROI详解（英文原版）Fast-RCNN 论文：Fast R-CNN网络架构/使用方法 网络结构： 目标检测：产生候选区域：同RCNN一致 提取整张图片的特征生成特征图，并将候选区域映射到特征图上：同SPPnet一致 候选区域分类+BBox回归：对每个候选区域使用ROI Pooling，然后进行softmax分类+回归 优缺点 优点：加入多任务损失，使得模型由多阶段转为单阶段，实现端到端（除SS Region Proposal阶段）（创新点） 删除SVM后，可以一次更新所有层的参数，并且不需要存储到硬盘 （优化SPPnet） 缺点：使用的selective search只能在CPU上跑，速度慢 一些结论 多任务比多阶段训练好 发现SPPnet的多尺度训练并不比单尺度训练好，因为尺度不变性，所以使用ROI 池化 训练数据当然越多越好 softmax比SVM略","date":"2023-03-11T20:25:51.917Z","objectID":"ff7cece43833fd3c349f3bcf44844b49_9","order":9,"summary":"不比运算开销更大的multi-scale的spp 要差。这里的一层spp 池化指的应该是只有一层池化而不是像金字塔一样有多层池化。 (3)粘自 评论 参考博客：SPP优缺点、空间金字塔池化网络SPPNet详解、RCNN学习笔记(3)、ROI详解（英文原版）Fast-RCNN 论文：Fast R-CNN网络架构/使用方法 网络结构： 目标检测：产生候选区域：同RCNN一致 提取整张图片的特征生成特征图，并将候选区域映射到特征图上：同SPPnet一致 候选区域分类+BBox回归：对每个候选区域使用ROI Pooling，然后进行softmax分类+回归 优缺点 优点：加入多任务损失，使得模型由多阶段转为单阶段，实现端到端（除SS Region Proposal阶段）（创新点） 删除SVM后，可以一次更新所有层的参数，并且不需要存储到硬盘 （优化SPPnet） 缺点：使用的selective search只能在CPU上跑，速度慢 一些结论 多任务比多阶段训练好 发现SPPnet的多尺度训练并不比单尺度训练好，因为尺度不变性，所以使用ROI 池化 训练数据当然越多越好 softmax比SVM略","tags":["ComputerVision"],"title":"小目标检测综述-半成品","url":"https://keepjolly.com/archives/small-target-detection/"},{"categories":["other"],"content":"好 候选框越多，mAP呈现先声后降的趋势 参考博客：物体检测之Fast R-CNN、RCNN 系列详解、目标检测算法之Fast R-CNN算法详解Faster-RCNN 论文：Faster R-CNN: Towards Real-Time Object Detection with Region Proposal Networks网络架构/使用方法 网络结构： 特征提取：全卷积层 候选框生成+候选框调整：RPN网络 生成固定长度向量：Roi 池化 分类+微调：softamx+回归 优缺点 优点：端到端网络（改进Fast） 使用RPN替代选择性搜索，提高速度（改进Fast） 共享RPN和Fast R-CNN特征（改进Fast） RCNN集大成之作（改进Fast） 缺点：步骤繁琐、速度慢 重叠特征容易漏检（NMS的原因） 重新审视Faster RCNN：优缺点与改进 参考博客：一文读懂Faster RCNN（完善）、Faster R-CNN：详解目标检测的实现过程FPN+Faster RCNN 论文：Feature Pyramid Networks for Object Detection","date":"2023-03-11T20:25:51.917Z","objectID":"ff7cece43833fd3c349f3bcf44844b49_10","order":10,"summary":"好 候选框越多，mAP呈现先声后降的趋势 参考博客：物体检测之Fast R-CNN、RCNN 系列详解、目标检测算法之Fast R-CNN算法详解Faster-RCNN 论文：Faster R-CNN: Towards Real-Time Object Detection with Region Proposal Networks网络架构/使用方法 网络结构： 特征提取：全卷积层 候选框生成+候选框调整：RPN网络 生成固定长度向量：Roi 池化 分类+微调：softamx+回归 优缺点 优点：端到端网络（改进Fast） 使用RPN替代选择性搜索，提高速度（改进Fast） 共享RPN和Fast R-CNN特征（改进Fast） RCNN集大成之作（改进Fast） 缺点：步骤繁琐、速度慢 重叠特征容易漏检（NMS的原因） 重新审视Faster RCNN：优缺点与改进 参考博客：一文读懂Faster RCNN（完善）、Faster R-CNN：详解目标检测的实现过程FPN+Faster RCNN 论文：Feature Pyramid Networks for Object Detection","tags":["ComputerVision"],"title":"小目标检测综述-半成品","url":"https://keepjolly.com/archives/small-target-detection/"},{"categories":["other"],"content":"半路转C++了，所以没学完Java，相对来说，韩顺平这个Java视频讲的很详细，如果时间充裕可以看看。初阶知识 变量 加法运算 浮点数/byte/布尔值 浮点数 = 符号位 +指数位 +尾数位 浮点数默认为double类型，float n1 = 1.1+anything 报错boolean变量只能为true/false 给byte赋常数时，先判断该值是否在byte范围(-128~127)内，所以不会出现赋值为int类型 自动类型转换 进行赋值或运算时，小精度类型自动转化为大精度类型 char/(byte → short) → int → long → float → double byte/char/short 同类型计算或它们之间计算都会自动转成int类型 强制转换 (int)(long/float值)运算符 算数运算符运算 a % b = a - a / b * b 所以当b为负数反而为正，ab全为负数则为负 1 2 3 int i = 1; i = i++; // temp = i; i = i+1; i = temp; System.out.println(i); // i=1","date":"2023-03-11T20:23:47.173Z","objectID":"dc92fdb7514ecbc10fd0bed1accacd69_0","order":0,"summary":"半路转C++了，所以没学完Java，相对来说，韩顺平这个Java视频讲的很详细，如果时间充裕可以看看。初阶知识 变量 加法运算 浮点数/byte/布尔值 浮点数 = 符号位 +指数位 +尾数位 浮点数默认为double类型，float n1 = 1.1+anything 报错boolean变量只能为true/false 给byte赋常数时，先判断该值是否在byte范围(-128~127)内，所以不会出现赋值为int类型 自动类型转换 进行赋值或运算时，小精度类型自动转化为大精度类型 char/(byte → short) → int → long → float → double byte/char/short 同类型计算或它们之间计算都会自动转成int类型 强制转换 (int)(long/float值)运算符 算数运算符运算 a % b = a - a / b * b 所以当b为负数反而为正，ab全为负数则为负 1 2 3 int i = 1; i = i++; // temp = i; i = i+1; i = temp; System.out.println(i); // i=1","tags":["Java"],"title":"Java 学习 半成品","url":"https://keepjolly.com/archives/java-study/"},{"categories":["other"],"content":" 复合赋值运算符会自动类型转换(包括++，--) b += 2; -\u003e b = (type)b + 2; 逻辑运算符 \u0026 和 | 用在检查特等奖和一等奖之间取最好的那个进制 整数有四种进制：二进制：以0b或0B开头 十进制 八进制：以0开头 十六进制：以0x或0X开头 二进制转八进制：从低位开始，二进制数每三位($2^{3}=8$)一组，换算成对应八进制数 二进制转十六进制：从低位开始，二进制数每四位一组，换算成对应八进制数 反之，则将八(十六)进制数每位转成对应**三(四)**位二进制数即可位运算 原码，反码，补码：正数三码合一 负数的反码 = 原码符号位不变，其他位取反 负数的反码 = 补码 - 1；补码 = 反码 + 1 0的反码、补码都是0 计算机以补码进行运算，Java的数都是有符号 运算结果用原码 二进制最高位为符号位：0正1负，位数取决于int大小 位运算符：算数右移\u003e\u003e：低位溢出，符号位不变，高位补符号位 \u0026lt;=\u003e b/2 算数左移\u0026lt;\u0026lt;：符号位不变，低位补0 \u0026lt;=\u003e b*2 逻辑右移\u003e\u003e\u003e：低位溢出，高位补0 低位溢出指的是删除最右边移动的数个；高","date":"2023-03-11T20:23:47.173Z","objectID":"dc92fdb7514ecbc10fd0bed1accacd69_1","order":1,"summary":" 复合赋值运算符会自动类型转换(包括++，--) b += 2; -\u003e b = (type)b + 2; 逻辑运算符 \u0026 和 | 用在检查特等奖和一等奖之间取最好的那个进制 整数有四种进制：二进制：以0b或0B开头 十进制 八进制：以0开头 十六进制：以0x或0X开头 二进制转八进制：从低位开始，二进制数每三位($2^{3}=8$)一组，换算成对应八进制数 二进制转十六进制：从低位开始，二进制数每四位一组，换算成对应八进制数 反之，则将八(十六)进制数每位转成对应**三(四)**位二进制数即可位运算 原码，反码，补码：正数三码合一 负数的反码 = 原码符号位不变，其他位取反 负数的反码 = 补码 - 1；补码 = 反码 + 1 0的反码、补码都是0 计算机以补码进行运算，Java的数都是有符号 运算结果用原码 二进制最高位为符号位：0正1负，位数取决于int大小 位运算符：算数右移\u003e\u003e：低位溢出，符号位不变，高位补符号位 \u0026lt;=\u003e b/2 算数左移\u0026lt;\u0026lt;：符号位不变，低位补0 \u0026lt;=\u003e b*2 逻辑右移\u003e\u003e\u003e：低位溢出，高位补0 低位溢出指的是删除最右边移动的数个；高","tags":["Java"],"title":"Java 学习 半成品","url":"https://keepjolly.com/archives/java-study/"},{"categories":["other"],"content":"位补数指的是将数个加到最左边，整体右移 1000 0000 0000 0110 \u003e\u003e\u003e2：0010 0000 0000 00**01 ** 1 2 3 4 5 6 7 8 9 // -2原 10000000 00000000 00000000 00000010 // -2反 11111111 11111111 11111111 11111101 // -2补 11111111 11111111 11111111 11111110 // -2移 00111111 11111111 11111111 11111111 // -2反 11111111 11111111 11111111 11111011 // -2原 10000000 00000000 00000000 00000100 int a = 0b00111111111111111111111111111111; System.out.println(a); System.out.print(-2\u003e\u003e\u003e2); 控制结构 switch中表达式的返回值必须是：byte, short, int, char, enum, String b","date":"2023-03-11T20:23:47.173Z","objectID":"dc92fdb7514ecbc10fd0bed1accacd69_2","order":2,"summary":"位补数指的是将数个加到最左边，整体右移 1000 0000 0000 0110 \u003e\u003e\u003e2：0010 0000 0000 00**01 ** 1 2 3 4 5 6 7 8 9 // -2原 10000000 00000000 00000000 00000010 // -2反 11111111 11111111 11111111 11111101 // -2补 11111111 11111111 11111111 11111110 // -2移 00111111 11111111 11111111 11111111 // -2反 11111111 11111111 11111111 11111011 // -2原 10000000 00000000 00000000 00000100 int a = 0b00111111111111111111111111111111; System.out.println(a); System.out.print(-2\u003e\u003e\u003e2); 控制结构 switch中表达式的返回值必须是：byte, short, int, char, enum, String b","tags":["Java"],"title":"Java 学习 半成品","url":"https://keepjolly.com/archives/java-study/"},{"categories":["other"],"content":"reak/continue 可以通过标签指明终止/跳过哪一层语句块（不建议使用） \"lucky\".equals(type) // 避免空指针 数组/排序/查找 二维数组 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // 动态创建数组 public static void main(String[] args){ int [][] arr = new int[3][]; // 确定一维数组个数 for (int i = 0; i \u0026lt; arr.length; ++i){ arr[i] = new int[i+1]; // 第i排上开辟空间 } } // 双下标经典用法 int insert_num = 15; for (int i = 0, j = 0; i\u0026lt;arrNew.length; ++i){ if (insert_num \u0026lt; arr[j]){ ++j; arrNew[i] = arr[j]; else arrNew[i] = insert_num; } 对象 对象内存布局 加载cat类信息从第一句代码就执行 Java内存的结构分析 栈：","date":"2023-03-11T20:23:47.173Z","objectID":"dc92fdb7514ecbc10fd0bed1accacd69_3","order":3,"summary":"reak/continue 可以通过标签指明终止/跳过哪一层语句块（不建议使用） \"lucky\".equals(type) // 避免空指针 数组/排序/查找 二维数组 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // 动态创建数组 public static void main(String[] args){ int [][] arr = new int[3][]; // 确定一维数组个数 for (int i = 0; i \u0026lt; arr.length; ++i){ arr[i] = new int[i+1]; // 第i排上开辟空间 } } // 双下标经典用法 int insert_num = 15; for (int i = 0, j = 0; i\u0026lt;arrNew.length; ++i){ if (insert_num \u0026lt; arr[j]){ ++j; arrNew[i] = arr[j]; else arrNew[i] = insert_num; } 对象 对象内存布局 加载cat类信息从第一句代码就执行 Java内存的结构分析 栈：","tags":["Java"],"title":"Java 学习 半成品","url":"https://keepjolly.com/archives/java-study/"},{"categories":["tech"],"content":"数据集下载 密码：s2v2，文件路径mvsnet-\u003epreprocessed_inputsTutorial COLMAP 3.8-devQuickStart Reconstruction \u003e Automatic Reconstruction 分别填入workspace folder、Image folder 如果图片在dtu/scan4/images下，则workspace folder路径填dtu/scan4；image folder填dtu/scan4/images；mask folder作用不知 点两次OK即可生成如下3D模型【滚轮放大缩小，ctrl+滚轮增加粒子】，2080ti耗时半小时可能 等待重建完成，生成大致路径如下 project/sparse 表示所有重建组件的稀疏模型；project/dense表示相对应的dense model；其中dense point cloud fused.ply能通过【File \u003e Import model from ...】导入 整个大致流程为 the picture capture process 注意事项：拍摄的图片应具有丰富的纹理。","date":"2023-03-11T20:17:43.837Z","objectID":"b79c7ae3af2bb6329f2c4a1b885f1055_0","order":0,"summary":"数据集下载 密码：s2v2，文件路径mvsnet-\u003epreprocessed_inputsTutorial COLMAP 3.8-devQuickStart Reconstruction \u003e Automatic Reconstruction 分别填入workspace folder、Image folder 如果图片在dtu/scan4/images下，则workspace folder路径填dtu/scan4；image folder填dtu/scan4/images；mask folder作用不知 点两次OK即可生成如下3D模型【滚轮放大缩小，ctrl+滚轮增加粒子】，2080ti耗时半小时可能 等待重建完成，生成大致路径如下 project/sparse 表示所有重建组件的稀疏模型；project/dense表示相对应的dense model；其中dense point cloud fused.ply能通过【File \u003e Import model from ...】导入 整个大致流程为 the picture capture process 注意事项：拍摄的图片应具有丰富的纹理。","tags":["ComputerVision"],"title":"ColMap使用","url":"https://keepjolly.com/archives/colmap-use/"},{"categories":["tech"],"content":"最好避免纹理特别少的图片如一张白墙or空桌图片。通过加入一些物品来丰富纹理 具备相似的光照情况。避免high dynamic range scenes（如有太阳有影子，穿过门或窗拍摄）。避免镜面反射 具有高度视觉重叠的图片。确保一个物体至少有三张图片，尽量多一点 多视图拍摄。不要通过平移旋转相机来从同一个方向拍摄。但确保相似视角有少且精的图片，并不是越多越好。如果是视频，请减少帧率。 Preface 新手参数用默认的就好。也可以给不同重建场景设置“optimal”选项，Extras \u003e Set options for ... data（不知道干嘛用的，好像能修改图片质量，而不是生成的3D质量）。如需了解参数，查看源码 如果遇到非正常退出，介意用命令行运行可执行文件，以获取不同级别的日志记录详细程度。（命令不知）Data Structure COLMAP 假定所有输入图像都在一个输入目录中，该目录具有可能嵌套的子目录。它将读取存储在该目录中的所有图像，并且它支持各种不同的图像格式（请参阅 FreeImage）。其他文件将被自动忽略。如果需要高性能，那么您应该分离所有非图像文档。图像由它们","date":"2023-03-11T20:17:43.837Z","objectID":"b79c7ae3af2bb6329f2c4a1b885f1055_1","order":1,"summary":"最好避免纹理特别少的图片如一张白墙or空桌图片。通过加入一些物品来丰富纹理 具备相似的光照情况。避免high dynamic range scenes（如有太阳有影子，穿过门或窗拍摄）。避免镜面反射 具有高度视觉重叠的图片。确保一个物体至少有三张图片，尽量多一点 多视图拍摄。不要通过平移旋转相机来从同一个方向拍摄。但确保相似视角有少且精的图片，并不是越多越好。如果是视频，请减少帧率。 Preface 新手参数用默认的就好。也可以给不同重建场景设置“optimal”选项，Extras \u003e Set options for ... data（不知道干嘛用的，好像能修改图片质量，而不是生成的3D质量）。如需了解参数，查看源码 如果遇到非正常退出，介意用命令行运行可执行文件，以获取不同级别的日志记录详细程度。（命令不知）Data Structure COLMAP 假定所有输入图像都在一个输入目录中，该目录具有可能嵌套的子目录。它将读取存储在该目录中的所有图像，并且它支持各种不同的图像格式（请参阅 FreeImage）。其他文件将被自动忽略。如果需要高性能，那么您应该分离所有非图像文档。图像由它们","tags":["ComputerVision"],"title":"ColMap使用","url":"https://keepjolly.com/archives/colmap-use/"},{"categories":["tech"],"content":"的相对文档路径唯一标识。对于后期处理，例如图像去失真或密集重建，应保留相关文档夹结构。 COLMAP 不修改输入图像或目录，所有提取的数据都存储在一个独立的 SQLite 数据库文档中（请参阅数据库格式）。 第一步是通过运行预构建的二进制文件（Windows：COLMAP.bat，Mac：COLMAP.app）或通过从 CMake build 文档夹执行 ./src/exe/colmap gui 来启动 COLMAP 的图形用户界面。接下来，通过File \u003e New project。在此对话框中，您必须选择存储数据库的位置以及包含输入图像的文档夹。为方便起见，您可以通过选择File \u003e Save project将整个项目设置保存到配置文件中。除了任何其他参数设置外，项目配置还存储数据库和图像文档夹的绝对路径信息。如果您决定移动数据库或图像文档夹，则必须通过创建新项目相应地更改路径。或者，可以在您选择的文本编辑器中直接修改生成的 .ini 配置文档。要重新打开现有项目，只需选择File \u003e Open project即可打开配置文档然后恢复所有参数设置。请注意，所有 COLMAP 可执行文","date":"2023-03-11T20:17:43.837Z","objectID":"b79c7ae3af2bb6329f2c4a1b885f1055_2","order":2,"summary":"的相对文档路径唯一标识。对于后期处理，例如图像去失真或密集重建，应保留相关文档夹结构。 COLMAP 不修改输入图像或目录，所有提取的数据都存储在一个独立的 SQLite 数据库文档中（请参阅数据库格式）。 第一步是通过运行预构建的二进制文件（Windows：COLMAP.bat，Mac：COLMAP.app）或通过从 CMake build 文档夹执行 ./src/exe/colmap gui 来启动 COLMAP 的图形用户界面。接下来，通过File \u003e New project。在此对话框中，您必须选择存储数据库的位置以及包含输入图像的文档夹。为方便起见，您可以通过选择File \u003e Save project将整个项目设置保存到配置文件中。除了任何其他参数设置外，项目配置还存储数据库和图像文档夹的绝对路径信息。如果您决定移动数据库或图像文档夹，则必须通过创建新项目相应地更改路径。或者，可以在您选择的文本编辑器中直接修改生成的 .ini 配置文档。要重新打开现有项目，只需选择File \u003e Open project即可打开配置文档然后恢复所有参数设置。请注意，所有 COLMAP 可执行文","tags":["ComputerVision"],"title":"ColMap使用","url":"https://keepjolly.com/archives/colmap-use/"},{"categories":["tech"],"content":"件都可以通过将各个设置指定为命令行参数或通过提供项目配置文档的路径（see Interface）从命令行启动。 Feature Detection and Extraction 选择Processing \u003e feature extraction 在此对话框中，您必须首先决定使用的固有相机模型。您可以从嵌入的 EXIF 信息中自动提取焦距信息，也可以手动指定内部参数，例如在实验室校准中获得的参数（在custom parameters里？）。如果图像包含部分 EXIF 信息，COLMAP 会尝试在大型相机型号数据库中自动查找缺失的相机规格。如果您的所有图像都是由具有相同缩放系数的同一台物理相机拍摄的，建议在所有图像之间共享内在函数。请注意，如果所有图像共享相同的相机型号但并非所有图像都具有相同的尺寸或 EXIF 焦距，进程将不正常地退出。如果您有几组图像共享相同的内在相机参数，您也可以在以后轻松修改相机模型（see Database Management）。如果不确定在此步骤中选择什幺，只需坚持使用默认参数即可。 您可以从图像中检测和提取新特征，也可以从文本中导入现有特征。 COLMAP ","date":"2023-03-11T20:17:43.837Z","objectID":"b79c7ae3af2bb6329f2c4a1b885f1055_3","order":3,"summary":"件都可以通过将各个设置指定为命令行参数或通过提供项目配置文档的路径（see Interface）从命令行启动。 Feature Detection and Extraction 选择Processing \u003e feature extraction 在此对话框中，您必须首先决定使用的固有相机模型。您可以从嵌入的 EXIF 信息中自动提取焦距信息，也可以手动指定内部参数，例如在实验室校准中获得的参数（在custom parameters里？）。如果图像包含部分 EXIF 信息，COLMAP 会尝试在大型相机型号数据库中自动查找缺失的相机规格。如果您的所有图像都是由具有相同缩放系数的同一台物理相机拍摄的，建议在所有图像之间共享内在函数。请注意，如果所有图像共享相同的相机型号但并非所有图像都具有相同的尺寸或 EXIF 焦距，进程将不正常地退出。如果您有几组图像共享相同的内在相机参数，您也可以在以后轻松修改相机模型（see Database Management）。如果不确定在此步骤中选择什幺，只需坚持使用默认参数即可。 您可以从图像中检测和提取新特征，也可以从文本中导入现有特征。 COLMAP ","tags":["ComputerVision"],"title":"ColMap使用","url":"https://keepjolly.com/archives/colmap-use/"},{"categories":["tech"],"content":"在 GPU 或 CPU 上提取 SIFT 特征。 GPU 版本需要连接显示器，而 CPU 版本建议在服务器上使用。一般来说，GPU 版本是有利的，因为它具有定制的特征检测模式，通常在高对比度图像的情况下产生更高质量的特征。如果导入现有特征，则每个图像旁边都必须有一个文本文档（例如 /path/to/image1.jpg 和 /path/to/image1.jpg.txt），格式如下：NUM_FEATURES 128 X Y SCALE ORIENTATION D_1 D_2 D_3 ... D_128 ... X Y SCALE ORIENTATION D_1 D_2 D_3 ... D_128其中 X、Y、SCALE、ORIENTATION 是浮点数，D_1…D_128 值在 0…255 范围内。该文档应包含 NUM_FEATURES 行，每个功能一行。例如，如果图像有 4 个特征，则文本文档应如下所示：4 128 1.2 2.3 0.1 0.3 1 2 3 4 ... 21 2.2 3.3 1.1 0.3 3 2 3 2 ... 32 0.2 1.3 1.1 0.3 3 2 3 2","date":"2023-03-11T20:17:43.837Z","objectID":"b79c7ae3af2bb6329f2c4a1b885f1055_4","order":4,"summary":"在 GPU 或 CPU 上提取 SIFT 特征。 GPU 版本需要连接显示器，而 CPU 版本建议在服务器上使用。一般来说，GPU 版本是有利的，因为它具有定制的特征检测模式，通常在高对比度图像的情况下产生更高质量的特征。如果导入现有特征，则每个图像旁边都必须有一个文本文档（例如 /path/to/image1.jpg 和 /path/to/image1.jpg.txt），格式如下：NUM_FEATURES 128 X Y SCALE ORIENTATION D_1 D_2 D_3 ... D_128 ... X Y SCALE ORIENTATION D_1 D_2 D_3 ... D_128其中 X、Y、SCALE、ORIENTATION 是浮点数，D_1…D_128 值在 0…255 范围内。该文档应包含 NUM_FEATURES 行，每个功能一行。例如，如果图像有 4 个特征，则文本文档应如下所示：4 128 1.2 2.3 0.1 0.3 1 2 3 4 ... 21 2.2 3.3 1.1 0.3 3 2 3 2 ... 32 0.2 1.3 1.1 0.3 3 2 3 2","tags":["ComputerVision"],"title":"ColMap使用","url":"https://keepjolly.com/archives/colmap-use/"},{"categories":["tech"],"content":" ... 2 1.2 2.3 1.1 0.3 3 2 3 2 ... 3请注意，按照惯例，图像的左上角坐标为 (0, 0)，最左上角像素的中心坐标为 (0.5, 0.5)。如果您必须为大型图像集合导入特征，使用您喜欢的脚本语言直接访问数据库会更有效(see Database Format) 如果您完成了所有选项的设置，请选择“Extract”并等待提取完成或取消。如果您在提取过程中取消，下次您开始为同一项目提取图像时，COLMAP 会自动从中断处继续。这也允许您将图像添加到现有项目/重建中。在这种情况下，请务必在使用共享内在函数时验证相机参数。 所有提取的数据将存储在数据库文档中，可以在数据库管理工具中查看/管理(see Database Management) 或使用SQLite(see Database Format).Feature Matching and Geometric Verification 特征匹配和几何验证会找到不同图像中特征点之间的对应关系。 选择Processing \u003e feature matching 并选择一种提供的匹配模式，用于不同的输入场景： Exha","date":"2023-03-11T20:17:43.837Z","objectID":"b79c7ae3af2bb6329f2c4a1b885f1055_5","order":5,"summary":" ... 2 1.2 2.3 1.1 0.3 3 2 3 2 ... 3请注意，按照惯例，图像的左上角坐标为 (0, 0)，最左上角像素的中心坐标为 (0.5, 0.5)。如果您必须为大型图像集合导入特征，使用您喜欢的脚本语言直接访问数据库会更有效(see Database Format) 如果您完成了所有选项的设置，请选择“Extract”并等待提取完成或取消。如果您在提取过程中取消，下次您开始为同一项目提取图像时，COLMAP 会自动从中断处继续。这也允许您将图像添加到现有项目/重建中。在这种情况下，请务必在使用共享内在函数时验证相机参数。 所有提取的数据将存储在数据库文档中，可以在数据库管理工具中查看/管理(see Database Management) 或使用SQLite(see Database Format).Feature Matching and Geometric Verification 特征匹配和几何验证会找到不同图像中特征点之间的对应关系。 选择Processing \u003e feature matching 并选择一种提供的匹配模式，用于不同的输入场景： Exha","tags":["ComputerVision"],"title":"ColMap使用","url":"https://keepjolly.com/archives/colmap-use/"},{"categories":["tech"],"content":"ustive Matching：如果你的数据集中的图片数量比较少（最多几百张），这种匹配模式应该足够快，重建结果最好。在这里，每个图像都与其他图像匹配，而参数block_size决定了同时从磁盘加载到内存中的图像数量。 Sequential Matching: 如果图像是按顺序获取的（例如，通过摄像机），则此模式很有用。在这种情况下，连续的帧有视觉重叠，没有必要穷尽地匹配所有图像对。相反，连续捕获的图像相互匹配。这种匹配模式具有基于vocabulary tree的内置循环检测，其中每第 N 个图像 (loop_detection_period) 与其视觉上最相似的图像 (loop_detection_num_images) 进行匹配。请注意，图像文件名必须按顺序排列（例如，image0001.jpg、image0002.jpg 等）。数据库中的顺序无关紧要，因为图像是根据其文件名明确排序的。请注意，顺序检测需要一个预训练的vocabulary tree，可以从 https://demuc.de/colmap/ 下载。 Vocabulary Tree Matching：在这种匹配模式中，","date":"2023-03-11T20:17:43.837Z","objectID":"b79c7ae3af2bb6329f2c4a1b885f1055_6","order":6,"summary":"ustive Matching：如果你的数据集中的图片数量比较少（最多几百张），这种匹配模式应该足够快，重建结果最好。在这里，每个图像都与其他图像匹配，而参数block_size决定了同时从磁盘加载到内存中的图像数量。 Sequential Matching: 如果图像是按顺序获取的（例如，通过摄像机），则此模式很有用。在这种情况下，连续的帧有视觉重叠，没有必要穷尽地匹配所有图像对。相反，连续捕获的图像相互匹配。这种匹配模式具有基于vocabulary tree的内置循环检测，其中每第 N 个图像 (loop_detection_period) 与其视觉上最相似的图像 (loop_detection_num_images) 进行匹配。请注意，图像文件名必须按顺序排列（例如，image0001.jpg、image0002.jpg 等）。数据库中的顺序无关紧要，因为图像是根据其文件名明确排序的。请注意，顺序检测需要一个预训练的vocabulary tree，可以从 https://demuc.de/colmap/ 下载。 Vocabulary Tree Matching：在这种匹配模式中，","tags":["ComputerVision"],"title":"ColMap使用","url":"https://keepjolly.com/archives/colmap-use/"},{"categories":["tech"],"content":"每个图像都使用a vocabulary tree with spatial re-ranking与其视觉上最近的邻居进行匹配。这是推荐的大型图像集合（数千个）的匹配模式。这需要一个预训练的词汇树，可以从 https://demuc.de/colmap/ 下载。 Spatial Matching：这种匹配模式将每个图像与其空间上最近的邻居进行匹配。空间位置可以在database management中手动设置。默认情况下，COLMAP 还从 EXIF 中提取 GPS 信息并将其用于空间最近邻搜索。如果有准确的先验位置信息，这是推荐的匹配方式。 Transitive Matching：这种匹配模式使用已经存在的特征匹配的传递关系来产生更完整的匹配图。如果图像 A 与图像 B 匹配并且 B 与 C 匹配，则此匹配器会尝试直接将 A 与 C 匹配。 Custom Matching：此模式允许指定单个图像对进行匹配或导入单个特征匹配。要指定图像对，您必须提供一个文本文档，每行包含一个图像对：image1.jpg image2.jpg image1.jpg image3.jpg ...其中 ima","date":"2023-03-11T20:17:43.837Z","objectID":"b79c7ae3af2bb6329f2c4a1b885f1055_7","order":7,"summary":"每个图像都使用a vocabulary tree with spatial re-ranking与其视觉上最近的邻居进行匹配。这是推荐的大型图像集合（数千个）的匹配模式。这需要一个预训练的词汇树，可以从 https://demuc.de/colmap/ 下载。 Spatial Matching：这种匹配模式将每个图像与其空间上最近的邻居进行匹配。空间位置可以在database management中手动设置。默认情况下，COLMAP 还从 EXIF 中提取 GPS 信息并将其用于空间最近邻搜索。如果有准确的先验位置信息，这是推荐的匹配方式。 Transitive Matching：这种匹配模式使用已经存在的特征匹配的传递关系来产生更完整的匹配图。如果图像 A 与图像 B 匹配并且 B 与 C 匹配，则此匹配器会尝试直接将 A 与 C 匹配。 Custom Matching：此模式允许指定单个图像对进行匹配或导入单个特征匹配。要指定图像对，您必须提供一个文本文档，每行包含一个图像对：image1.jpg image2.jpg image1.jpg image3.jpg ...其中 ima","tags":["ComputerVision"],"title":"ColMap使用","url":"https://keepjolly.com/archives/colmap-use/"},{"categories":["tech"],"content":"ge1.jpg 是图像文档夹中的相对路径。您有两个选项来导入单个特征匹配项：未经geometrically verified的原始特征匹配或已经geometrically verified的特征匹配。在这两种情况下，预期格式为： 其中 image1.jpg 是图像文档夹中的相对路径，数字对是各个图像中从零开始的特征索引。如果您必须为大型图像集导入许多匹配项，使用您选择的脚本语言直接访问数据库会更有效。 如果您完成了所有选项的设置，请选择\"Match\"/\"Run\"并等待匹配完成或在期间取消。请注意，此步骤可能会花费大量时间，具体取决于图像数量、每张图像的特征数量以及所选的匹配模式。exhaustive matching的预期时间从几十张图像的几分钟到数百张图像的几小时到数千张图像的几天或几周不等。如果在匹配后取消匹配过程或导入新图像，COLMAP 只会匹配以前没有匹配过的图像对。跳过已经匹配的图像对的开销很低。这还可以匹配初始匹配后导入的其他图像，并且可以为同一数据集组合不同的匹配模式。 所有提取的数据将存储在数据库文档中，可以在数据库管理工具中查看/管理(see Database Ma","date":"2023-03-11T20:17:43.837Z","objectID":"b79c7ae3af2bb6329f2c4a1b885f1055_8","order":8,"summary":"ge1.jpg 是图像文档夹中的相对路径。您有两个选项来导入单个特征匹配项：未经geometrically verified的原始特征匹配或已经geometrically verified的特征匹配。在这两种情况下，预期格式为： 其中 image1.jpg 是图像文档夹中的相对路径，数字对是各个图像中从零开始的特征索引。如果您必须为大型图像集导入许多匹配项，使用您选择的脚本语言直接访问数据库会更有效。 如果您完成了所有选项的设置，请选择\"Match\"/\"Run\"并等待匹配完成或在期间取消。请注意，此步骤可能会花费大量时间，具体取决于图像数量、每张图像的特征数量以及所选的匹配模式。exhaustive matching的预期时间从几十张图像的几分钟到数百张图像的几小时到数千张图像的几天或几周不等。如果在匹配后取消匹配过程或导入新图像，COLMAP 只会匹配以前没有匹配过的图像对。跳过已经匹配的图像对的开销很低。这还可以匹配初始匹配后导入的其他图像，并且可以为同一数据集组合不同的匹配模式。 所有提取的数据将存储在数据库文档中，可以在数据库管理工具中查看/管理(see Database Ma","tags":["ComputerVision"],"title":"ColMap使用","url":"https://keepjolly.com/archives/colmap-use/"},{"categories":["tech"],"content":"nagement) 或使用SQLite(see Database Format). 注意，特征匹配需要 GPU，并且在匹配过程中您的计算机的显示性能可能会显著下降。如果您的系统有多个支持 CUDA 的 GPU，您可以使用 **gpu_index **选项选择特定的 GPU。Sparse Reconstruction Reconstruction \u003e start/resume reconstruction进行 incremental reconstruction COLMAP 首先将所有数据库中提取的数据加载到内存中，并从初始的image pair开始重建。然后，通过记录新图像和triangulating new points来逐步扩展场景。在此重建过程中，结果实时可视化。有关可用控件的更多详细信息，请参阅Graphical User Interface。如果不是所有图像都记录到同一模型中，COLMAP 会尝试重建多个模型。可以从工具栏的下拉菜单中选择不同的模型（应该如图所示的下拉栏）。 如果不同的模型有共同的记录过图像，您可以使用 model_converter executable将","date":"2023-03-11T20:17:43.837Z","objectID":"b79c7ae3af2bb6329f2c4a1b885f1055_9","order":9,"summary":"nagement) 或使用SQLite(see Database Format). 注意，特征匹配需要 GPU，并且在匹配过程中您的计算机的显示性能可能会显著下降。如果您的系统有多个支持 CUDA 的 GPU，您可以使用 **gpu_index **选项选择特定的 GPU。Sparse Reconstruction Reconstruction \u003e start/resume reconstruction进行 incremental reconstruction COLMAP 首先将所有数据库中提取的数据加载到内存中，并从初始的image pair开始重建。然后，通过记录新图像和triangulating new points来逐步扩展场景。在此重建过程中，结果实时可视化。有关可用控件的更多详细信息，请参阅Graphical User Interface。如果不是所有图像都记录到同一模型中，COLMAP 会尝试重建多个模型。可以从工具栏的下拉菜单中选择不同的模型（应该如图所示的下拉栏）。 如果不同的模型有共同的记录过图像，您可以使用 model_converter executable将","tags":["ComputerVision"],"title":"ColMap使用","url":"https://keepjolly.com/archives/colmap-use/"},{"categories":["tech"],"content":"它们合并到一个重建中（有关详细信息，see FAQ）。如果您的所有图像都使用没有共享内在函数的 SIMPLE_RADIAL 相机模型（默认），您可以使用 PBA而不是 Ceres Solver进行快速bundle调整，它可以在“reconstruction options”下的\"Bundle\"中激活（use_pba = true）。 理想情况下，重建工作正常并且所有图像都已记录。如果不是这种情况，建议：执行额外的匹配。为获得最佳结果，请使用exhaustive matching、enable guided matching、增加词汇树匹配中的最近邻数量或增加sequential matching中的重叠等。 如果 COLMAP 初始化失败，请手动选择初始图像对。选择Reconstruction \u003e Reconstruction options \u003e Init并从数据库管理工具中设置从不同视点具有足够匹配度的图像。 并从数据库管理工具中设置从不同视点具有足够匹配度的图像。Importing and Exporting COLMAP 为进一步处理提供了几个导出选项。为了充分的灵活性，建议导出","date":"2023-03-11T20:17:43.837Z","objectID":"b79c7ae3af2bb6329f2c4a1b885f1055_10","order":10,"summary":"它们合并到一个重建中（有关详细信息，see FAQ）。如果您的所有图像都使用没有共享内在函数的 SIMPLE_RADIAL 相机模型（默认），您可以使用 PBA而不是 Ceres Solver进行快速bundle调整，它可以在“reconstruction options”下的\"Bundle\"中激活（use_pba = true）。 理想情况下，重建工作正常并且所有图像都已记录。如果不是这种情况，建议：执行额外的匹配。为获得最佳结果，请使用exhaustive matching、enable guided matching、增加词汇树匹配中的最近邻数量或增加sequential matching中的重叠等。 如果 COLMAP 初始化失败，请手动选择初始图像对。选择Reconstruction \u003e Reconstruction options \u003e Init并从数据库管理工具中设置从不同视点具有足够匹配度的图像。 并从数据库管理工具中设置从不同视点具有足够匹配度的图像。Importing and Exporting COLMAP 为进一步处理提供了几个导出选项。为了充分的灵活性，建议导出","tags":["ComputerVision"],"title":"ColMap使用","url":"https://keepjolly.com/archives/colmap-use/"},{"categories":["tech"],"content":"以 COLMAP 的数据格式的reconstruction。通过选择 File \u003e Export 导出当前查看的模型或 File \u003e Export all 导出所有重建的模型。使用用于重建相机、图像和点的单独文本文件将模型导出到所选文件夹中。当以 COLMAP 的数据格式导出时，您可以重新导入重建以用于以后的可视化、图像去失真，或从中断的地方继续现有的重建（例如，在导入和匹配新图像之后）。要导入模型，请选择 File \u003e Import 并选择导出文件夹路径。或者，您也可以通过 File \u003e Export as... 选择以各种其他格式导出模型，例如 Bundler、VisualSfM 、PLY 或 VRML。COLMAP 可以通过 File \u003e Import From... 可视化具有 RGB 信息的plain PLY 点云文件。有关导出模型格式的更多信息，请参见此处。 Dense Reconstruction 在重建场景的稀疏表示和输入图像的相机姿势后，MVS 现在可以恢复更密集的场景几何。 COLMAP 具有集成的密集重建流程，可以为所有配准图像生成深度图和法线图，将深度图和法线图","date":"2023-03-11T20:17:43.837Z","objectID":"b79c7ae3af2bb6329f2c4a1b885f1055_11","order":11,"summary":"以 COLMAP 的数据格式的reconstruction。通过选择 File \u003e Export 导出当前查看的模型或 File \u003e Export all 导出所有重建的模型。使用用于重建相机、图像和点的单独文本文件将模型导出到所选文件夹中。当以 COLMAP 的数据格式导出时，您可以重新导入重建以用于以后的可视化、图像去失真，或从中断的地方继续现有的重建（例如，在导入和匹配新图像之后）。要导入模型，请选择 File \u003e Import 并选择导出文件夹路径。或者，您也可以通过 File \u003e Export as... 选择以各种其他格式导出模型，例如 Bundler、VisualSfM 、PLY 或 VRML。COLMAP 可以通过 File \u003e Import From... 可视化具有 RGB 信息的plain PLY 点云文件。有关导出模型格式的更多信息，请参见此处。 Dense Reconstruction 在重建场景的稀疏表示和输入图像的相机姿势后，MVS 现在可以恢复更密集的场景几何。 COLMAP 具有集成的密集重建流程，可以为所有配准图像生成深度图和法线图，将深度图和法线图","tags":["ComputerVision"],"title":"ColMap使用","url":"https://keepjolly.com/archives/colmap-use/"},{"categories":["create"],"content":"项目需求 python 客户端将opencv读取到的图片发送给python服务端，然后python服务端将opencv图发送给Linux设备，将处理结果通过C++ 传给服务端，然后服务端再传给客户端。 这里服务端可以改成C++ 写的，就不用这么麻烦了，但是需要将python的pickle包解码成C++ 的pickle包，还未尝试。 以下所给代码，并不一定能跑通，思路在哪里，结合自己的代码第一步，python间通信 这种方式能一次性全部发送，一次性全部接受（如发一张图片，接受一张，发两张，接受两张）方法一 Python Client 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 import datetime import pickle import time import cv2 from multiprocessing.connection impor","date":"2023-01-08T11:17:34.624Z","objectID":"eff7c289bf909db8e9e7863d9f5c0e9e_0","order":0,"summary":"项目需求 python 客户端将opencv读取到的图片发送给python服务端，然后python服务端将opencv图发送给Linux设备，将处理结果通过C++ 传给服务端，然后服务端再传给客户端。 这里服务端可以改成C++ 写的，就不用这么麻烦了，但是需要将python的pickle包解码成C++ 的pickle包，还未尝试。 以下所给代码，并不一定能跑通，思路在哪里，结合自己的代码第一步，python间通信 这种方式能一次性全部发送，一次性全部接受（如发一张图片，接受一张，发两张，接受两张）方法一 Python Client 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 import datetime import pickle import time import cv2 from multiprocessing.connection impor","tags":["Python","TCP","Ctype"],"title":"python 与python通信、python调用c++ 动态库返回检测结果","url":"https://keepjolly.com/archives/python-and-ctypes/"},{"categories":["create"],"content":"t Client import os host = 'localhost' port = 9006 frame_num = 0 def connect_and_send(path, mode='file'): global frame_num client = Client((host, port)) while 1: img_dict_list = [] # 从文件夹读取图片 if mode == 'file': img_list = [] img_path = './data' for filename in os.listdir(img_path): read_img = cv2.imread(img_path + '/' + filename) img_list.append(read_img) # 存入dict for i in range(len(img_list)): img_obj = {'frame_num': i + 1, 'image': img_list[i], 'time': time.strftime('%Y%m%d%H%M%S', time.localti","date":"2023-01-08T11:17:34.624Z","objectID":"eff7c289bf909db8e9e7863d9f5c0e9e_1","order":1,"summary":"t Client import os host = 'localhost' port = 9006 frame_num = 0 def connect_and_send(path, mode='file'): global frame_num client = Client((host, port)) while 1: img_dict_list = [] # 从文件夹读取图片 if mode == 'file': img_list = [] img_path = './data' for filename in os.listdir(img_path): read_img = cv2.imread(img_path + '/' + filename) img_list.append(read_img) # 存入dict for i in range(len(img_list)): img_obj = {'frame_num': i + 1, 'image': img_list[i], 'time': time.strftime('%Y%m%d%H%M%S', time.localti","tags":["Python","TCP","Ctype"],"title":"python 与python通信、python调用c++ 动态库返回检测结果","url":"https://keepjolly.com/archives/python-and-ctypes/"},{"categories":["create"],"content":"me())} img_dict_list.append(img_obj) else: read_img = cv2.imread(path) img_obj = {'frame_num': frame_num + 1, 'image': read_img, 'time': datetime.datetime.now().strftime('%M%S.%f')} img_dict_list.append(img_obj) frame_num += 1 # 1. obj to pickle 用json的话会慢，因为read_img需要to_list() data_bytes = pickle.dumps(img_dict_list) # 2. 发送文件 print('client send: ', datetime.datetime.now().strftime('%M%S.%f')) client.send(data_bytes) det_result = client.recv() print('client receive: ', datetime.datetime.now().st","date":"2023-01-08T11:17:34.624Z","objectID":"eff7c289bf909db8e9e7863d9f5c0e9e_2","order":2,"summary":"me())} img_dict_list.append(img_obj) else: read_img = cv2.imread(path) img_obj = {'frame_num': frame_num + 1, 'image': read_img, 'time': datetime.datetime.now().strftime('%M%S.%f')} img_dict_list.append(img_obj) frame_num += 1 # 1. obj to pickle 用json的话会慢，因为read_img需要to_list() data_bytes = pickle.dumps(img_dict_list) # 2. 发送文件 print('client send: ', datetime.datetime.now().strftime('%M%S.%f')) client.send(data_bytes) det_result = client.recv() print('client receive: ', datetime.datetime.now().st","tags":["Python","TCP","Ctype"],"title":"python 与python通信、python调用c++ 动态库返回检测结果","url":"https://keepjolly.com/archives/python-and-ctypes/"},{"categories":["create"],"content":"rftime('%M%S.%f')) det_result = pickle.loads(det_result) print(det_result) break if __name__ == '__main__': connect_and_send('data/ship.jpg', mode='1') Python Server端 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 import datetime import pickle import cv2 import numpy as np from multiprocessing.connection import Listener host = '192.168.0.2' port = 9006 server_sock = Listener((host, port)) print(\"Connecting... ...\") sock = s","date":"2023-01-08T11:17:34.624Z","objectID":"eff7c289bf909db8e9e7863d9f5c0e9e_3","order":3,"summary":"rftime('%M%S.%f')) det_result = pickle.loads(det_result) print(det_result) break if __name__ == '__main__': connect_and_send('data/ship.jpg', mode='1') Python Server端 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 import datetime import pickle import cv2 import numpy as np from multiprocessing.connection import Listener host = '192.168.0.2' port = 9006 server_sock = Listener((host, port)) print(\"Connecting... ...\") sock = s","tags":["Python","TCP","Ctype"],"title":"python 与python通信、python调用c++ 动态库返回检测结果","url":"https://keepjolly.com/archives/python-and-ctypes/"},{"categories":["create"],"content":"erver_sock.accept() while 1: try: received_bytes = sock.recv() print('server receive: ', datetime.datetime.now().strftime('%M%S.%f')) except Exception as e: received_bytes = None print(e) if not received_bytes: # 当客户端下线，不让服务端下线 server_sock.close() sock.close() print(\"Client's data is empty !!!\") server_sock = Listener((host, port)) print(\"Reset Sever\") sock = server_sock.accept() continue else: # bytes to list img_dict_list = pickle.loads(received_bytes) # detect det_dict_list = [] img_num = len","date":"2023-01-08T11:17:34.624Z","objectID":"eff7c289bf909db8e9e7863d9f5c0e9e_4","order":4,"summary":"erver_sock.accept() while 1: try: received_bytes = sock.recv() print('server receive: ', datetime.datetime.now().strftime('%M%S.%f')) except Exception as e: received_bytes = None print(e) if not received_bytes: # 当客户端下线，不让服务端下线 server_sock.close() sock.close() print(\"Client's data is empty !!!\") server_sock = Listener((host, port)) print(\"Reset Sever\") sock = server_sock.accept() continue else: # bytes to list img_dict_list = pickle.loads(received_bytes) # detect det_dict_list = [] img_num = len","tags":["Python","TCP","Ctype"],"title":"python 与python通信、python调用c++ 动态库返回检测结果","url":"https://keepjolly.com/archives/python-and-ctypes/"},{"categories":["create"],"content":"(img_dict_list) img = img_dict_list[0]['image'] # img send to server det_obj = {'frame_num': 1, 'det_output': getCResult(lib, det, img, img_num), # getCResult获取检测结果 'time': datetime.datetime.now().strftime('%Y%m%d%H%M%S.%f')} det_dict_list.append(det_obj) # send result to client content = pickle.dumps(det_dict_list) print('server send: ', datetime.datetime.now().strftime('%M%S.%f')) sock.send(content) 参考链接：Python，用简单代码上传内存中的图片到远程服务器进行处理、Python传输图片（同一局域网下版本）第二步，python调用C++ 动态库（opencv）返回检测结果 一共有cy","date":"2023-01-08T11:17:34.624Z","objectID":"eff7c289bf909db8e9e7863d9f5c0e9e_5","order":5,"summary":"(img_dict_list) img = img_dict_list[0]['image'] # img send to server det_obj = {'frame_num': 1, 'det_output': getCResult(lib, det, img, img_num), # getCResult获取检测结果 'time': datetime.datetime.now().strftime('%Y%m%d%H%M%S.%f')} det_dict_list.append(det_obj) # send result to client content = pickle.dumps(det_dict_list) print('server send: ', datetime.datetime.now().strftime('%M%S.%f')) sock.send(content) 参考链接：Python，用简单代码上传内存中的图片到远程服务器进行处理、Python传输图片（同一局域网下版本）第二步，python调用C++ 动态库（opencv）返回检测结果 一共有cy","tags":["Python","TCP","Ctype"],"title":"python 与python通信、python调用c++ 动态库返回检测结果","url":"https://keepjolly.com/archives/python-and-ctypes/"},{"categories":["create"],"content":"thon、pybind11、ctypes等包，这里用的是ctypes 首先你需要有个.so文件，可以用cmake生成，注意python中你要调的包的位置，用camke不改.so文件的路径的话自动在当前文件夹生成，所以会报 **undefined symbol: strTest，**Linux指令：cp 复制文件 cmake自行查阅吧，这里做个示范project(xxx) add_library(xxx SHARED xxx.cpp) //这里会将.cpp中的非类方法加入到.so文件中 add_executable(yyy yyy.cpp) target_link_libraries(yyy xxx) link：https://www.cnblogs.com/blog-3123958139/p/5575360.html 难点一：传输字符串 string to std::string C++ 端：1 2 3 4 5 6 extern \"C\" { // 加了才能识别到括号内的方法，必须！用C格式写代码 int Detect_Init(Detect* det, char* config_pat","date":"2023-01-08T11:17:34.624Z","objectID":"eff7c289bf909db8e9e7863d9f5c0e9e_6","order":6,"summary":"thon、pybind11、ctypes等包，这里用的是ctypes 首先你需要有个.so文件，可以用cmake生成，注意python中你要调的包的位置，用camke不改.so文件的路径的话自动在当前文件夹生成，所以会报 **undefined symbol: strTest，**Linux指令：cp 复制文件 cmake自行查阅吧，这里做个示范project(xxx) add_library(xxx SHARED xxx.cpp) //这里会将.cpp中的非类方法加入到.so文件中 add_executable(yyy yyy.cpp) target_link_libraries(yyy xxx) link：https://www.cnblogs.com/blog-3123958139/p/5575360.html 难点一：传输字符串 string to std::string C++ 端：1 2 3 4 5 6 extern \"C\" { // 加了才能识别到括号内的方法，必须！用C格式写代码 int Detect_Init(Detect* det, char* config_pat","tags":["Python","TCP","Ctype"],"title":"python 与python通信、python调用c++ 动态库返回检测结果","url":"https://keepjolly.com/archives/python-and-ctypes/"},{"categories":["create"],"content":"问题来源 项目需求用Ubuntu和Debian互相通信，传输数据 参考链接：Ubuntu通过修改配置文件进行网络配置、linux 双机直连设置物理连接 首先当然是用网线将两台设备连接起来，用的是本地接口修改Ubuntu的ip地址 此处先在终端（Ubuntu快捷键ctrl+alt+t）ifconfig查看当前ip地址 此处如果没有配置enp4s0的话 就不会出现inet 192.168.0.1这些东西，如果配置过，则会显示，那么只需要配置另一台Linux设备处在统一网段下即可。 此外有些设备可能不叫enp4s0,只要看到e开头的就是本地网络，即插网线的地方，或者Google冒号前的意思。 然后终端输入sudo vim /etc/network/interfaces 摁i进入insert模式，新加内容：auto enp4s0 iface enp4s0 inet static address 192.168.0.1 netmask 255.255.255.0 gateway 192.168.0.1 其中enp4s0 换成你的设备名字，如eth0；其他部分懂网络的任意设置，跟我一样小白的直接复","date":"2022-12-15T19:50:58.186Z","objectID":"67f2d6a8eac3894b9ef1b4102e3b948e_0","order":0,"summary":"问题来源 项目需求用Ubuntu和Debian互相通信，传输数据 参考链接：Ubuntu通过修改配置文件进行网络配置、linux 双机直连设置物理连接 首先当然是用网线将两台设备连接起来，用的是本地接口修改Ubuntu的ip地址 此处先在终端（Ubuntu快捷键ctrl+alt+t）ifconfig查看当前ip地址 此处如果没有配置enp4s0的话 就不会出现inet 192.168.0.1这些东西，如果配置过，则会显示，那么只需要配置另一台Linux设备处在统一网段下即可。 此外有些设备可能不叫enp4s0,只要看到e开头的就是本地网络，即插网线的地方，或者Google冒号前的意思。 然后终端输入sudo vim /etc/network/interfaces 摁i进入insert模式，新加内容：auto enp4s0 iface enp4s0 inet static address 192.168.0.1 netmask 255.255.255.0 gateway 192.168.0.1 其中enp4s0 换成你的设备名字，如eth0；其他部分懂网络的任意设置，跟我一样小白的直接复","tags":["Linux"],"title":"Linux 两台设备用网线通信","url":"https://keepjolly.com/archives/linux-two-device-directly-communicate/"},{"categories":["error"],"content":"前言 本文环境是win7，opencv-python，有两个摄像头设备 参考链接：万能的StackOverflow-1 万能的StackOverflow-2 遇到的问题 win7设备上需要调高摄像头分辨率，有两个摄像头，一个固定一个usb，但是只能控制在640 x 480，才能两个都能使用，否则调整随机调整摄像头分辨率两个都无法点亮。并且在win10使用单个摄像头，修改为3000 x 2000 输出的图片分辨率可以直接自适应为2048 x 1536，可以点亮摄像头。解决办法一 因为要对程序做迁移，但是在win10上可以直接任意设置分辨率来时opencv自适应摄像头最大分辨率，但是在win7无法实现，所以设定分辨率为固定值640 x 480 800 x 600 1024 x 768 1280 x 960 1920 x 1080 2048 x 1536 ..... 注意越大分辨率需求的算力越大，以及有些分辨率可能不是通用，可以多试试 或者在代码上多设置几个大整数，然后get CV_CAP_PROP_FRAME_WIDTH，输出看一下，摄像头的分辨率是多少 1 2 3 4 cap = cv2","date":"2022-11-16T16:40:52.665Z","objectID":"e3dd7193aec93438f46182aba1ff1736_0","order":0,"summary":"前言 本文环境是win7，opencv-python，有两个摄像头设备 参考链接：万能的StackOverflow-1 万能的StackOverflow-2 遇到的问题 win7设备上需要调高摄像头分辨率，有两个摄像头，一个固定一个usb，但是只能控制在640 x 480，才能两个都能使用，否则调整随机调整摄像头分辨率两个都无法点亮。并且在win10使用单个摄像头，修改为3000 x 2000 输出的图片分辨率可以直接自适应为2048 x 1536，可以点亮摄像头。解决办法一 因为要对程序做迁移，但是在win10上可以直接任意设置分辨率来时opencv自适应摄像头最大分辨率，但是在win7无法实现，所以设定分辨率为固定值640 x 480 800 x 600 1024 x 768 1280 x 960 1920 x 1080 2048 x 1536 ..... 注意越大分辨率需求的算力越大，以及有些分辨率可能不是通用，可以多试试 或者在代码上多设置几个大整数，然后get CV_CAP_PROP_FRAME_WIDTH，输出看一下，摄像头的分辨率是多少 1 2 3 4 cap = cv2","tags":["Python","Opencv"],"title":"opencv提高摄像头分辨率时，无法打开摄像头","url":"https://keepjolly.com/archives/opencv-set-high-resolution-cant-open-camera/"},{"categories":["error"],"content":".VideoCapture(0) print(\"Frame default resolution: (\" + str(cap.get(cv.CV_CAP_PROP_FRAME_WIDTH)) + \"; \" + str(cap.get(cv.CV_CAP_PROP_FRAME_HEIGHT)) + \")\") cap.set(cv.CV_CAP_PROP_FRAME_WIDTH, 800) cap.set(cv.CV_CAP_PROP_FRAME_HEIGHT, 600) 解决办法二 未经测试，就是有多个摄像头设备的时候，占用一个总线，所以导致冲突了，多添加一个usb card（我也不知道是啥，可能是usb接口） https://stackoverflow.com/a/29702444","date":"2022-11-16T16:40:52.665Z","objectID":"e3dd7193aec93438f46182aba1ff1736_1","order":1,"summary":".VideoCapture(0) print(\"Frame default resolution: (\" + str(cap.get(cv.CV_CAP_PROP_FRAME_WIDTH)) + \"; \" + str(cap.get(cv.CV_CAP_PROP_FRAME_HEIGHT)) + \")\") cap.set(cv.CV_CAP_PROP_FRAME_WIDTH, 800) cap.set(cv.CV_CAP_PROP_FRAME_HEIGHT, 600) 解决办法二 未经测试，就是有多个摄像头设备的时候，占用一个总线，所以导致冲突了，多添加一个usb card（我也不知道是啥，可能是usb接口） https://stackoverflow.com/a/29702444","tags":["Python","Opencv"],"title":"opencv提高摄像头分辨率时，无法打开摄像头","url":"https://keepjolly.com/archives/opencv-set-high-resolution-cant-open-camera/"},{"categories":["create"],"content":"仅做参考用，今年建模赛前做完这个代码后，自觉信心满满，比完赛后直接裂开，希望能拿个国三吧!o(╥﹏╥)o。 11/26 为什么还没公布成绩，哭死，貌似还有好几个星期 github数据查看 1 2 3 4 5 6 7 8 9 10 import os from pandas_profiling import ProfileReport import pandas as pd # 超慢 先运行这个 os.chdir(r'C:\\Users\\Desktop\\math') file_name = 'Molecular_Descriptor.xlsx' sheet_name = 'training' table = pd.read_excel(file_name, sheet_name, header=[0]) # 如果有多个列名 方便起见只取一个 profile = table.profile_report(title=\"data_profile\") profile.to_file(output_file=\"analysis.html\") 数据预处理 1 2 3 4 5 6 7 8 9 10 1","date":"2022-10-16T20:58:19.149Z","objectID":"f0a06d0f1b6e13c822d401503a17eed5_0","order":0,"summary":"仅做参考用，今年建模赛前做完这个代码后，自觉信心满满，比完赛后直接裂开，希望能拿个国三吧!o(╥﹏╥)o。 11/26 为什么还没公布成绩，哭死，貌似还有好几个星期 github数据查看 1 2 3 4 5 6 7 8 9 10 import os from pandas_profiling import ProfileReport import pandas as pd # 超慢 先运行这个 os.chdir(r'C:\\Users\\Desktop\\math') file_name = 'Molecular_Descriptor.xlsx' sheet_name = 'training' table = pd.read_excel(file_name, sheet_name, header=[0]) # 如果有多个列名 方便起见只取一个 profile = table.profile_report(title=\"data_profile\") profile.to_file(output_file=\"analysis.html\") 数据预处理 1 2 3 4 5 6 7 8 9 10 1","tags":["Python"],"title":"数学建模-数据分析题","url":"https://keepjolly.com/archives/data-analysis/"},{"categories":["create"],"content":"1 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 15","date":"2022-10-16T20:58:19.149Z","objectID":"f0a06d0f1b6e13c822d401503a17eed5_1","order":1,"summary":"1 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 15","tags":["Python"],"title":"数学建模-数据分析题","url":"https://keepjolly.com/archives/data-analysis/"},{"categories":["create"],"content":"8 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 # 导包略过，自行github看 def describeData(data): print(data.dtypes) # 如果是object需要转换 # for col in data: # object to numeric if is numeric # if isinstance(data[col][0], int) or isinstance(data[col][0], float): # data[col] = pd.to_numeric(data[col], errors='coerce') # print('数据类型：', data.dtypes) print('前三行数据：', data.iloc[:3, :5]) # 看看是否导入正","date":"2022-10-16T20:58:19.149Z","objectID":"f0a06d0f1b6e13c822d401503a17eed5_2","order":2,"summary":"8 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 # 导包略过，自行github看 def describeData(data): print(data.dtypes) # 如果是object需要转换 # for col in data: # object to numeric if is numeric # if isinstance(data[col][0], int) or isinstance(data[col][0], float): # data[col] = pd.to_numeric(data[col], errors='coerce') # print('数据类型：', data.dtypes) print('前三行数据：', data.iloc[:3, :5]) # 看看是否导入正","tags":["Python"],"title":"数学建模-数据分析题","url":"https://keepjolly.com/archives/data-analysis/"},{"categories":["create"],"content":"确 print('样本情况', data.describe()) # 查看样本分布 sns.displot(data['土壤蒸发量(mm)'], kde=True) # 直方图折线图可视 !! 注意修改成某个列名 plt.savefig('picture/describe.jpg') data = pd.concat([data['10cm湿度(kg/m2)'], data['土壤蒸发量(mm)']], axis=1) # 1 !! 注意修改成某个列名 data.plot.scatter(x='10cm湿度(kg/m2)', y='土壤蒸发量(mm)', ylim=(0, 1666), c='c', cmap='coolwarm') # data = pd.concat([data['ALogp2'], data['AMR']], axis=1) # 1 !! 可选第二组对比 看它们之间的相关性 线性非线性 # data.plot.scatter(x='ALogp2', y='AMR', ylim=(0, 1666), c='c', cmap='coolwarm') plt.show(","date":"2022-10-16T20:58:19.149Z","objectID":"f0a06d0f1b6e13c822d401503a17eed5_3","order":3,"summary":"确 print('样本情况', data.describe()) # 查看样本分布 sns.displot(data['土壤蒸发量(mm)'], kde=True) # 直方图折线图可视 !! 注意修改成某个列名 plt.savefig('picture/describe.jpg') data = pd.concat([data['10cm湿度(kg/m2)'], data['土壤蒸发量(mm)']], axis=1) # 1 !! 注意修改成某个列名 data.plot.scatter(x='10cm湿度(kg/m2)', y='土壤蒸发量(mm)', ylim=(0, 1666), c='c', cmap='coolwarm') # data = pd.concat([data['ALogp2'], data['AMR']], axis=1) # 1 !! 可选第二组对比 看它们之间的相关性 线性非线性 # data.plot.scatter(x='ALogp2', y='AMR', ylim=(0, 1666), c='c', cmap='coolwarm') plt.show(","tags":["Python"],"title":"数学建模-数据分析题","url":"https://keepjolly.com/archives/data-analysis/"},{"categories":["create"],"content":") def processNull(data): # https://blog.51cto.com/liguodong/3702149 # 1. 输出缺失率表格 建议结果放到excel，图好看 missing = data.isnull().sum().reset_index().rename(columns={0: 'missNum'})[1:] missing['missRate'] = missing['missNum'] / data.shape[0] # 计算缺失比例 miss_analogy = missing.sort_values(by='missRate', ascending=False) # 升序 miss_analogy.index = range(1, len(miss_analogy) + 1) # 排序后重新修改index print('前八变量的缺失率', miss_analogy[:5]) # 输出前8个 ！！ 解除注释 # 2. 输出缺失率图 取前8个遍历 plt.figure() plt.bar(np.arange(5), list(miss_an","date":"2022-10-16T20:58:19.149Z","objectID":"f0a06d0f1b6e13c822d401503a17eed5_4","order":4,"summary":") def processNull(data): # https://blog.51cto.com/liguodong/3702149 # 1. 输出缺失率表格 建议结果放到excel，图好看 missing = data.isnull().sum().reset_index().rename(columns={0: 'missNum'})[1:] missing['missRate'] = missing['missNum'] / data.shape[0] # 计算缺失比例 miss_analogy = missing.sort_values(by='missRate', ascending=False) # 升序 miss_analogy.index = range(1, len(miss_analogy) + 1) # 排序后重新修改index print('前八变量的缺失率', miss_analogy[:5]) # 输出前8个 ！！ 解除注释 # 2. 输出缺失率图 取前8个遍历 plt.figure() plt.bar(np.arange(5), list(miss_an","tags":["Python"],"title":"数学建模-数据分析题","url":"https://keepjolly.com/archives/data-analysis/"},{"categories":["create"],"content":"alogy['missRate'].values)[:5], color=['red', 'steelblue', 'yellow']) plt.title('变量缺失率直方图') plt.xlabel('变量名') plt.ylabel('缺失率') plt.xticks(np.arange(5), list(miss_analogy['index'][:5])) # plt.xticks(rotation=90) for x, y in enumerate(list(miss_analogy['missRate'].values[:5])): plt.text(x, y + 0.02, '{:.2%}'.format(y), ha='center') #图片加text plt.ylim([0, 1]) # 3. 处理缺失值 删除缺失量大于阈值0.8 orig_col = data.columns # 设计删除列的操作时可以发现删除了什么列 del_col = [] data = data.dropna(axis=1, how='any', thresh=data.shape[0] ","date":"2022-10-16T20:58:19.149Z","objectID":"f0a06d0f1b6e13c822d401503a17eed5_5","order":5,"summary":"alogy['missRate'].values)[:5], color=['red', 'steelblue', 'yellow']) plt.title('变量缺失率直方图') plt.xlabel('变量名') plt.ylabel('缺失率') plt.xticks(np.arange(5), list(miss_analogy['index'][:5])) # plt.xticks(rotation=90) for x, y in enumerate(list(miss_analogy['missRate'].values[:5])): plt.text(x, y + 0.02, '{:.2%}'.format(y), ha='center') #图片加text plt.ylim([0, 1]) # 3. 处理缺失值 删除缺失量大于阈值0.8 orig_col = data.columns # 设计删除列的操作时可以发现删除了什么列 del_col = [] data = data.dropna(axis=1, how='any', thresh=data.shape[0] ","tags":["Python"],"title":"数学建模-数据分析题","url":"https://keepjolly.com/archives/data-analysis/"},{"categories":["create"],"content":"* 0.8) # 删除列 ！！ 解除注释 # data = data.dropna(axis=0, how='any', thresh=data.shape[1]*0.8) # 删除行 data.reset_index(drop=True, inplace=True) after_col = data.columns del_col.append(list(set(orig_col).difference(set(after_col)))) # https://cloud.tencent.com/developer/article/1705131 print('删除缺失量大于阈值0.8的变量：', del_col) plt.savefig('picture/nullV.jpg') plt.show() return data def interpolateData(data): # 填充缺失值 fig, axes = plt.subplots(figsize=(8, 4), sharex='all') axes.plot(data['积雪深度(mm)'], label='Origina","date":"2022-10-16T20:58:19.149Z","objectID":"f0a06d0f1b6e13c822d401503a17eed5_6","order":6,"summary":"* 0.8) # 删除列 ！！ 解除注释 # data = data.dropna(axis=0, how='any', thresh=data.shape[1]*0.8) # 删除行 data.reset_index(drop=True, inplace=True) after_col = data.columns del_col.append(list(set(orig_col).difference(set(after_col)))) # https://cloud.tencent.com/developer/article/1705131 print('删除缺失量大于阈值0.8的变量：', del_col) plt.savefig('picture/nullV.jpg') plt.show() return data def interpolateData(data): # 填充缺失值 fig, axes = plt.subplots(figsize=(8, 4), sharex='all') axes.plot(data['积雪深度(mm)'], label='Origina","tags":["Python"],"title":"数学建模-数据分析题","url":"https://keepjolly.com/archives/data-analysis/"},{"categories":["create"],"content":"l Data', marker='*', markerfacecolor='blue') # 1 直接填充 \"\"\" 均值适用于定量数据 身高 年龄 mean() 中位数 正态分布 median() 众数适用于定性数据 性别 文化程度 data['S-ZORB.CAL_H2.PV'].mode()[0] method='pad/bfill' 取前/后数据填充 \"\"\" # data.fillna({'S-ZORB.CAL_H2.PV': data['S-ZORB.CAL_H2.PV'].mean()}, inplace=True) # 只修改一列 # data.fillna(data.mean(), inplace=True) # ！！ 选 直接填充 解除注释 # 2 插值法 \"\"\" ‘nearest’, ‘zero’, ‘slinear’, ‘quadratic’, ‘cubic’ 1.如果你的数据增长速率越来越快，可以选择 method='quadratic'二次插值。 2.如果数据集呈现出累计分布的样子，推荐选择 method='pchip'。 3.如果需要填补缺省值，以平滑绘图为目","date":"2022-10-16T20:58:19.149Z","objectID":"f0a06d0f1b6e13c822d401503a17eed5_7","order":7,"summary":"l Data', marker='*', markerfacecolor='blue') # 1 直接填充 \"\"\" 均值适用于定量数据 身高 年龄 mean() 中位数 正态分布 median() 众数适用于定性数据 性别 文化程度 data['S-ZORB.CAL_H2.PV'].mode()[0] method='pad/bfill' 取前/后数据填充 \"\"\" # data.fillna({'S-ZORB.CAL_H2.PV': data['S-ZORB.CAL_H2.PV'].mean()}, inplace=True) # 只修改一列 # data.fillna(data.mean(), inplace=True) # ！！ 选 直接填充 解除注释 # 2 插值法 \"\"\" ‘nearest’, ‘zero’, ‘slinear’, ‘quadratic’, ‘cubic’ 1.如果你的数据增长速率越来越快，可以选择 method='quadratic'二次插值。 2.如果数据集呈现出累计分布的样子，推荐选择 method='pchip'。 3.如果需要填补缺省值，以平滑绘图为目","tags":["Python"],"title":"数学建模-数据分析题","url":"https://keepjolly.com/archives/data-analysis/"},{"categories":["create"],"content":"标，推荐选择 method='akima'。 \"\"\" data.interpolate(method='quadratic', inplace=True) # ................！！ 解除注释 axes.plot(data['积雪深度(mm)'], 'r--', label='Filled Data', marker='h', markerfacecolor='red') axes.legend(['初始值', '拟合值'], loc=\"upper right\") plt.show() # ........................！！ 解除注释 return data def processZero(data): # 删除0值大于80%的列/行 Bijlsma 提出的 80%准则 zeros = [] for c in data: flat = data[c].to_numpy() cnt = np.where(flat, 0, True) if np.sum(cnt) \u003e 0.2 * data.shape[0]: # 获取0值过多的 列 zeros.append","date":"2022-10-16T20:58:19.149Z","objectID":"f0a06d0f1b6e13c822d401503a17eed5_8","order":8,"summary":"标，推荐选择 method='akima'。 \"\"\" data.interpolate(method='quadratic', inplace=True) # ................！！ 解除注释 axes.plot(data['积雪深度(mm)'], 'r--', label='Filled Data', marker='h', markerfacecolor='red') axes.legend(['初始值', '拟合值'], loc=\"upper right\") plt.show() # ........................！！ 解除注释 return data def processZero(data): # 删除0值大于80%的列/行 Bijlsma 提出的 80%准则 zeros = [] for c in data: flat = data[c].to_numpy() cnt = np.where(flat, 0, True) if np.sum(cnt) \u003e 0.2 * data.shape[0]: # 获取0值过多的 列 zeros.append","tags":["Python"],"title":"数学建模-数据分析题","url":"https://keepjolly.com/archives/data-analysis/"},{"categories":["create"],"content":"(c) print('zeros error({}): '.format(len(zeros)), zeros) error = data[zeros[0]][data[zeros[0]] == 0] data_c = data[zeros[0]][data[zeros[0]] != 0] fig, ax2 = plt.subplots(figsize=(15, 9)) plt.scatter(data_c.index, data_c.values, color='g', alpha=0.6, label='正常值') plt.scatter(error.index, error.values, color='r', alpha=0.8, label='0值') ax2.set_xlabel('下标') ax2.set_ylabel('值') ax2.legend() plt.show() data.drop(columns=zeros, inplace=True) plt.savefig('picture/zeroV.jpg') return data def process3sig","date":"2022-10-16T20:58:19.149Z","objectID":"f0a06d0f1b6e13c822d401503a17eed5_9","order":9,"summary":"(c) print('zeros error({}): '.format(len(zeros)), zeros) error = data[zeros[0]][data[zeros[0]] == 0] data_c = data[zeros[0]][data[zeros[0]] != 0] fig, ax2 = plt.subplots(figsize=(15, 9)) plt.scatter(data_c.index, data_c.values, color='g', alpha=0.6, label='正常值') plt.scatter(error.index, error.values, color='r', alpha=0.8, label='0值') ax2.set_xlabel('下标') ax2.set_ylabel('值') ax2.legend() plt.show() data.drop(columns=zeros, inplace=True) plt.savefig('picture/zeroV.jpg') return data def process3sig","tags":["Python"],"title":"数学建模-数据分析题","url":"https://keepjolly.com/archives/data-analysis/"},{"categories":["create"],"content":"ma(data): # 删除异常值 3sigma法 \"\"\" 需满足高斯分布，可假设为高斯分布强行用 1. 可以删除每列异常值大于阈值并且超过3sigma范围，对少于阈值但超过范围的进行赋值 没实现 2. 可以直接删除超过3sigma范围 \"\"\" sigma, sigma_cnt = [], [0] * data.shape[0] delrow_thres = 1 # 行异常值阈值 delcol_thres = 100 # 列异常值阈值 idx = [] sig = 0 for c in data: flat = data[c].to_numpy() try: mean = np.mean(flat) s = np.std(flat, ddof=1) except TypeError: continue flag = 0 for r in range(data.shape[0]): # 检查当前列的3sigma if abs(flat[r] - mean) \u003e s * 3: sigma_cnt[r] += 1 flag += 1 else: idx.append(r) if flag \u003e","date":"2022-10-16T20:58:19.149Z","objectID":"f0a06d0f1b6e13c822d401503a17eed5_10","order":10,"summary":"ma(data): # 删除异常值 3sigma法 \"\"\" 需满足高斯分布，可假设为高斯分布强行用 1. 可以删除每列异常值大于阈值并且超过3sigma范围，对少于阈值但超过范围的进行赋值 没实现 2. 可以直接删除超过3sigma范围 \"\"\" sigma, sigma_cnt = [], [0] * data.shape[0] delrow_thres = 1 # 行异常值阈值 delcol_thres = 100 # 列异常值阈值 idx = [] sig = 0 for c in data: flat = data[c].to_numpy() try: mean = np.mean(flat) s = np.std(flat, ddof=1) except TypeError: continue flag = 0 for r in range(data.shape[0]): # 检查当前列的3sigma if abs(flat[r] - mean) \u003e s * 3: sigma_cnt[r] += 1 flag += 1 else: idx.append(r) if flag \u003e","tags":["Python"],"title":"数学建模-数据分析题","url":"https://keepjolly.com/archives/data-analysis/"},{"categories":["create"],"content":" delrow_thres: # sig = 3 * s sigma.append(c) # print('del 3sigma({0}) column({1}): '.format(round(sig, 3), len(sigma)), sigma) # if len(sigma) \u003e 0: # draw_3sigma(data[sigma[0]]) # draw_3sigma(data['干重']) # data.drop(columns=sigma, inplace=True) # data.reset_index(drop=True) # 删除行 sigma_cntnp = np.array(sigma_cnt) where = np.where(sigma_cntnp \u003e 0) a = np.array(list(where)) a = a[0] # necessary？ print('del 3sigma row: ', len(a)) data.drop(index=a, inplace=True) data.reset_index(drop=True, inplace=","date":"2022-10-16T20:58:19.149Z","objectID":"f0a06d0f1b6e13c822d401503a17eed5_11","order":11,"summary":" delrow_thres: # sig = 3 * s sigma.append(c) # print('del 3sigma({0}) column({1}): '.format(round(sig, 3), len(sigma)), sigma) # if len(sigma) \u003e 0: # draw_3sigma(data[sigma[0]]) # draw_3sigma(data['干重']) # data.drop(columns=sigma, inplace=True) # data.reset_index(drop=True) # 删除行 sigma_cntnp = np.array(sigma_cnt) where = np.where(sigma_cntnp \u003e 0) a = np.array(list(where)) a = a[0] # necessary？ print('del 3sigma row: ', len(a)) data.drop(index=a, inplace=True) data.reset_index(drop=True, inplace=","tags":["Python"],"title":"数学建模-数据分析题","url":"https://keepjolly.com/archives/data-analysis/"},{"categories":["create"],"content":"True) return data, idx def processMaxMin(data): scope = pd.read_excel('附件四：354个操作变量信息.xlsx', usecols=[1, 3]) # 注意修改 scope = scope.to_numpy() scope = {n[0]: n[1].split('-') for n in scope} for k, v in scope.items(): mm = [] flag = 1 for value in v: if value == '' or value == '（' or value == '(': flag = 0 continue try: mm.append(float(value) if flag else -float(value)) except ValueError: value = re.findall(r'\\d+\\.?\\d*', value)[0] # 找浮点数 mm.append(float(value) if flag else -float(value)) flag = 1 i","date":"2022-10-16T20:58:19.149Z","objectID":"f0a06d0f1b6e13c822d401503a17eed5_12","order":12,"summary":"True) return data, idx def processMaxMin(data): scope = pd.read_excel('附件四：354个操作变量信息.xlsx', usecols=[1, 3]) # 注意修改 scope = scope.to_numpy() scope = {n[0]: n[1].split('-') for n in scope} for k, v in scope.items(): mm = [] flag = 1 for value in v: if value == '' or value == '（' or value == '(': flag = 0 continue try: mm.append(float(value) if flag else -float(value)) except ValueError: value = re.findall(r'\\d+\\.?\\d*', value)[0] # 找浮点数 mm.append(float(value) if flag else -float(value)) flag = 1 i","tags":["Python"],"title":"数学建模-数据分析题","url":"https://keepjolly.com/archives/data-analysis/"},{"categories":["create"],"content":"f mm[0] \u003e mm[1]: print('数据error') scope[k] = mm for col in scope.keys(): for i in data[col].index: if scope[col][0] \u003e data[col][i] or data[col][i] \u003e scope[col][1]: # 删除最大最小不对的 行/样本 print('minmax error', i, data[col][i], scope[col], col) data.drop(index=i, inplace=True) data.reset_index(drop=True, inplace=True) return data if __name__ == '__main__': # 1. 读取数据 # file_name = r'C:\\Users\\Desktop\\2022年E题\\数据集\\监测点数据\\附件15：草原轮牧放牧样地群落结构监测数据集（2016年6月-2020年9' \\ # r'月）。/内蒙古自治区锡林郭勒盟典型草原轮牧放牧样地群落结构监测数据集（201.xlsx","date":"2022-10-16T20:58:19.149Z","objectID":"f0a06d0f1b6e13c822d401503a17eed5_13","order":13,"summary":"f mm[0] \u003e mm[1]: print('数据error') scope[k] = mm for col in scope.keys(): for i in data[col].index: if scope[col][0] \u003e data[col][i] or data[col][i] \u003e scope[col][1]: # 删除最大最小不对的 行/样本 print('minmax error', i, data[col][i], scope[col], col) data.drop(index=i, inplace=True) data.reset_index(drop=True, inplace=True) return data if __name__ == '__main__': # 1. 读取数据 # file_name = r'C:\\Users\\Desktop\\2022年E题\\数据集\\监测点数据\\附件15：草原轮牧放牧样地群落结构监测数据集（2016年6月-2020年9' \\ # r'月）。/内蒙古自治区锡林郭勒盟典型草原轮牧放牧样地群落结构监测数据集（201.xlsx","tags":["Python"],"title":"数学建模-数据分析题","url":"https://keepjolly.com/archives/data-analysis/"},{"categories":["create"],"content":" ' file_name = 'data/result.xlsx' sheet_name = 'Sheet1' # 注意修改 table = pd.read_excel(file_name, sheet_name, header=[0]) # 如果有多个列名 方便起见只取一个 # 2. 划分数据 if need # 注意索引还是原数据的索引 https://stackoverflow.com/questions/71679582/0-is-not-in-range-in-pandas sample285 = table[1:41] sample285.reset_index(drop=True, inplace=True) sample285 = sample285.copy() # 防止SettingWithCopyWarning sample310 = table[42:] sample310.reset_index(drop=True, inplace=True) data = table.iloc[:, 2:] # 排除年月 # 3. 查看数据情况 # describeData","date":"2022-10-16T20:58:19.149Z","objectID":"f0a06d0f1b6e13c822d401503a17eed5_14","order":14,"summary":" ' file_name = 'data/result.xlsx' sheet_name = 'Sheet1' # 注意修改 table = pd.read_excel(file_name, sheet_name, header=[0]) # 如果有多个列名 方便起见只取一个 # 2. 划分数据 if need # 注意索引还是原数据的索引 https://stackoverflow.com/questions/71679582/0-is-not-in-range-in-pandas sample285 = table[1:41] sample285.reset_index(drop=True, inplace=True) sample285 = sample285.copy() # 防止SettingWithCopyWarning sample310 = table[42:] sample310.reset_index(drop=True, inplace=True) data = table.iloc[:, 2:] # 排除年月 # 3. 查看数据情况 # describeData","tags":["Python"],"title":"数学建模-数据分析题","url":"https://keepjolly.com/archives/data-analysis/"},{"categories":["create"],"content":"(data) # 4. 处理缺失值 data = processNull(data) data = processZero(data) data, idx = process3sigma(data) # table = table.iloc[idx, 0] # data = processMaxMin(data) data = interpolateData(data) # print('删除前变量个数', len(table.columns)) # data.index = table.iloc[:, 0] # 将string列重新放回 # print('删除后变量个数', len(data.columns)) data.to_excel('Preprocess/pre_data.xlsx') 特征选择 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 5","date":"2022-10-16T20:58:19.149Z","objectID":"f0a06d0f1b6e13c822d401503a17eed5_15","order":15,"summary":"(data) # 4. 处理缺失值 data = processNull(data) data = processZero(data) data, idx = process3sigma(data) # table = table.iloc[idx, 0] # data = processMaxMin(data) data = interpolateData(data) # print('删除前变量个数', len(table.columns)) # data.index = table.iloc[:, 0] # 将string列重新放回 # print('删除后变量个数', len(data.columns)) data.to_excel('Preprocess/pre_data.xlsx') 特征选择 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 5","tags":["Python"],"title":"数学建模-数据分析题","url":"https://keepjolly.com/archives/data-analysis/"},{"categories":["create"],"content":"1 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 18","date":"2022-10-16T20:58:19.149Z","objectID":"f0a06d0f1b6e13c822d401503a17eed5_16","order":16,"summary":"1 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 18","tags":["Python"],"title":"数学建模-数据分析题","url":"https://keepjolly.com/archives/data-analysis/"},{"categories":["create"],"content":"8 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 31","date":"2022-10-16T20:58:19.149Z","objectID":"f0a06d0f1b6e13c822d401503a17eed5_17","order":17,"summary":"8 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 31","tags":["Python"],"title":"数学建模-数据分析题","url":"https://keepjolly.com/archives/data-analysis/"},{"categories":["create"],"content":"3 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 43","date":"2022-10-16T20:58:19.149Z","objectID":"f0a06d0f1b6e13c822d401503a17eed5_18","order":18,"summary":"3 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 43","tags":["Python"],"title":"数学建模-数据分析题","url":"https://keepjolly.com/archives/data-analysis/"},{"categories":["create"],"content":"8 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 def low_var_filter(data, names): # 低方差滤波 # 人工版 # v","date":"2022-10-16T20:58:19.149Z","objectID":"f0a06d0f1b6e13c822d401503a17eed5_19","order":19,"summary":"8 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 def low_var_filter(data, names): # 低方差滤波 # 人工版 # v","tags":["Python"],"title":"数学建模-数据分析题","url":"https://keepjolly.com/archives/data-analysis/"},{"categories":["create"],"content":"ar = data.var() # col = var.index # variable = [] # for i in range(len(var)): # if var[col[i]] \u0026lt; 1: # variable.append(col[[i]].format()[0]) # print(list(variable), var[variable[0]]) # data.drop(columns=variable, axis=1, inplace=True) data = data[:, 1:] # 排除time列 data = pd.DataFrame(data, columns=names[1:]) # 智能版 orig_col = data.columns selector = VarianceThreshold(threshold=1) # 阈值为\u0026lt;1 selector.fit(data) after_col = np.array(data.columns.format())[selector.get_support()] # 获得删除后列 del_col = ","date":"2022-10-16T20:58:19.149Z","objectID":"f0a06d0f1b6e13c822d401503a17eed5_20","order":20,"summary":"ar = data.var() # col = var.index # variable = [] # for i in range(len(var)): # if var[col[i]] \u0026lt; 1: # variable.append(col[[i]].format()[0]) # print(list(variable), var[variable[0]]) # data.drop(columns=variable, axis=1, inplace=True) data = data[:, 1:] # 排除time列 data = pd.DataFrame(data, columns=names[1:]) # 智能版 orig_col = data.columns selector = VarianceThreshold(threshold=1) # 阈值为\u0026lt;1 selector.fit(data) after_col = np.array(data.columns.format())[selector.get_support()] # 获得删除后列 del_col = ","tags":["Python"],"title":"数学建模-数据分析题","url":"https://keepjolly.com/archives/data-analysis/"},{"categories":["create"],"content":"list(set(orig_col).difference(set(after_col))) # 获得删除列 data = selector.fit_transform(data) print('低方差滤波删除列：', del_col) print('低方差删除后的矩阵shape：', data.shape) # data = pd.DataFrame(data, columns=after_col) # print(data[:5]) return data, after_col # data.to_excel('new_data.xlsx') def MICSelect(data, target, feature_name, k): def mic(x, y): m = MINE() m.compute_score(x, y) return m.mic(), 0.5 # n = data.shape[1] # 两两比较 https://zhuanlan.zhihu.com/p/53092905 # result = np.zeros([n, n]) # mine = MINE(al","date":"2022-10-16T20:58:19.149Z","objectID":"f0a06d0f1b6e13c822d401503a17eed5_21","order":21,"summary":"list(set(orig_col).difference(set(after_col))) # 获得删除列 data = selector.fit_transform(data) print('低方差滤波删除列：', del_col) print('低方差删除后的矩阵shape：', data.shape) # data = pd.DataFrame(data, columns=after_col) # print(data[:5]) return data, after_col # data.to_excel('new_data.xlsx') def MICSelect(data, target, feature_name, k): def mic(x, y): m = MINE() m.compute_score(x, y) return m.mic(), 0.5 # n = data.shape[1] # 两两比较 https://zhuanlan.zhihu.com/p/53092905 # result = np.zeros([n, n]) # mine = MINE(al","tags":["Python"],"title":"数学建模-数据分析题","url":"https://keepjolly.com/archives/data-analysis/"},{"categories":["other"],"content":"原文网址 、 英文版磁链基本都是高清或4k版本，如有更清晰的版本，务必留言、 如需要磁力链可以鼠标移到链接上，右键复制链接地址1978老版本 注: 本指南对应从2003年开始上映的新版太空堡垒卡拉狄加系列， 为系列的重制版，有始有终，不需要从1978年原版开始看起。The Miniseries (迷你剧) Battlestar.Galactica.Miniseries.Part1 Battlestar.Galactica.Miniseries.Part2 Season 1 (第一季) Battlestar Galactica Season 1Season 2 (第二季) Battlestar Galactica Season 2 其中在第17集后看Battlestar Galactica Razor(Extended Version)这部电影的最后10分钟有几句台词是为第四季做的准备，如果在这里听到了那几句台词, 虽然算不上剧透，但是会影响这之后的感受，特别是第三季。 方法： 在那几句台词出现之前关闭声音和字幕，你只会看见画面上的人物在说话，但是你不会知道他们说的是什么。这几句台词过了","date":"2022-08-25T14:00:18.473Z","objectID":"5e7163b88459e2b78fbc6cb70eb1e4a5_0","order":0,"summary":"原文网址 、 英文版磁链基本都是高清或4k版本，如有更清晰的版本，务必留言、 如需要磁力链可以鼠标移到链接上，右键复制链接地址1978老版本 注: 本指南对应从2003年开始上映的新版太空堡垒卡拉狄加系列， 为系列的重制版，有始有终，不需要从1978年原版开始看起。The Miniseries (迷你剧) Battlestar.Galactica.Miniseries.Part1 Battlestar.Galactica.Miniseries.Part2 Season 1 (第一季) Battlestar Galactica Season 1Season 2 (第二季) Battlestar Galactica Season 2 其中在第17集后看Battlestar Galactica Razor(Extended Version)这部电影的最后10分钟有几句台词是为第四季做的准备，如果在这里听到了那几句台词, 虽然算不上剧透，但是会影响这之后的感受，特别是第三季。 方法： 在那几句台词出现之前关闭声音和字幕，你只会看见画面上的人物在说话，但是你不会知道他们说的是什么。这几句台词过了","tags":["Movie"],"title":"《太空堡垒卡拉狄加》终极无剧透观影顺序指南+下载链接","url":"https://keepjolly.com/archives/the-ultimate-battlestar-galactica-spoiler-free-viewing-order/"},{"categories":["other"],"content":"之后再把声音和字幕打开即可。 这样你会完整的享受完整个电影的故事，直到看完第三季后再回来听这几句台词即可，这几句台词发生在最后的10分钟里面（不算制作人员名单），所以你可以安心放心的看前90分钟。总共只有两处需要关闭声音和字幕，会在不剧透的前提下给予提示。 第一处：当Hybrid用手抓住Shaw的时候立即关闭声音和字幕（Hybrid可能翻译为混合体, Shaw可能翻译为肖），当Hybrid放手后即可打开声音和字幕。 第二处: 在第一处后不久, 当Red One开始与总部联系的时候(Red One可能翻译为红一号), 你会听见Red One说\"Actual, This is Red One, Come in\", 在这里即可关闭声音和字幕. 在红一号再次出现在画面上时即可打开声音和字幕. (其实在这之前就可以了, 不过实在是没有其他的线索可提供)可选项：Battlestar Galactica Razor Flashbacks(利刃 闪回, 网络剧, 共7集, 7集总时长18分钟左右) 之所以是可选项是因为这部所谓网络剧其实就是Razor电影的删减片段，有1到7的合集版。其中4个部分已经添","date":"2022-08-25T14:00:18.473Z","objectID":"5e7163b88459e2b78fbc6cb70eb1e4a5_1","order":1,"summary":"之后再把声音和字幕打开即可。 这样你会完整的享受完整个电影的故事，直到看完第三季后再回来听这几句台词即可，这几句台词发生在最后的10分钟里面（不算制作人员名单），所以你可以安心放心的看前90分钟。总共只有两处需要关闭声音和字幕，会在不剧透的前提下给予提示。 第一处：当Hybrid用手抓住Shaw的时候立即关闭声音和字幕（Hybrid可能翻译为混合体, Shaw可能翻译为肖），当Hybrid放手后即可打开声音和字幕。 第二处: 在第一处后不久, 当Red One开始与总部联系的时候(Red One可能翻译为红一号), 你会听见Red One说\"Actual, This is Red One, Come in\", 在这里即可关闭声音和字幕. 在红一号再次出现在画面上时即可打开声音和字幕. (其实在这之前就可以了, 不过实在是没有其他的线索可提供)可选项：Battlestar Galactica Razor Flashbacks(利刃 闪回, 网络剧, 共7集, 7集总时长18分钟左右) 之所以是可选项是因为这部所谓网络剧其实就是Razor电影的删减片段，有1到7的合集版。其中4个部分已经添","tags":["Movie"],"title":"《太空堡垒卡拉狄加》终极无剧透观影顺序指南+下载链接","url":"https://keepjolly.com/archives/the-ultimate-battlestar-galactica-spoiler-free-viewing-order/"},{"categories":["other"],"content":"加到加长版中，剩下的3个未加入电影的片段为1、2、7，这7集连起来是一个完整的故事，有兴趣的话可以完整看一遍。然后继续看完第二季。The Resistance (抵抗, 网络剧, 共10集, 10集总时长25分钟左右) Battlestar Galactica: The Resistance or youtobe 这部网络剧的作用是连接第二季和第三季，有1到10的合集版，十分推荐。Season 3 (第三季) Battlestar Galactica Season 3 上一季的Razor（静音部分） 是的，你现在可以去看那最后十分钟里面静音掉的台词了。这里也是本来这部电影上映的时期，如果可以的话可以看看这十分钟之前的一些内容，重新听听Hybrid之前说的那些话，你会十分惊讶你现在居然能够明白这些话的意思了。Season 4 (第四季) Battlestar Galactica Season 4He That Believeth In Me Six of One The Ties That Bind Escape Velocity The Road Less Traveled Faith","date":"2022-08-25T14:00:18.473Z","objectID":"5e7163b88459e2b78fbc6cb70eb1e4a5_2","order":2,"summary":"加到加长版中，剩下的3个未加入电影的片段为1、2、7，这7集连起来是一个完整的故事，有兴趣的话可以完整看一遍。然后继续看完第二季。The Resistance (抵抗, 网络剧, 共10集, 10集总时长25分钟左右) Battlestar Galactica: The Resistance or youtobe 这部网络剧的作用是连接第二季和第三季，有1到10的合集版，十分推荐。Season 3 (第三季) Battlestar Galactica Season 3 上一季的Razor（静音部分） 是的，你现在可以去看那最后十分钟里面静音掉的台词了。这里也是本来这部电影上映的时期，如果可以的话可以看看这十分钟之前的一些内容，重新听听Hybrid之前说的那些话，你会十分惊讶你现在居然能够明白这些话的意思了。Season 4 (第四季) Battlestar Galactica Season 4He That Believeth In Me Six of One The Ties That Bind Escape Velocity The Road Less Traveled Faith","tags":["Movie"],"title":"《太空堡垒卡拉狄加》终极无剧透观影顺序指南+下载链接","url":"https://keepjolly.com/archives/the-ultimate-battlestar-galactica-spoiler-free-viewing-order/"},{"categories":["other"],"content":" Guess What's Coming to Dinner Sine Qua Non The Hub Revelations Sometimes a Great Notion 11b. The Face of the Enemy、在线 这部网络剧十分推荐， 为之后发生的事情做了十分详细的铺垫，有1-10集的合集版。 A Disquite Follows My Soul (Extended Version) 53分钟左右加长版 The Oath Blood on the Scales No Exit 15b. The Plan (计划, 电影)\t这部电影本来是在全剧终后上映的，不过放在这里看效果最好。它将前两季用Cylon人的视角演绎了一遍，解答了很多问题(比如那个计划到底是什么!)，让你安心的通向结局。 16-19. 一直看到最后一集即可BSG之后的衍生作品 Caprica (全一季共18集) 这部剧的时间线是在BSG的前58年，很多人把这个剧当做前传放在BSG之前看，不过个人不推荐这么做：并不是这部剧不好，其原因是Caprica跟BSG太不一样了，导致很多人对BSG的内容产生了误解","date":"2022-08-25T14:00:18.473Z","objectID":"5e7163b88459e2b78fbc6cb70eb1e4a5_3","order":3,"summary":" Guess What's Coming to Dinner Sine Qua Non The Hub Revelations Sometimes a Great Notion 11b. The Face of the Enemy、在线 这部网络剧十分推荐， 为之后发生的事情做了十分详细的铺垫，有1-10集的合集版。 A Disquite Follows My Soul (Extended Version) 53分钟左右加长版 The Oath Blood on the Scales No Exit 15b. The Plan (计划, 电影)\t这部电影本来是在全剧终后上映的，不过放在这里看效果最好。它将前两季用Cylon人的视角演绎了一遍，解答了很多问题(比如那个计划到底是什么!)，让你安心的通向结局。 16-19. 一直看到最后一集即可BSG之后的衍生作品 Caprica (全一季共18集) 这部剧的时间线是在BSG的前58年，很多人把这个剧当做前传放在BSG之前看，不过个人不推荐这么做：并不是这部剧不好，其原因是Caprica跟BSG太不一样了，导致很多人对BSG的内容产生了误解","tags":["Movie"],"title":"《太空堡垒卡拉狄加》终极无剧透观影顺序指南+下载链接","url":"https://keepjolly.com/archives/the-ultimate-battlestar-galactica-spoiler-free-viewing-order/"},{"categories":["learn"],"content":"DIR难点： 现实中，数据不平衡随处可见，通常是带长尾的偏态分布，其中某些标签的值很少。解决不平衡的分类任务的方法具有局限性，它们只适合分类任务，主要关注于类别的不平衡，直接用于连续数据会产生歧义以及忽略了连续数据中每个数据周围的信息。解决不平衡的回归任务没有很好的探索过，没有考虑目标间的信息，同时对于极高维度的数据来说，线性插值不会产生有意义的样本解决方法： 提出了LDS由“Figure 2.” [Yang 等。, 2021, p. 3] 可以看出分类和连续的区别原因是所有不平衡学习方法是通过改善经验标签密度分布的不平衡来进行的，没有学习到临近标签的数据样本间的依赖性因此提出LDS，它提倡使用核密度估计来学习连续标签的不平衡区域由“Figure 3.” [Yang 等。, 2021, p. 3] 可以看出连续问题可能转化成分类问题，因此可以使用不平衡的分类方法，如重加权、重采样提出了FDS作者认为有目标空间的连续性，应该也有特征空间的连续性首先从“Figure 4.” [Yang 等。, 2021, p. 4] 可以看出在样本很多的区域，它们的均值和方差的余弦相似度相似且高，但是在少","date":"2022-08-17T21:59:05.186Z","objectID":"b13b31269045f5b78f465ef4f37f8fad_0","order":0,"summary":"DIR难点： 现实中，数据不平衡随处可见，通常是带长尾的偏态分布，其中某些标签的值很少。解决不平衡的分类任务的方法具有局限性，它们只适合分类任务，主要关注于类别的不平衡，直接用于连续数据会产生歧义以及忽略了连续数据中每个数据周围的信息。解决不平衡的回归任务没有很好的探索过，没有考虑目标间的信息，同时对于极高维度的数据来说，线性插值不会产生有意义的样本解决方法： 提出了LDS由“Figure 2.” [Yang 等。, 2021, p. 3] 可以看出分类和连续的区别原因是所有不平衡学习方法是通过改善经验标签密度分布的不平衡来进行的，没有学习到临近标签的数据样本间的依赖性因此提出LDS，它提倡使用核密度估计来学习连续标签的不平衡区域由“Figure 3.” [Yang 等。, 2021, p. 3] 可以看出连续问题可能转化成分类问题，因此可以使用不平衡的分类方法，如重加权、重采样提出了FDS作者认为有目标空间的连续性，应该也有特征空间的连续性首先从“Figure 4.” [Yang 等。, 2021, p. 4] 可以看出在样本很多的区域，它们的均值和方差的余弦相似度相似且高，但是在少","tags":["ComputerVision"],"title":"Delving into Deep Imbalanced Regression笔记","url":"https://keepjolly.com/archives/dir-note/"},{"categories":["learn"],"content":"样本区域也表现得很高（因为数据不平衡，它们从数据量大的区域学习它们学习到的值）因此提出FDS，它通过对称核来平衡目标的均值和协方差，进行特征空间分布平滑它可以整合到任何神经网络和改善标签不平衡的工作中来提升性能。整理出五个DIR基准数据集。实验及结果 应用不平衡回归任务的方法在高维数据上时性能不好，vanilla模型在manyshot区域易过拟合添加了LDS+FDS取得最好结果，并且提高了all-, many-, medium-, few-shot区域的性能LDS和FDS在有数据区域和无数据区域都取得收益，具体来说，内插和外插都有提升，内插最多。“Figure 8” [Yang 等。, 2021, p. 8] 表明了FDS可以很好的校准统计数据，使得尽在其周围具有高相似度，并随着目标值变大，相似度下降。此外运行统计数据和平滑统计数据的L1距离随训练进行而减少。Gaussian核带来最优结果LDS和FDS对不同的损失函数具有鲁棒性核大小最好为5，标准差最好为2，且都不同的超参数大小都有鲁棒性LDS和FDS对不同偏态标签密度的鲁棒性好另外发现了不平衡的分类方法在回归上应用不好的原因：首先，","date":"2022-08-17T21:59:05.186Z","objectID":"b13b31269045f5b78f465ef4f37f8fad_1","order":1,"summary":"样本区域也表现得很高（因为数据不平衡，它们从数据量大的区域学习它们学习到的值）因此提出FDS，它通过对称核来平衡目标的均值和协方差，进行特征空间分布平滑它可以整合到任何神经网络和改善标签不平衡的工作中来提升性能。整理出五个DIR基准数据集。实验及结果 应用不平衡回归任务的方法在高维数据上时性能不好，vanilla模型在manyshot区域易过拟合添加了LDS+FDS取得最好结果，并且提高了all-, many-, medium-, few-shot区域的性能LDS和FDS在有数据区域和无数据区域都取得收益，具体来说，内插和外插都有提升，内插最多。“Figure 8” [Yang 等。, 2021, p. 8] 表明了FDS可以很好的校准统计数据，使得尽在其周围具有高相似度，并随着目标值变大，相似度下降。此外运行统计数据和平滑统计数据的L1距离随训练进行而减少。Gaussian核带来最优结果LDS和FDS对不同的损失函数具有鲁棒性核大小最好为5，标准差最好为2，且都不同的超参数大小都有鲁棒性LDS和FDS对不同偏态标签密度的鲁棒性好另外发现了不平衡的分类方法在回归上应用不好的原因：首先，","tags":["ComputerVision"],"title":"Delving into Deep Imbalanced Regression笔记","url":"https://keepjolly.com/archives/dir-note/"},{"categories":["learn"],"content":"忽略了连续目标周围数据的相似性；其次，分类无法在连续空间内进行外插和内插，因此无法处理缺失数据其他博客介绍https://blog.csdn.net/qq_43310834/article/details/119969513https://blog.csdn.net/qq_43349542/article/details/120370049","date":"2022-08-17T21:59:05.186Z","objectID":"b13b31269045f5b78f465ef4f37f8fad_2","order":2,"summary":"忽略了连续目标周围数据的相似性；其次，分类无法在连续空间内进行外插和内插，因此无法处理缺失数据其他博客介绍https://blog.csdn.net/qq_43310834/article/details/119969513https://blog.csdn.net/qq_43349542/article/details/120370049","tags":["ComputerVision"],"title":"Delving into Deep Imbalanced Regression笔记","url":"https://keepjolly.com/archives/dir-note/"},{"categories":["learn"],"content":"非对照翻译，有所简略。翻译不对，尽情谅解，可留言 因为halo渲染的原因，有些地方可能不对，请留言 作者解释 and paper自己做的笔记 Abstract Real-world data often exhibit imbalanced distributions, where certain target values have significantly fewer observations. Existing techniques for dealing with imbalanced data focus on targets with categorical indices, i.e., different classes. However, many tasks involve continuous targets, where hard boundaries between classes do not exist. We define Deep Imbalanced Regression (DIR) as learning from such imbalanced ","date":"2022-08-16T20:19:04.481Z","objectID":"6007a2eeaa7d43fe067867c19f304143_0","order":0,"summary":"非对照翻译，有所简略。翻译不对，尽情谅解，可留言 因为halo渲染的原因，有些地方可能不对，请留言 作者解释 and paper自己做的笔记 Abstract Real-world data often exhibit imbalanced distributions, where certain target values have significantly fewer observations. Existing techniques for dealing with imbalanced data focus on targets with categorical indices, i.e., different classes. However, many tasks involve continuous targets, where hard boundaries between classes do not exist. We define Deep Imbalanced Regression (DIR) as learning from such imbalanced ","tags":["ComputerVision"],"title":"Delving into Deep Imbalanced Regression翻译","url":"https://keepjolly.com/archives/delving-into-dir-translation/"},{"categories":["learn"],"content":"data with continuous targets, dealing with potential missing data for certain target values, and generalizing to the entire target range. Motivated by the intrinsic difference between categorical and continuous label space, we propose distribution smoothing for both labels and features, which explicitly acknowledges the effects of nearby targets, and calibrates both label and learned feature distributions. We curate and benchmark large-scale DIR datasets from common real-world tasks in computer ","date":"2022-08-16T20:19:04.481Z","objectID":"6007a2eeaa7d43fe067867c19f304143_1","order":1,"summary":"data with continuous targets, dealing with potential missing data for certain target values, and generalizing to the entire target range. Motivated by the intrinsic difference between categorical and continuous label space, we propose distribution smoothing for both labels and features, which explicitly acknowledges the effects of nearby targets, and calibrates both label and learned feature distributions. We curate and benchmark large-scale DIR datasets from common real-world tasks in computer ","tags":["ComputerVision"],"title":"Delving into Deep Imbalanced Regression翻译","url":"https://keepjolly.com/archives/delving-into-dir-translation/"},{"categories":["learn"],"content":"vision, natural language processing, and healthcare domains. Extensive experiments verify the superior performance of our strategies. Our work fills the gap in benchmarks and techniques for practical imbalanced regression problems. Code and data are available at: https://github.com/YyzHarry/imbalanced-regression.现实世界的数据往往是不平衡分布，其中某些target值的观测数据很少。处理不平衡数据的现存方法都侧重于具有分类索引的target（已经标好数据的数据集？数据都标出了类别），如不同的类别。然而，很多任务涉及到连续目标，其中类之间不存在清晰边界。我们称深度不平衡回归（DIR）为从此类含连续目标的不平衡数据中学习，处理某些target值的潜在缺失值，并泛化到整个target范","date":"2022-08-16T20:19:04.481Z","objectID":"6007a2eeaa7d43fe067867c19f304143_2","order":2,"summary":"vision, natural language processing, and healthcare domains. Extensive experiments verify the superior performance of our strategies. Our work fills the gap in benchmarks and techniques for practical imbalanced regression problems. Code and data are available at: https://github.com/YyzHarry/imbalanced-regression.现实世界的数据往往是不平衡分布，其中某些target值的观测数据很少。处理不平衡数据的现存方法都侧重于具有分类索引的target（已经标好数据的数据集？数据都标出了类别），如不同的类别。然而，很多任务涉及到连续目标，其中类之间不存在清晰边界。我们称深度不平衡回归（DIR）为从此类含连续目标的不平衡数据中学习，处理某些target值的潜在缺失值，并泛化到整个target范","tags":["ComputerVision"],"title":"Delving into Deep Imbalanced Regression翻译","url":"https://keepjolly.com/archives/delving-into-dir-translation/"},{"categories":["learn"],"content":"围。受分类和连续标签空间之间固有差异的激发，我们建议对标签和特征的进行平滑分布，这承认了临近目标的影响，并校准标签和学习到的特征分布。我们从计算机视觉、自然语言处理和医疗领域的常见现实世界任务中评估该大型 DIR 数据集。大量实验验证了我们策略的卓越性能。我们的工作填补了实际中的不平衡回归问题的基准数据集和技术方面的空白。Introduction Data imbalance is ubiquitous and inherent in the real world. Rather than preserving an ideal uniform distribution over each category, the data often exhibit skewed distributions with a long tail (Buda et al., 2018; Liu et al., 2019), where certain target values have significantly fewer observations. This phenomenon poses gr","date":"2022-08-16T20:19:04.481Z","objectID":"6007a2eeaa7d43fe067867c19f304143_3","order":3,"summary":"围。受分类和连续标签空间之间固有差异的激发，我们建议对标签和特征的进行平滑分布，这承认了临近目标的影响，并校准标签和学习到的特征分布。我们从计算机视觉、自然语言处理和医疗领域的常见现实世界任务中评估该大型 DIR 数据集。大量实验验证了我们策略的卓越性能。我们的工作填补了实际中的不平衡回归问题的基准数据集和技术方面的空白。Introduction Data imbalance is ubiquitous and inherent in the real world. Rather than preserving an ideal uniform distribution over each category, the data often exhibit skewed distributions with a long tail (Buda et al., 2018; Liu et al., 2019), where certain target values have significantly fewer observations. This phenomenon poses gr","tags":["ComputerVision"],"title":"Delving into Deep Imbalanced Regression翻译","url":"https://keepjolly.com/archives/delving-into-dir-translation/"},{"categories":["learn"],"content":"eat challenges for deep recognition models, and has motivated many prior techniques for addressing data imbalance (Cao et al., 2019; Cui et al., 2019; Huang et al., 2019; Liu et al., 2019; Tang et al., 2020).在现实中，数据的不平衡是常见且固有的。与在每个类别上保持理想的均匀分布不同，数据经常表现出带有长尾的偏态分布，其中某些目标值的观测值十分少。该现象对深度识别模型提出了巨大的挑战，并激发许多现有技术去处理数据不平衡。Existing solutions for learning from imbalanced data, however, focus on targets with categorical indices, i.e., the targets are different classes. However, many real-world tasks involve","date":"2022-08-16T20:19:04.481Z","objectID":"6007a2eeaa7d43fe067867c19f304143_4","order":4,"summary":"eat challenges for deep recognition models, and has motivated many prior techniques for addressing data imbalance (Cao et al., 2019; Cui et al., 2019; Huang et al., 2019; Liu et al., 2019; Tang et al., 2020).在现实中，数据的不平衡是常见且固有的。与在每个类别上保持理想的均匀分布不同，数据经常表现出带有长尾的偏态分布，其中某些目标值的观测值十分少。该现象对深度识别模型提出了巨大的挑战，并激发许多现有技术去处理数据不平衡。Existing solutions for learning from imbalanced data, however, focus on targets with categorical indices, i.e., the targets are different classes. However, many real-world tasks involve","tags":["ComputerVision"],"title":"Delving into Deep Imbalanced Regression翻译","url":"https://keepjolly.com/archives/delving-into-dir-translation/"},{"categories":["learn"],"content":" continuous and even infinite target values. For example, in vision applications, one needs to infer the age of different people based on their visual appearances, where age is a continuous target and can be highly imbalanced. Treating different ages as distinct classes is unlikely to yield the best results because it does not take advantage of the similarity between people with nearby ages. Similar issues happen in medical applications since many health metrics including heart rate, blood press","date":"2022-08-16T20:19:04.481Z","objectID":"6007a2eeaa7d43fe067867c19f304143_5","order":5,"summary":" continuous and even infinite target values. For example, in vision applications, one needs to infer the age of different people based on their visual appearances, where age is a continuous target and can be highly imbalanced. Treating different ages as distinct classes is unlikely to yield the best results because it does not take advantage of the similarity between people with nearby ages. Similar issues happen in medical applications since many health metrics including heart rate, blood press","tags":["ComputerVision"],"title":"Delving into Deep Imbalanced Regression翻译","url":"https://keepjolly.com/archives/delving-into-dir-translation/"},{"categories":["learn"],"content":"ure, and oxygen saturation, are continuous and often have skewed distributions across patient populations.然而，现有从不平衡数据中学习的方案侧重于带分类索引的目标，如目标是不同的类别（有多个目标还是目标有多个label值？应该是每个目标都标出了独立类别）。但，许多现实任务涉及连续且无限的目标值。如，在视觉应用中，需要根据他们的外貌来推断他们的年龄，其中年龄是连续值并且可能高度不平衡。把不同年龄视为独立类别不太可能产生最佳结果，因为它没有利用年龄相近的人的相似性。类似的问题也发生在医疗应用中，因为包括心率、血压和血氧饱和度在内的许多健康指标是连续的，并且在患者群体中通常是偏态分布。Figure 1. Deep Imbalanced Regression (DIR) aims to learn from imbalanced data with continuous targets, tackle potential missing data for certain regions, ","date":"2022-08-16T20:19:04.481Z","objectID":"6007a2eeaa7d43fe067867c19f304143_6","order":6,"summary":"ure, and oxygen saturation, are continuous and often have skewed distributions across patient populations.然而，现有从不平衡数据中学习的方案侧重于带分类索引的目标，如目标是不同的类别（有多个目标还是目标有多个label值？应该是每个目标都标出了独立类别）。但，许多现实任务涉及连续且无限的目标值。如，在视觉应用中，需要根据他们的外貌来推断他们的年龄，其中年龄是连续值并且可能高度不平衡。把不同年龄视为独立类别不太可能产生最佳结果，因为它没有利用年龄相近的人的相似性。类似的问题也发生在医疗应用中，因为包括心率、血压和血氧饱和度在内的许多健康指标是连续的，并且在患者群体中通常是偏态分布。Figure 1. Deep Imbalanced Regression (DIR) aims to learn from imbalanced data with continuous targets, tackle potential missing data for certain regions, ","tags":["ComputerVision"],"title":"Delving into Deep Imbalanced Regression翻译","url":"https://keepjolly.com/archives/delving-into-dir-translation/"},{"categories":["learn"],"content":"and generalize to the entire target range. 图一 DIR旨在从带连续目标的不平衡数据中学习，解决某些区域的潜在缺失数据并泛化到整个目标范围In this work, we systematically investigate Deep Imbalanced Regression (DIR) arising in real-world settings (see Fig. 1). We define DIR as learning continuous targets from natural imbalanced data, dealing with potentially missing data for certain target values, and generalizing to a test set that is balanced over the entire range of continuous target values. This definition is analogous to the class imbalan","date":"2022-08-16T20:19:04.481Z","objectID":"6007a2eeaa7d43fe067867c19f304143_7","order":7,"summary":"and generalize to the entire target range. 图一 DIR旨在从带连续目标的不平衡数据中学习，解决某些区域的潜在缺失数据并泛化到整个目标范围In this work, we systematically investigate Deep Imbalanced Regression (DIR) arising in real-world settings (see Fig. 1). We define DIR as learning continuous targets from natural imbalanced data, dealing with potentially missing data for certain target values, and generalizing to a test set that is balanced over the entire range of continuous target values. This definition is analogous to the class imbalan","tags":["ComputerVision"],"title":"Delving into Deep Imbalanced Regression翻译","url":"https://keepjolly.com/archives/delving-into-dir-translation/"},{"categories":["learn"],"content":"ce problem (Liu et al., 2019), but focuses on the continuous setting.在这项工作中，我们系统地研究了在现实中出现的DIR。我们把DIR定义为从自然的不平衡数据中学习到连续的目标，然后处理某些目标值潜在缺失数据，并泛化到整个连续目标值范围内是平衡的测试集。这个定义类似于类不平衡问题，但侧重于连续。DIR brings new challenges distinct from its classification counterpart. First, given continuous (potentially infinite) target values, the hard boundaries between classes no longer exist, causing ambiguity when directly applying traditional imbalanced classification methods such as re-sampling and re-weighting. Moreov","date":"2022-08-16T20:19:04.481Z","objectID":"6007a2eeaa7d43fe067867c19f304143_8","order":8,"summary":"ce problem (Liu et al., 2019), but focuses on the continuous setting.在这项工作中，我们系统地研究了在现实中出现的DIR。我们把DIR定义为从自然的不平衡数据中学习到连续的目标，然后处理某些目标值潜在缺失数据，并泛化到整个连续目标值范围内是平衡的测试集。这个定义类似于类不平衡问题，但侧重于连续。DIR brings new challenges distinct from its classification counterpart. First, given continuous (potentially infinite) target values, the hard boundaries between classes no longer exist, causing ambiguity when directly applying traditional imbalanced classification methods such as re-sampling and re-weighting. Moreov","tags":["ComputerVision"],"title":"Delving into Deep Imbalanced Regression翻译","url":"https://keepjolly.com/archives/delving-into-dir-translation/"},{"categories":["learn"],"content":"er, continuous labels inherently possess a meaningful distance between targets, which has implication for how we should interpret data imbalance. For example, say two target labels $t1$ and $t2$ have a small number of observations in training data. However, $t1$ is in a highly represented neighborhood (i.e., there are many samples in the range $\\left [ t1- \\bigtriangleup , t1+ \\bigtriangleup \\right ]$), while $t2$ is in a weakly represented neighborhood. In this case,$t1$ does not suffer from th","date":"2022-08-16T20:19:04.481Z","objectID":"6007a2eeaa7d43fe067867c19f304143_9","order":9,"summary":"er, continuous labels inherently possess a meaningful distance between targets, which has implication for how we should interpret data imbalance. For example, say two target labels $t1$ and $t2$ have a small number of observations in training data. However, $t1$ is in a highly represented neighborhood (i.e., there are many samples in the range $\\left [ t1- \\bigtriangleup , t1+ \\bigtriangleup \\right ]$), while $t2$ is in a weakly represented neighborhood. In this case,$t1$ does not suffer from th","tags":["ComputerVision"],"title":"Delving into Deep Imbalanced Regression翻译","url":"https://keepjolly.com/archives/delving-into-dir-translation/"},{"categories":["learn"],"content":"e same level of imbalance as $t2$. Finally, unlike classification, certain target values may have no data at all, which motivates the need for target extrapolation \u0026 interpolation. DIR带来了不同于其它分类任务的新挑战。首先，给定了连续（可能无限的）目标值，类间的边界不再存在，从而直接使用传统的不平衡分类方法（如重采样和重加权）时会导致歧义。此外，连续标签在目标之间本身具有有意义的distance，这对我们如何解释数据不平衡有影响。如，假设两个目标标签$t1$和$t2$在训练集中只有小部分的观测值。然而$t1$在一个相当高的表示域内（即，在$\\left [ t1- \\bigtriangleup , t1+ \\bigtriangleup \\right ]$ 内有许多样本，而$t2$在一个低的表示域内）在这种例子下，$t1$不会遭受与$t2$相同程度的不平衡。最后，不同于分类任务，某些目标值可能根本没有数据，这","date":"2022-08-16T20:19:04.481Z","objectID":"6007a2eeaa7d43fe067867c19f304143_10","order":10,"summary":"e same level of imbalance as $t2$. Finally, unlike classification, certain target values may have no data at all, which motivates the need for target extrapolation \u0026 interpolation. DIR带来了不同于其它分类任务的新挑战。首先，给定了连续（可能无限的）目标值，类间的边界不再存在，从而直接使用传统的不平衡分类方法（如重采样和重加权）时会导致歧义。此外，连续标签在目标之间本身具有有意义的distance，这对我们如何解释数据不平衡有影响。如，假设两个目标标签$t1$和$t2$在训练集中只有小部分的观测值。然而$t1$在一个相当高的表示域内（即，在$\\left [ t1- \\bigtriangleup , t1+ \\bigtriangleup \\right ]$ 内有许多样本，而$t2$在一个低的表示域内）在这种例子下，$t1$不会遭受与$t2$相同程度的不平衡。最后，不同于分类任务，某些目标值可能根本没有数据，这","tags":["ComputerVision"],"title":"Delving into Deep Imbalanced Regression翻译","url":"https://keepjolly.com/archives/delving-into-dir-translation/"},{"categories":["learn"],"content":"激发了对目标extrapolation 和 interpolation的需求。In this paper, we propose two simple yet effective methods for addressing DIR: label distribution smoothing (LDS) and feature distribution smoothing (FDS). A key idea underlying both approaches is to leverage the similarity between nearby targets by employing a kernel distribution to perform explicit distribution smoothing in the label and feature spaces. Both techniques can be easily embedded into existing deep networks and allow optimization in an end-to-","date":"2022-08-16T20:19:04.481Z","objectID":"6007a2eeaa7d43fe067867c19f304143_11","order":11,"summary":"激发了对目标extrapolation 和 interpolation的需求。In this paper, we propose two simple yet effective methods for addressing DIR: label distribution smoothing (LDS) and feature distribution smoothing (FDS). A key idea underlying both approaches is to leverage the similarity between nearby targets by employing a kernel distribution to perform explicit distribution smoothing in the label and feature spaces. Both techniques can be easily embedded into existing deep networks and allow optimization in an end-to-","tags":["ComputerVision"],"title":"Delving into Deep Imbalanced Regression翻译","url":"https://keepjolly.com/archives/delving-into-dir-translation/"},{"categories":["learn"],"content":"end fashion. We verify that our techniques not only successfully calibrate for the intrinsic underlying imbalance, but also provide large and consistent gains when combined with other methods. To support practical evaluation of imbalanced regression, we curate and benchmark large-scale DIR datasets for common real-world tasks in computer vision, natural language processing, and healthcare. They range from single-value prediction such as age, text similarity score, health condition score, to dens","date":"2022-08-16T20:19:04.481Z","objectID":"6007a2eeaa7d43fe067867c19f304143_12","order":12,"summary":"end fashion. We verify that our techniques not only successfully calibrate for the intrinsic underlying imbalance, but also provide large and consistent gains when combined with other methods. To support practical evaluation of imbalanced regression, we curate and benchmark large-scale DIR datasets for common real-world tasks in computer vision, natural language processing, and healthcare. They range from single-value prediction such as age, text similarity score, health condition score, to dens","tags":["ComputerVision"],"title":"Delving into Deep Imbalanced Regression翻译","url":"https://keepjolly.com/archives/delving-into-dir-translation/"},{"categories":["learn"],"content":"e-value prediction such as depth. We further set up benchmarks for proper DIR performance evaluation.在本文中，我们提出两个简单高效的方法来解决DIR：标签分布平滑和特征分布平滑。两个方法的关键思想是通过使用核分布在标签和特征空间中执行显式的分布平滑来利用临近目标间的相似性。每个方法都能轻易嵌入到现在的深度网络中并允许以端到端的方式进行优化。我们验证了我们的方法不仅成功地校准了固有的潜在不平衡，而且与其他方法结合时提供了巨大而一致的收益。为了支持不平衡回归的实际评估，我们为计算机视觉、自然语言处理和医疗中的常见现实任务中整理了和基准测试了大规模 DIR 数据集。这些数据集从单值预测（如年龄，文本相似度得分和健康状况得分）到密集值的预测（如深度）。我们进一步为合适的DIR性能评估建立了基准。Our contributions are as follows:We formally define the DIR task as learning from imbalanced data wit","date":"2022-08-16T20:19:04.481Z","objectID":"6007a2eeaa7d43fe067867c19f304143_13","order":13,"summary":"e-value prediction such as depth. We further set up benchmarks for proper DIR performance evaluation.在本文中，我们提出两个简单高效的方法来解决DIR：标签分布平滑和特征分布平滑。两个方法的关键思想是通过使用核分布在标签和特征空间中执行显式的分布平滑来利用临近目标间的相似性。每个方法都能轻易嵌入到现在的深度网络中并允许以端到端的方式进行优化。我们验证了我们的方法不仅成功地校准了固有的潜在不平衡，而且与其他方法结合时提供了巨大而一致的收益。为了支持不平衡回归的实际评估，我们为计算机视觉、自然语言处理和医疗中的常见现实任务中整理了和基准测试了大规模 DIR 数据集。这些数据集从单值预测（如年龄，文本相似度得分和健康状况得分）到密集值的预测（如深度）。我们进一步为合适的DIR性能评估建立了基准。Our contributions are as follows:We formally define the DIR task as learning from imbalanced data wit","tags":["ComputerVision"],"title":"Delving into Deep Imbalanced Regression翻译","url":"https://keepjolly.com/archives/delving-into-dir-translation/"},{"categories":["learn"],"content":"h continuous targets, and generalizing to the entire target range. DIR provides thorough and unbiased evaluation of learning algorithms in practical settings. We develop two simple, effective, and interpretable algorithms for DIR, LDS and FDS, which exploit the similarity between nearby targets in both label and feature space. We curate benchmark DIR datasets in different domains: computer vision, natural language processing, and healthcare. We set up strong baselines as well as benchmarks for p","date":"2022-08-16T20:19:04.481Z","objectID":"6007a2eeaa7d43fe067867c19f304143_14","order":14,"summary":"h continuous targets, and generalizing to the entire target range. DIR provides thorough and unbiased evaluation of learning algorithms in practical settings. We develop two simple, effective, and interpretable algorithms for DIR, LDS and FDS, which exploit the similarity between nearby targets in both label and feature space. We curate benchmark DIR datasets in different domains: computer vision, natural language processing, and healthcare. We set up strong baselines as well as benchmarks for p","tags":["ComputerVision"],"title":"Delving into Deep Imbalanced Regression翻译","url":"https://keepjolly.com/archives/delving-into-dir-translation/"},{"categories":["learn"],"content":"roper DIR performance evaluation. Extensive experiments on large-scale DIR datasets verify the consistent and superior performance of our strategies. 我们的贡献如下：我们将DIR任务定义为从带连续目标的不平衡数据中学习，并泛化到整个目标范围内。DIR在实际环境中对学习算法进行完全的公正的评估。 我们为DIR、LDS和FDS设计了两个简单高效且可解释的算法，算法利用了标签和特征空间中临近目标的相似性 我们在不同领域管理DIR基准数据集。我们为DIR性能评估建立了强大的基线和基准。 在大规模DIR数据集上进行的大量实验验证了我们方法的一致性和卓越的性能。 Related Work Imbalanced Classification. Much prior work has focused on the imbalanced classification problem (also referred to as long-tailed reco","date":"2022-08-16T20:19:04.481Z","objectID":"6007a2eeaa7d43fe067867c19f304143_15","order":15,"summary":"roper DIR performance evaluation. Extensive experiments on large-scale DIR datasets verify the consistent and superior performance of our strategies. 我们的贡献如下：我们将DIR任务定义为从带连续目标的不平衡数据中学习，并泛化到整个目标范围内。DIR在实际环境中对学习算法进行完全的公正的评估。 我们为DIR、LDS和FDS设计了两个简单高效且可解释的算法，算法利用了标签和特征空间中临近目标的相似性 我们在不同领域管理DIR基准数据集。我们为DIR性能评估建立了强大的基线和基准。 在大规模DIR数据集上进行的大量实验验证了我们方法的一致性和卓越的性能。 Related Work Imbalanced Classification. Much prior work has focused on the imbalanced classification problem (also referred to as long-tailed reco","tags":["ComputerVision"],"title":"Delving into Deep Imbalanced Regression翻译","url":"https://keepjolly.com/archives/delving-into-dir-translation/"},{"categories":["learn"],"content":"gnition (Liu et al., 2019)). Past solutions can be divided into data-based and model-based solutions: Data-based solutions either over-sample the minority class or under-sample the majority (Chawla et al., 2002; Garc´ıa \u0026 Herrera, 2009; He et al., 2008). For example, SMOTE generates synthetic samples for minority classes by linearly interpolating samples in the same class (Chawla et al., 2002). Model-based solutions include re-weighting or adjusting the loss function to compensate for class imba","date":"2022-08-16T20:19:04.481Z","objectID":"6007a2eeaa7d43fe067867c19f304143_16","order":16,"summary":"gnition (Liu et al., 2019)). Past solutions can be divided into data-based and model-based solutions: Data-based solutions either over-sample the minority class or under-sample the majority (Chawla et al., 2002; Garc´ıa \u0026 Herrera, 2009; He et al., 2008). For example, SMOTE generates synthetic samples for minority classes by linearly interpolating samples in the same class (Chawla et al., 2002). Model-based solutions include re-weighting or adjusting the loss function to compensate for class imba","tags":["ComputerVision"],"title":"Delving into Deep Imbalanced Regression翻译","url":"https://keepjolly.com/archives/delving-into-dir-translation/"},{"categories":["learn"],"content":"lance (Cao et al., 2019; Cui et al., 2019; Dong et al., 2019; Huang et al., 2016; 2019), and leveraging relevant learning paradigms, including transfer learning (Yin et al., 2019), metric learning (Zhang et al., 2017), meta-learning (Shu et al., 2019), and two-stage training (Kang et al., 2020). Recent studies have also discovered that semi-supervised learning and selfsupervised learning lead to better imbalanced classification results (Yang \u0026 Xu, 2020). In contrast to these past work, we identi","date":"2022-08-16T20:19:04.481Z","objectID":"6007a2eeaa7d43fe067867c19f304143_17","order":17,"summary":"lance (Cao et al., 2019; Cui et al., 2019; Dong et al., 2019; Huang et al., 2016; 2019), and leveraging relevant learning paradigms, including transfer learning (Yin et al., 2019), metric learning (Zhang et al., 2017), meta-learning (Shu et al., 2019), and two-stage training (Kang et al., 2020). Recent studies have also discovered that semi-supervised learning and selfsupervised learning lead to better imbalanced classification results (Yang \u0026 Xu, 2020). In contrast to these past work, we identi","tags":["ComputerVision"],"title":"Delving into Deep Imbalanced Regression翻译","url":"https://keepjolly.com/archives/delving-into-dir-translation/"},{"categories":["learn"],"content":"fy the limitations of applying class imbalance methods to regression problems, and introduce new techniques particularly suitable for learning continuous target values. 不平衡分类。大量的先前工作都集中于不平衡分类问题（也称为长尾识别问题）上。过去的解决方案可以分为基于数据和基于模型：基于数据的方案要么在少数类上过采样或在大多数上缺采样。如，SMOTE为少数类别生成人造样本通过在相同类别的样本中线性插值。基于模型的方案包括重加权或调整损失函数来弥补类别不平衡（yolo的大小目标的超参数），并利用相关的学习范式，包括迁移学习、度量学习、元学习和二阶段训练。最近研究也发现半监督学习和自监督学习会产生不平衡分类问题的好结果。与过去工作相比，我们发现在回归问题上应用类别不平衡方法的局限性，并引入特别适合学习连续目标值的新方法。Imbalanced Regression. Regression over imbalanced da","date":"2022-08-16T20:19:04.481Z","objectID":"6007a2eeaa7d43fe067867c19f304143_18","order":18,"summary":"fy the limitations of applying class imbalance methods to regression problems, and introduce new techniques particularly suitable for learning continuous target values. 不平衡分类。大量的先前工作都集中于不平衡分类问题（也称为长尾识别问题）上。过去的解决方案可以分为基于数据和基于模型：基于数据的方案要么在少数类上过采样或在大多数上缺采样。如，SMOTE为少数类别生成人造样本通过在相同类别的样本中线性插值。基于模型的方案包括重加权或调整损失函数来弥补类别不平衡（yolo的大小目标的超参数），并利用相关的学习范式，包括迁移学习、度量学习、元学习和二阶段训练。最近研究也发现半监督学习和自监督学习会产生不平衡分类问题的好结果。与过去工作相比，我们发现在回归问题上应用类别不平衡方法的局限性，并引入特别适合学习连续目标值的新方法。Imbalanced Regression. Regression over imbalanced da","tags":["ComputerVision"],"title":"Delving into Deep Imbalanced Regression翻译","url":"https://keepjolly.com/archives/delving-into-dir-translation/"},{"categories":["learn"],"content":"ta is not as well explored. Most of the work on this topic is a direct adaptation of the SMOTE algorithm to regression scenarios (Branco et al., 2017; 2018; Torgo et al., 2013). Synthetic samples are created for pre-defined rare target regions by either directly interpolating both inputs and targets (Torgo et al., 2013), or using Gaussian noise augmentation (Branco et al., 2017). A bagging-based ensemble method that incorporates multiple data pre-processing steps has also been introduced (Branco","date":"2022-08-16T20:19:04.481Z","objectID":"6007a2eeaa7d43fe067867c19f304143_19","order":19,"summary":"ta is not as well explored. Most of the work on this topic is a direct adaptation of the SMOTE algorithm to regression scenarios (Branco et al., 2017; 2018; Torgo et al., 2013). Synthetic samples are created for pre-defined rare target regions by either directly interpolating both inputs and targets (Torgo et al., 2013), or using Gaussian noise augmentation (Branco et al., 2017). A bagging-based ensemble method that incorporates multiple data pre-processing steps has also been introduced (Branco","tags":["ComputerVision"],"title":"Delving into Deep Imbalanced Regression翻译","url":"https://keepjolly.com/archives/delving-into-dir-translation/"},{"categories":["learn"],"content":" et al., 2018). However, there exist several intrinsic drawbacks for these methods. First, they fail to take the distance between targets into account, and rather heuristically divide the dataset into rare and frequent sets, then plug in classification-based methods. Moreover, modern data is of extremely high dimension (e.g., images and physiological signals); linear interpolation of two samples of such data does not lead to meaningful new synthetic samples. Our methods are intrinsically differe","date":"2022-08-16T20:19:04.481Z","objectID":"6007a2eeaa7d43fe067867c19f304143_20","order":20,"summary":" et al., 2018). However, there exist several intrinsic drawbacks for these methods. First, they fail to take the distance between targets into account, and rather heuristically divide the dataset into rare and frequent sets, then plug in classification-based methods. Moreover, modern data is of extremely high dimension (e.g., images and physiological signals); linear interpolation of two samples of such data does not lead to meaningful new synthetic samples. Our methods are intrinsically differe","tags":["ComputerVision"],"title":"Delving into Deep Imbalanced Regression翻译","url":"https://keepjolly.com/archives/delving-into-dir-translation/"},{"categories":["learn"],"content":"nt from past work in their approach. They can be combined with existing methods to improve their performance, as we show in Sec. 4. Further, our approaches are tested on large-scale real-world datasets in computer vision, NLP, and healthcare.不平衡回归。在不平衡数据上回归也没有很好的探索过。大多数的工作是SMOTE算法的直接调整到回归场景。通过直接在输入和目标上插值或使用高斯噪声增强技术，来为预定义的稀少目标区域（样本很少的地方）创造人造样本。还引入一个基于bagging的集成方法，它包含多个数据预处理步骤。但是，这些方法存在几个固有的缺陷。首先，它们没有考虑目标间的distance，而是启发式地把数据集分成rare集和frequent集，然后插入基于分类的方法。此外，极高维度的现代数据（如，图片和生理信号）对此类数据的两个样本进行线性插值不会产生","date":"2022-08-16T20:19:04.481Z","objectID":"6007a2eeaa7d43fe067867c19f304143_21","order":21,"summary":"nt from past work in their approach. They can be combined with existing methods to improve their performance, as we show in Sec. 4. Further, our approaches are tested on large-scale real-world datasets in computer vision, NLP, and healthcare.不平衡回归。在不平衡数据上回归也没有很好的探索过。大多数的工作是SMOTE算法的直接调整到回归场景。通过直接在输入和目标上插值或使用高斯噪声增强技术，来为预定义的稀少目标区域（样本很少的地方）创造人造样本。还引入一个基于bagging的集成方法，它包含多个数据预处理步骤。但是，这些方法存在几个固有的缺陷。首先，它们没有考虑目标间的distance，而是启发式地把数据集分成rare集和frequent集，然后插入基于分类的方法。此外，极高维度的现代数据（如，图片和生理信号）对此类数据的两个样本进行线性插值不会产生","tags":["ComputerVision"],"title":"Delving into Deep Imbalanced Regression翻译","url":"https://keepjolly.com/archives/delving-into-dir-translation/"},{"categories":["learn"],"content":"有意义的新合成样本。我们的方法本质上同先前方法不同。它们可以结合现有方法来提高性能，如Sec.4所示。此外，我们的方法在视觉、NLP和医疗的大规模数据集上测试过。 Methods Problem Setting. $ \\left\\{\\left(x_i,y_i\\right)\\right\\}_{i=1}^N$ be a training set, where$x_i\\in \\mathbb{R} ^d $ denotes the input and$y_i\\in \\mathbb{R}$ is the label, which is a continuous target. We introduce an additional structure for the label space $\\mathcal{Y}$ , where we divide $\\mathcal{Y}$ into $B$ groups (bins) with equal intervals, i.e., $\\left [ y_0, y_1\\right ), \\left [ y_1, y_2\\right ), \\cdots","date":"2022-08-16T20:19:04.481Z","objectID":"6007a2eeaa7d43fe067867c19f304143_22","order":22,"summary":"有意义的新合成样本。我们的方法本质上同先前方法不同。它们可以结合现有方法来提高性能，如Sec.4所示。此外，我们的方法在视觉、NLP和医疗的大规模数据集上测试过。 Methods Problem Setting. $ \\left\\{\\left(x_i,y_i\\right)\\right\\}_{i=1}^N$ be a training set, where$x_i\\in \\mathbb{R} ^d $ denotes the input and$y_i\\in \\mathbb{R}$ is the label, which is a continuous target. We introduce an additional structure for the label space $\\mathcal{Y}$ , where we divide $\\mathcal{Y}$ into $B$ groups (bins) with equal intervals, i.e., $\\left [ y_0, y_1\\right ), \\left [ y_1, y_2\\right ), \\cdots","tags":["ComputerVision"],"title":"Delving into Deep Imbalanced Regression翻译","url":"https://keepjolly.com/archives/delving-into-dir-translation/"},{"categories":["learn"],"content":" , \\left [ y_{B-1}, y_B\\right )$. Throughout the paper, we use $b \\in \\mathcal{B}$ to denote the group index of the target value, where $\\mathcal{B} = \\left { 1, \\dots , B\\right } \\subset \\mathbb{Z}^+$ is the index space. In practice, the defined bins reflect a minimum resolution we care for grouping data in a regression task. For instance, in age estimation, we could define $\\delta y \\triangleq y_{b+1}-y_{b}=1$, showing a minimum age difference of 1 is of interest. Finally, we denote $\\mathrm {","date":"2022-08-16T20:19:04.481Z","objectID":"6007a2eeaa7d43fe067867c19f304143_23","order":23,"summary":" , \\left [ y_{B-1}, y_B\\right )$. Throughout the paper, we use $b \\in \\mathcal{B}$ to denote the group index of the target value, where $\\mathcal{B} = \\left { 1, \\dots , B\\right } \\subset \\mathbb{Z}^+$ is the index space. In practice, the defined bins reflect a minimum resolution we care for grouping data in a regression task. For instance, in age estimation, we could define $\\delta y \\triangleq y_{b+1}-y_{b}=1$, showing a minimum age difference of 1 is of interest. Finally, we denote $\\mathrm {","tags":["ComputerVision"],"title":"Delving into Deep Imbalanced Regression翻译","url":"https://keepjolly.com/archives/delving-into-dir-translation/"},{"categories":["learn"],"content":"z} =f\\left ( x;\\theta \\right )$as the feature for $\\mathrm {x}$, where $f\\left ( x;\\theta \\right )$ is parameterized by a deep neural network model with parameter $\\theta$. The final prediction $\\hat{y}$ is given by a regression function $g(\\cdot)$ that operates over $\\mathbf{ \\mathrm {z}}$.问题设置。让 $\\left { \\left ( x_i, y_i \\right ) \\right }^N_{i=1}$作为训练集，其中$x_i\\in \\mathbb{R} ^d$表示输入，$y_i\\in \\mathbb{R}$表示标签，是连续目标值。我们为标签空间$\\mathcal{Y}$引入额外的结构，其中我们把$\\mathcal{Y}$分成等间隔的B组（箱），即$\\left [ y_0, y_1\\right ","date":"2022-08-16T20:19:04.481Z","objectID":"6007a2eeaa7d43fe067867c19f304143_24","order":24,"summary":"z} =f\\left ( x;\\theta \\right )$as the feature for $\\mathrm {x}$, where $f\\left ( x;\\theta \\right )$ is parameterized by a deep neural network model with parameter $\\theta$. The final prediction $\\hat{y}$ is given by a regression function $g(\\cdot)$ that operates over $\\mathbf{ \\mathrm {z}}$.问题设置。让 $\\left { \\left ( x_i, y_i \\right ) \\right }^N_{i=1}$作为训练集，其中$x_i\\in \\mathbb{R} ^d$表示输入，$y_i\\in \\mathbb{R}$表示标签，是连续目标值。我们为标签空间$\\mathcal{Y}$引入额外的结构，其中我们把$\\mathcal{Y}$分成等间隔的B组（箱），即$\\left [ y_0, y_1\\right ","tags":["ComputerVision"],"title":"Delving into Deep Imbalanced Regression翻译","url":"https://keepjolly.com/archives/delving-into-dir-translation/"},{"categories":["learn"],"content":"), \\left [ y_1, y_2\\right ), \\cdots , \\left [ y_{B-1}, y_B\\right )$。在整个文章中，我们使用$b \\in \\mathcal{B}$表示目标值的组索引，其中 $\\mathcal{B} = \\left { 1, \\dots , B\\right } \\subset \\mathbb{Z}^+$是索引空间。实际上，定义的bins反应了我们在回归任务中对数据分组时关心的最小分辨率。例如，在年龄评估上，我们可以定义$\\delta y \\triangleq y_{b+1}-y_{b}=1$，表明最小年龄差为1是有用的。最终，我们把 $\\mathrm {z} =f\\left ( x;\\theta \\right )$表示x的特征，其中$f\\left ( x;\\theta \\right )$是通过具有参数$\\theta$的深度神经网络参数化的。最终的预测 $\\hat{y}$是通过 一个在$\\mathbf{ \\mathrm {z}}$上运行的回归函数$g(\\cdot)$给出。 Label Distribution Smoothing We st","date":"2022-08-16T20:19:04.481Z","objectID":"6007a2eeaa7d43fe067867c19f304143_25","order":25,"summary":"), \\left [ y_1, y_2\\right ), \\cdots , \\left [ y_{B-1}, y_B\\right )$。在整个文章中，我们使用$b \\in \\mathcal{B}$表示目标值的组索引，其中 $\\mathcal{B} = \\left { 1, \\dots , B\\right } \\subset \\mathbb{Z}^+$是索引空间。实际上，定义的bins反应了我们在回归任务中对数据分组时关心的最小分辨率。例如，在年龄评估上，我们可以定义$\\delta y \\triangleq y_{b+1}-y_{b}=1$，表明最小年龄差为1是有用的。最终，我们把 $\\mathrm {z} =f\\left ( x;\\theta \\right )$表示x的特征，其中$f\\left ( x;\\theta \\right )$是通过具有参数$\\theta$的深度神经网络参数化的。最终的预测 $\\hat{y}$是通过 一个在$\\mathbf{ \\mathrm {z}}$上运行的回归函数$g(\\cdot)$给出。 Label Distribution Smoothing We st","tags":["ComputerVision"],"title":"Delving into Deep Imbalanced Regression翻译","url":"https://keepjolly.com/archives/delving-into-dir-translation/"},{"categories":["learn"],"content":"art by showing an example to demonstrate the difference between classification and regression when imbalance comes into the picture.Figure 2. Comparison on the test error distribution (bottom) using same training label distribution (top) on two different datasets: (a) CIFAR-100, a classification task with categorical label space. (b) IMDB-WIKI, a regression task with continuous label space. 图二。在两个不同的数据集上使用相同的训练标签分布来比较测试error分布(bottom)：(a)CIFAR-100，具有分类的标签空间的分类任务。(b)IMDB-WIKI，具有连续标签空间的回归任务Motivat","date":"2022-08-16T20:19:04.481Z","objectID":"6007a2eeaa7d43fe067867c19f304143_26","order":26,"summary":"art by showing an example to demonstrate the difference between classification and regression when imbalance comes into the picture.Figure 2. Comparison on the test error distribution (bottom) using same training label distribution (top) on two different datasets: (a) CIFAR-100, a classification task with categorical label space. (b) IMDB-WIKI, a regression task with continuous label space. 图二。在两个不同的数据集上使用相同的训练标签分布来比较测试error分布(bottom)：(a)CIFAR-100，具有分类的标签空间的分类任务。(b)IMDB-WIKI，具有连续标签空间的回归任务Motivat","tags":["ComputerVision"],"title":"Delving into Deep Imbalanced Regression翻译","url":"https://keepjolly.com/archives/delving-into-dir-translation/"},{"categories":["learn"],"content":"ing Example. We employ two datasets: (1) CIFAR100 (Krizhevsky et al., 2009), which is a 100-class classification dataset, and (2) the IMDB-WIKI dataset (Rothe et al., 2018), which is a large-scale image dataset for age estimation from visual appearance. The two datasets have intrinsically different label space: CIFAR-100 exhibits categorical label space where the target is class index, while IMDB-WIKI has a continuous label space where the target is age. We limit the age range to $0 \\sim 99$ so ","date":"2022-08-16T20:19:04.481Z","objectID":"6007a2eeaa7d43fe067867c19f304143_27","order":27,"summary":"ing Example. We employ two datasets: (1) CIFAR100 (Krizhevsky et al., 2009), which is a 100-class classification dataset, and (2) the IMDB-WIKI dataset (Rothe et al., 2018), which is a large-scale image dataset for age estimation from visual appearance. The two datasets have intrinsically different label space: CIFAR-100 exhibits categorical label space where the target is class index, while IMDB-WIKI has a continuous label space where the target is age. We limit the age range to $0 \\sim 99$ so ","tags":["ComputerVision"],"title":"Delving into Deep Imbalanced Regression翻译","url":"https://keepjolly.com/archives/delving-into-dir-translation/"},{"categories":["learn"],"content":"that the two datasets have the same label range, and subsample them to simulate data imbalance, while ensuring they have exactly the same label density distribution (Fig. 2). We make both test sets balanced. We then train a plain ResNet-50 model on the two datasets, and plot their test error distributions.我们使用两个数据集：CIFAR100，它是一个100类的分类数据集；IMDB-WIKI，它是从外貌来估计年龄的大规模图片数据集。这两个数据集具有完全不同的标签空间：CIFAR100的类别标签空间中目标值是类别索引，而IMDB-WIKI是目标值是年龄的连续样本空间我们限制年龄到0~99使得两个数据集有相同的标签范围，并且下采样来模拟数据不平衡，同时保持它们具有相同的标签密度分布（图2）","date":"2022-08-16T20:19:04.481Z","objectID":"6007a2eeaa7d43fe067867c19f304143_28","order":28,"summary":"that the two datasets have the same label range, and subsample them to simulate data imbalance, while ensuring they have exactly the same label density distribution (Fig. 2). We make both test sets balanced. We then train a plain ResNet-50 model on the two datasets, and plot their test error distributions.我们使用两个数据集：CIFAR100，它是一个100类的分类数据集；IMDB-WIKI，它是从外貌来估计年龄的大规模图片数据集。这两个数据集具有完全不同的标签空间：CIFAR100的类别标签空间中目标值是类别索引，而IMDB-WIKI是目标值是年龄的连续样本空间我们限制年龄到0~99使得两个数据集有相同的标签范围，并且下采样来模拟数据不平衡，同时保持它们具有相同的标签密度分布（图2）","tags":["ComputerVision"],"title":"Delving into Deep Imbalanced Regression翻译","url":"https://keepjolly.com/archives/delving-into-dir-translation/"},{"categories":["learn"],"content":"。我们保持两个测试集平滑。然后在两个数据集上训练plain ResNet-50，并绘制出它们的测试误差分布。We observe from Fig. 2(a) that the error distribution correlates with label density distribution. Specifically, the test error as a function of class index has a high negative Pearson correlation with the label density distribution (i.e., -0.76) in the categorical label space. The phenomenon is expected, as majority classes with more samples are better learned than minority classes. Interestingly however, as Fig. 2(b) shows, the error distrib","date":"2022-08-16T20:19:04.481Z","objectID":"6007a2eeaa7d43fe067867c19f304143_29","order":29,"summary":"。我们保持两个测试集平滑。然后在两个数据集上训练plain ResNet-50，并绘制出它们的测试误差分布。We observe from Fig. 2(a) that the error distribution correlates with label density distribution. Specifically, the test error as a function of class index has a high negative Pearson correlation with the label density distribution (i.e., -0.76) in the categorical label space. The phenomenon is expected, as majority classes with more samples are better learned than minority classes. Interestingly however, as Fig. 2(b) shows, the error distrib","tags":["ComputerVision"],"title":"Delving into Deep Imbalanced Regression翻译","url":"https://keepjolly.com/archives/delving-into-dir-translation/"},{"categories":["learn"],"content":"ution is very different for IMDB-WIKI with continuous label space, even when the label density distribution is the same as CIFAR-100. In particular, the error distribution is much smoother and no longer correlates well with the label density distribution (-0.47). 在图2，我们观察到误差分布与标签密度分布相关。特别的，作为一个类别索引的函数，测试误差与分类标签空间的标签密度分布中有特别高的负Pearson相关性（即-0.76）。这种现象是预期的，因为多数类有更多的样本比少数类更易训练。但有趣的是，如图2(b)所示，误差分布在IMDB-WIKI十分不同，即使当标签密度空间与CIFAR-100相同。特别是误差分布更平滑并且不再跟标签密度分布相关（-0.47）。The reason why this example is intere","date":"2022-08-16T20:19:04.481Z","objectID":"6007a2eeaa7d43fe067867c19f304143_30","order":30,"summary":"ution is very different for IMDB-WIKI with continuous label space, even when the label density distribution is the same as CIFAR-100. In particular, the error distribution is much smoother and no longer correlates well with the label density distribution (-0.47). 在图2，我们观察到误差分布与标签密度分布相关。特别的，作为一个类别索引的函数，测试误差与分类标签空间的标签密度分布中有特别高的负Pearson相关性（即-0.76）。这种现象是预期的，因为多数类有更多的样本比少数类更易训练。但有趣的是，如图2(b)所示，误差分布在IMDB-WIKI十分不同，即使当标签密度空间与CIFAR-100相同。特别是误差分布更平滑并且不再跟标签密度分布相关（-0.47）。The reason why this example is intere","tags":["ComputerVision"],"title":"Delving into Deep Imbalanced Regression翻译","url":"https://keepjolly.com/archives/delving-into-dir-translation/"},{"categories":["learn"],"content":"sting is that all imbalanced learning methods, directly or indirectly, operate by compensating for the imbalance in the empirical label density distribution. This works well for class imbalance, but for continuous labels the empirical density does not accurately reflect the imbalance as seen by the neural network. Hence, compensating for data imbalance based on empirical label density is inaccurate for the continuous label space. 这个例子的原因是所有不平衡学习方法都直接或间接的通过改善经验标签密度分布的不平衡来操作。这对于类不平衡有效，但对于连续标签，经验密度","date":"2022-08-16T20:19:04.481Z","objectID":"6007a2eeaa7d43fe067867c19f304143_31","order":31,"summary":"sting is that all imbalanced learning methods, directly or indirectly, operate by compensating for the imbalance in the empirical label density distribution. This works well for class imbalance, but for continuous labels the empirical density does not accurately reflect the imbalance as seen by the neural network. Hence, compensating for data imbalance based on empirical label density is inaccurate for the continuous label space. 这个例子的原因是所有不平衡学习方法都直接或间接的通过改善经验标签密度分布的不平衡来操作。这对于类不平衡有效，但对于连续标签，经验密度","tags":["ComputerVision"],"title":"Delving into Deep Imbalanced Regression翻译","url":"https://keepjolly.com/archives/delving-into-dir-translation/"},{"categories":["learn"],"content":"不能准确反应通过神经网络看到的不平衡。因此，对于连续标签空间，基于经验标签密度来改善数据不平衡是不正确的An empirical distribution is one for which each possible event is assigned a probability derived from experimental observation. It is assumed that the events are independent and the sum of the probabilities is 1.也就是直接观测到的标签密度。LDS for Imbalanced Data Density Estimation. The above example shows that, in the continuous case, the empirical label distribution does not reflect the real label density distribution. This is because of the dependence bet","date":"2022-08-16T20:19:04.481Z","objectID":"6007a2eeaa7d43fe067867c19f304143_32","order":32,"summary":"不能准确反应通过神经网络看到的不平衡。因此，对于连续标签空间，基于经验标签密度来改善数据不平衡是不正确的An empirical distribution is one for which each possible event is assigned a probability derived from experimental observation. It is assumed that the events are independent and the sum of the probabilities is 1.也就是直接观测到的标签密度。LDS for Imbalanced Data Density Estimation. The above example shows that, in the continuous case, the empirical label distribution does not reflect the real label density distribution. This is because of the dependence bet","tags":["ComputerVision"],"title":"Delving into Deep Imbalanced Regression翻译","url":"https://keepjolly.com/archives/delving-into-dir-translation/"},{"categories":["learn"],"content":"ween data samples at nearby labels (e.g., images of close ages). In fact, there is a significant literature in statistics on how to estimate the expected density in such cases (Parzen, 1962). Thus, Label Distribution Smoothing (LDS) advocates the use of kernel density estimation to learn the effective imbalance in datasets that corresponds to continuous targets. 用于不平衡数据密度估计的LDS。上述例子表明，在连续情况下，经验标签密度不能反映真实标签密度分布。这是因为相近标签的数据样本之间存在依赖性（如年龄相近的图片）。事实上，关于如何估计在这种情况下的预期密度，统计学有大量的统计文献。因此，LDS提倡使用核密度估计来学习数据集","date":"2022-08-16T20:19:04.481Z","objectID":"6007a2eeaa7d43fe067867c19f304143_33","order":33,"summary":"ween data samples at nearby labels (e.g., images of close ages). In fact, there is a significant literature in statistics on how to estimate the expected density in such cases (Parzen, 1962). Thus, Label Distribution Smoothing (LDS) advocates the use of kernel density estimation to learn the effective imbalance in datasets that corresponds to continuous targets. 用于不平衡数据密度估计的LDS。上述例子表明，在连续情况下，经验标签密度不能反映真实标签密度分布。这是因为相近标签的数据样本之间存在依赖性（如年龄相近的图片）。事实上，关于如何估计在这种情况下的预期密度，统计学有大量的统计文献。因此，LDS提倡使用核密度估计来学习数据集","tags":["ComputerVision"],"title":"Delving into Deep Imbalanced Regression翻译","url":"https://keepjolly.com/archives/delving-into-dir-translation/"},{"categories":["other"],"content":"深度学习 吴恩达课后作业目录 深度学习作业 习题无答案 深度学习作业 编程 《深度学习》笔记 作业 深度学习代码 深度学习 习题 有答案 李沐动手学深度学习 李沐深度学习 如何自学机器学习 前端 图床 在线api 资源下载 csdn下载 b站下载 ","date":"2022-07-31T19:01:58.277Z","objectID":"941b374ecc2e1a84f0e7b785611e43b6_0","order":0,"summary":"深度学习 吴恩达课后作业目录 深度学习作业 习题无答案 深度学习作业 编程 《深度学习》笔记 作业 深度学习代码 深度学习 习题 有答案 李沐动手学深度学习 李沐深度学习 如何自学机器学习 前端 图床 在线api 资源下载 csdn下载 b站下载 ","tags":["Collection"],"title":"清收藏用","url":"https://keepjolly.com/archives/clean-collection/"},{"categories":["error"],"content":"参考链接：借助数据万象（原万象优图），让 hexo 也用上 webp Base64编码解码 自定义链接格式 添加盲水印 阿里云+picgo+自定义链接 盲水印价格 数据万象常见问题 因为想着今晚已经浪费好长时间了，索性把picgo上传图片优化一下。 上传图片为webp格式并加盲水印 自定义链接格式如下：$url?imageMogr2/format/webp|?watermark/3/type/3/text/XXXX|?watermark/3/type/3/text/XXXX：生成盲水印，另外盲水印目前的价格是添加盲水印：1元/千次 提取盲水印：1元/千次 XXXX记得通过上述的Base64编码解码生成你的base64字符串 官方文档好像不可以https开头，目前用$url没有什么问题 微信小程序的多处理规则无效应该怎么办？ 解决方案如下： 使用样式。 把操作符 “|” 替换成 “%7C”。 提取盲水印 因为需要别人拿我的照片，并且要上传到他的cos才能提取盲水印 这里放链接：Link、Link2","date":"2022-05-31T22:36:39.402Z","objectID":"3e638a84fc82d483ce7860cd55d3304b_0","order":0,"summary":"参考链接：借助数据万象（原万象优图），让 hexo 也用上 webp Base64编码解码 自定义链接格式 添加盲水印 阿里云+picgo+自定义链接 盲水印价格 数据万象常见问题 因为想着今晚已经浪费好长时间了，索性把picgo上传图片优化一下。 上传图片为webp格式并加盲水印 自定义链接格式如下：$url?imageMogr2/format/webp|?watermark/3/type/3/text/XXXX|?watermark/3/type/3/text/XXXX：生成盲水印，另外盲水印目前的价格是添加盲水印：1元/千次 提取盲水印：1元/千次 XXXX记得通过上述的Base64编码解码生成你的base64字符串 官方文档好像不可以https开头，目前用$url没有什么问题 微信小程序的多处理规则无效应该怎么办？ 解决方案如下： 使用样式。 把操作符 “|” 替换成 “%7C”。 提取盲水印 因为需要别人拿我的照片，并且要上传到他的cos才能提取盲水印 这里放链接：Link、Link2","tags":["Blog","Picgo"],"title":"picgo进阶玩法+腾讯云","url":"https://keepjolly.com/archives/picgo-jin-jie-wan-fa--teng-xun-yun/"},{"categories":["error"],"content":"安装picgo 一开始发现picgo-plugin-super-prefix-master这个插件，故安装，因为从github上下下来，所以采取了本地上传插件进行安装，这一步坑死我了。 super-prefix安装 在插件设置里输入super-prefix，搜索后即可安装成功，注意作者是gclove 遇到的坑 我是直接在GitHub上download下来，然后本地上传，非常不建议本地上传，有bug 修改package.json 在这个路径C:\\Users\\xxxx\\AppData\\Roaming\\picgo下找到package.json，首先将里面的本地上传的super-prefix删除(ctrl+f 查找即可)，如果没有也没事 删除node_modules中的.package-lock.json的字段值 1.先从第一步从搜索栏安装后 2.错误复现不了了，总之在文件最上面会有个../.../destop/picgo-plugin-super-prefix的一串代码，一直删除**{ xxxxx},**为止,然后重启软件即可 pic-migrate安装 安装照上面来即可，但是安装完成后记得","date":"2022-05-31T21:39:04.656Z","objectID":"28f66ba895da33534f41120b447c45d5_0","order":0,"summary":"安装picgo 一开始发现picgo-plugin-super-prefix-master这个插件，故安装，因为从github上下下来，所以采取了本地上传插件进行安装，这一步坑死我了。 super-prefix安装 在插件设置里输入super-prefix，搜索后即可安装成功，注意作者是gclove 遇到的坑 我是直接在GitHub上download下来，然后本地上传，非常不建议本地上传，有bug 修改package.json 在这个路径C:\\Users\\xxxx\\AppData\\Roaming\\picgo下找到package.json，首先将里面的本地上传的super-prefix删除(ctrl+f 查找即可)，如果没有也没事 删除node_modules中的.package-lock.json的字段值 1.先从第一步从搜索栏安装后 2.错误复现不了了，总之在文件最上面会有个../.../destop/picgo-plugin-super-prefix的一串代码，一直删除**{ xxxxx},**为止,然后重启软件即可 pic-migrate安装 安装照上面来即可，但是安装完成后记得","tags":["Blog"],"title":"picgo安装插件不成功","url":"https://keepjolly.com/archives/picgo-install-plugin/"},{"categories":["learn"],"content":"下载VOC2012数据集，这里用的是镜像：镜像网址、Train/Validation dataset、test dataset 注意直接复制链接，浏览器不会接管下载，需要打开迅雷（最好有超级会员） 原本想复现的，师兄告诉我还是直接看v3好，故溜~ 参考链接：目标检测：YOLOV1 YOLOv1损失函数 YOLO v1深入理解 可以看看评论区 YOLO：实时快速目标检测 可以看看评论区 【目标检测】单阶段算法--YOLOv1详解 【论文解读】Yolo三部曲解读——Yolov1 可以看看评论区 YOLOv1简介 相比于 R-CNN 系列的方法，YOLO提供了另外一种思路，将 Object Detection 的问题转化成一个 Regression 问题。给定输入图像，直接在图像的多个位置上回归出目标的bounding box以及其分类类别。YOLO是一个可以一次性预测多个Box位置和类别的卷积神经网络，能够实现端到端的目标检测和识别，其最大的优势就是速度快。YOLO没有选择滑动窗口（silding window）或提取proposal的方式训练网络，而是直接选用整图训练模型。这样做的好处在","date":"2022-05-27T16:14:59.488Z","objectID":"9da833e02431b4d209ed558af6d41e1f_0","order":0,"summary":"下载VOC2012数据集，这里用的是镜像：镜像网址、Train/Validation dataset、test dataset 注意直接复制链接，浏览器不会接管下载，需要打开迅雷（最好有超级会员） 原本想复现的，师兄告诉我还是直接看v3好，故溜~ 参考链接：目标检测：YOLOV1 YOLOv1损失函数 YOLO v1深入理解 可以看看评论区 YOLO：实时快速目标检测 可以看看评论区 【目标检测】单阶段算法--YOLOv1详解 【论文解读】Yolo三部曲解读——Yolov1 可以看看评论区 YOLOv1简介 相比于 R-CNN 系列的方法，YOLO提供了另外一种思路，将 Object Detection 的问题转化成一个 Regression 问题。给定输入图像，直接在图像的多个位置上回归出目标的bounding box以及其分类类别。YOLO是一个可以一次性预测多个Box位置和类别的卷积神经网络，能够实现端到端的目标检测和识别，其最大的优势就是速度快。YOLO没有选择滑动窗口（silding window）或提取proposal的方式训练网络，而是直接选用整图训练模型。这样做的好处在","tags":["ComputerVision"],"title":"YOLOv1初体验","url":"https://keepjolly.com/archives/yolov1-first-try/"},{"categories":["learn"],"content":"于可以更好的区分目标和背景区域，相比之下，采用proposal训练方式的Fast-R-CNN常常把背景区域误检为特定目标。但是YOLO目标区域定位误差更大（特别是小目标）。 优点：First, YOLO is extremely fast. Since we frame detection as a regression problem we don't need a complex pipeline.（这里的回归问题不是特别理解。回归的目的是预测数值型的目标值，输入图像经过一次网络，便能得到图像中所有物体的位置和其所属类别及相应的置信概率） Second, YOLO reasons globally about the image when making predictions. Unlike sliding window and region proposal-based techniques, YOLO sees the entire image. Third, YOLO learns generalizable representations of objects. When ","date":"2022-05-27T16:14:59.488Z","objectID":"9da833e02431b4d209ed558af6d41e1f_1","order":1,"summary":"于可以更好的区分目标和背景区域，相比之下，采用proposal训练方式的Fast-R-CNN常常把背景区域误检为特定目标。但是YOLO目标区域定位误差更大（特别是小目标）。 优点：First, YOLO is extremely fast. Since we frame detection as a regression problem we don't need a complex pipeline.（这里的回归问题不是特别理解。回归的目的是预测数值型的目标值，输入图像经过一次网络，便能得到图像中所有物体的位置和其所属类别及相应的置信概率） Second, YOLO reasons globally about the image when making predictions. Unlike sliding window and region proposal-based techniques, YOLO sees the entire image. Third, YOLO learns generalizable representations of objects. When ","tags":["ComputerVision"],"title":"YOLOv1初体验","url":"https://keepjolly.com/archives/yolov1-first-try/"},{"categories":["learn"],"content":"trained on natural images and tested on art- work, YOLO outperforms top detection methods like DPM and R-CNN by a wide margin.Our system models detection as a regression problem. It divides the image into an S × S grid and for each grid cell predicts B bounding boxes, confidence for those boxes, and C class probabilities. These predictions are encoded as an S × S × (B ∗ 5 + C) tensor.实现方案：Link，大致下面这个区域，因为都是原文摘抄，所以不全部复制了。1）结构 去掉候选区这个步骤以后，YOLO的结构非常简单，就是单纯的卷积、池化最后加了两层全连接。单看网络结构的话，和普通的CNN对象分类网络几乎没有本","date":"2022-05-27T16:14:59.488Z","objectID":"9da833e02431b4d209ed558af6d41e1f_2","order":2,"summary":"trained on natural images and tested on art- work, YOLO outperforms top detection methods like DPM and R-CNN by a wide margin.Our system models detection as a regression problem. It divides the image into an S × S grid and for each grid cell predicts B bounding boxes, confidence for those boxes, and C class probabilities. These predictions are encoded as an S × S × (B ∗ 5 + C) tensor.实现方案：Link，大致下面这个区域，因为都是原文摘抄，所以不全部复制了。1）结构 去掉候选区这个步骤以后，YOLO的结构非常简单，就是单纯的卷积、池化最后加了两层全连接。单看网络结构的话，和普通的CNN对象分类网络几乎没有本","tags":["ComputerVision"],"title":"YOLOv1初体验","url":"https://keepjolly.com/archives/yolov1-first-try/"},{"categories":["learn"],"content":"质的区别，最大的差异是最后输出层用线性函数做激活函数，因为需要预测bounding box的位置（数值型），而不仅仅是对象的概率。所以粗略来说，YOLO的整个结构就是输入图片经过神经网络的变换得到一个输出的张量，如下图所示。另外文中将图片resize为448*448，一些图片会发生很大的变形，所以尽量训练数据和测试数据分布保持一致。 YOLO并没有预先设置2个bounding box的大小和形状，也没有对每个bounding box分别输出一个对象的预测。它的意思仅仅是对一个对象预测出2个bounding box，选择预测得相对比较准的那个。这里采用2个bounding box，有点不完全算监督算法，而是像进化算法。如果是监督算法，我们需要事先根据样本就能给出一个正确的bounding box作为回归的目标。但YOLO的2个bounding box事先并不知道会在什么位置，只有经过前向计算，网络会输出2个bounding box，这两个bounding box与样本中对象实际的bounding box计算IOU。这时才能确定，IOU值大的那个bounding box，作为负责预测该对象","date":"2022-05-27T16:14:59.488Z","objectID":"9da833e02431b4d209ed558af6d41e1f_3","order":3,"summary":"质的区别，最大的差异是最后输出层用线性函数做激活函数，因为需要预测bounding box的位置（数值型），而不仅仅是对象的概率。所以粗略来说，YOLO的整个结构就是输入图片经过神经网络的变换得到一个输出的张量，如下图所示。另外文中将图片resize为448*448，一些图片会发生很大的变形，所以尽量训练数据和测试数据分布保持一致。 YOLO并没有预先设置2个bounding box的大小和形状，也没有对每个bounding box分别输出一个对象的预测。它的意思仅仅是对一个对象预测出2个bounding box，选择预测得相对比较准的那个。这里采用2个bounding box，有点不完全算监督算法，而是像进化算法。如果是监督算法，我们需要事先根据样本就能给出一个正确的bounding box作为回归的目标。但YOLO的2个bounding box事先并不知道会在什么位置，只有经过前向计算，网络会输出2个bounding box，这两个bounding box与样本中对象实际的bounding box计算IOU。这时才能确定，IOU值大的那个bounding box，作为负责预测该对象","tags":["ComputerVision"],"title":"YOLOv1初体验","url":"https://keepjolly.com/archives/yolov1-first-try/"},{"categories":["learn"],"content":"的bounding box。 训练开始阶段，网络预测的bounding box可能都是乱来的，但总是选择IOU相对好一些的那个，随着训练的进行，每个bounding box会逐渐擅长对某些情况的预测（可能是对象大小、宽高比、不同类型的对象等）。所以，这是一种进化或者非监督学习的思想。 responsible： We assign one predictor to be “responsible” for predicting an object based on which prediction has the highest current IOU with the ground truth. This leads to specialization between the bounding box predictors. Each predictor gets better at predicting certain sizes, aspect ratios, or classes of object, improving overall recall. 设网格数量为 SS，每个网","date":"2022-05-27T16:14:59.488Z","objectID":"9da833e02431b4d209ed558af6d41e1f_4","order":4,"summary":"的bounding box。 训练开始阶段，网络预测的bounding box可能都是乱来的，但总是选择IOU相对好一些的那个，随着训练的进行，每个bounding box会逐渐擅长对某些情况的预测（可能是对象大小、宽高比、不同类型的对象等）。所以，这是一种进化或者非监督学习的思想。 responsible： We assign one predictor to be “responsible” for predicting an object based on which prediction has the highest current IOU with the ground truth. This leads to specialization between the bounding box predictors. Each predictor gets better at predicting certain sizes, aspect ratios, or classes of object, improving overall recall. 设网格数量为 SS，每个网","tags":["ComputerVision"],"title":"YOLOv1初体验","url":"https://keepjolly.com/archives/yolov1-first-try/"},{"categories":["learn"],"content":"格产生B个边框，数据集包含C个不同的对象。这时，输出的长度为：$(C+B(4+1))SS$ 论文关键部分翻译：Unified Detection We unify the separate components of object detection into a single neural network. Our network uses features from the entire image to predict each bounding box. It also predicts all bounding boxes across all classes for an image simultaneously. This means our network reasons globally about the full image and all the objects in the image. The YOLO design enables end-to-end training and realtime speeds while maintaining high ","date":"2022-05-27T16:14:59.488Z","objectID":"9da833e02431b4d209ed558af6d41e1f_5","order":5,"summary":"格产生B个边框，数据集包含C个不同的对象。这时，输出的长度为：$(C+B(4+1))SS$ 论文关键部分翻译：Unified Detection We unify the separate components of object detection into a single neural network. Our network uses features from the entire image to predict each bounding box. It also predicts all bounding boxes across all classes for an image simultaneously. This means our network reasons globally about the full image and all the objects in the image. The YOLO design enables end-to-end training and realtime speeds while maintaining high ","tags":["ComputerVision"],"title":"YOLOv1初体验","url":"https://keepjolly.com/archives/yolov1-first-try/"},{"categories":["learn"],"content":"average precision.我们将目标检测的不同组件整合到一个神经网络中。我们的网络使用整张图片的特征来预测每一个边界框。它还同时预测图像的所有类中的每一个边界框。这表示我们的网络全局推理整张图片和图片上的所有对象。YOLO的设计可以进行端到端训练和达到实时的速度并且保持相对高的准确度。 Our system divides the input image into an_ S _× S grid. If the center of an object falls into a grid cell, that grid cell is responsible for detecting that object.我们的系统将输入图片分成S×S的网格。如果一个对象的中心点落在某个网格内，则这个网格负责预测这个对象。（计算出该Object的bounding box的中心位置，这个中心位置落在哪个grid，该grid对应的输出向量中该对象的类别概率是1（该gird负责预测该对象），所有其它grid对该Object的预测概率设为0（不负责预测该对象）参考网址。另外最多能检测出S*S个物体","date":"2022-05-27T16:14:59.488Z","objectID":"9da833e02431b4d209ed558af6d41e1f_6","order":6,"summary":"average precision.我们将目标检测的不同组件整合到一个神经网络中。我们的网络使用整张图片的特征来预测每一个边界框。它还同时预测图像的所有类中的每一个边界框。这表示我们的网络全局推理整张图片和图片上的所有对象。YOLO的设计可以进行端到端训练和达到实时的速度并且保持相对高的准确度。 Our system divides the input image into an_ S _× S grid. If the center of an object falls into a grid cell, that grid cell is responsible for detecting that object.我们的系统将输入图片分成S×S的网格。如果一个对象的中心点落在某个网格内，则这个网格负责预测这个对象。（计算出该Object的bounding box的中心位置，这个中心位置落在哪个grid，该grid对应的输出向量中该对象的类别概率是1（该gird负责预测该对象），所有其它grid对该Object的预测概率设为0（不负责预测该对象）参考网址。另外最多能检测出S*S个物体","tags":["ComputerVision"],"title":"YOLOv1初体验","url":"https://keepjolly.com/archives/yolov1-first-try/"},{"categories":["learn"],"content":"，如果每个物体的中心点在每个网格内） Each grid cell predicts B bounding boxes and confidence scores for those boxes. These confidence scores reflect how confident the model is that the box contains an object and also how accurate it thinks the box is that it predicts. Formally we define confidence as $\\operatorname{Pr}(\\text { Object }) * \\mathrm{IOU}_{\\text {pred }}^{\\text {truth }}$. If no object exists in that cell, the confidence scores should be zero. Otherwise we want the confidence score to equal the inter","date":"2022-05-27T16:14:59.488Z","objectID":"9da833e02431b4d209ed558af6d41e1f_7","order":7,"summary":"，如果每个物体的中心点在每个网格内） Each grid cell predicts B bounding boxes and confidence scores for those boxes. These confidence scores reflect how confident the model is that the box contains an object and also how accurate it thinks the box is that it predicts. Formally we define confidence as $\\operatorname{Pr}(\\text { Object }) * \\mathrm{IOU}_{\\text {pred }}^{\\text {truth }}$. If no object exists in that cell, the confidence scores should be zero. Otherwise we want the confidence score to equal the inter","tags":["ComputerVision"],"title":"YOLOv1初体验","url":"https://keepjolly.com/archives/yolov1-first-try/"},{"categories":["learn"],"content":"section over union (IOU) between the predicted box and the ground truth.每个网格预测B个bboxes和这些boxes的置信度。其中置信度反映了模型对这个box包含对象的信任度和模型认为这个box预测有无对象的准确度。我们定义置信度为有无对象的预测值（非0即1）* truth box和pred box的交并比。如果没有object在网格内，则置信度应为0. 否则我们将置信度等于预测框和真实框的交并比。Each bounding box consists of 5 predictions: x, y, w, h,_ _and confidence. The (x, y) coordinates represent the center of the box relative to the bounds of the grid cell. The width and height are predicted relative to the whole image. Finally the confidence predi","date":"2022-05-27T16:14:59.488Z","objectID":"9da833e02431b4d209ed558af6d41e1f_8","order":8,"summary":"section over union (IOU) between the predicted box and the ground truth.每个网格预测B个bboxes和这些boxes的置信度。其中置信度反映了模型对这个box包含对象的信任度和模型认为这个box预测有无对象的准确度。我们定义置信度为有无对象的预测值（非0即1）* truth box和pred box的交并比。如果没有object在网格内，则置信度应为0. 否则我们将置信度等于预测框和真实框的交并比。Each bounding box consists of 5 predictions: x, y, w, h,_ _and confidence. The (x, y) coordinates represent the center of the box relative to the bounds of the grid cell. The width and height are predicted relative to the whole image. Finally the confidence predi","tags":["ComputerVision"],"title":"YOLOv1初体验","url":"https://keepjolly.com/archives/yolov1-first-try/"},{"categories":["learn"],"content":"ction represents the IOU between the predicted box and any ground truth box.每个bbox包含5个预测值：x, y, w, h and 置信度。(x, y)表示bbox相对于网格单元格边界的中心坐标。预测的高宽相对于整张图片的高宽。最后，置信度预测表示pred and truth 的交并比Each grid cell also predicts C conditional class probabilities, $\\operatorname{Pr}\\left(\\text { Class }{i} \\mid \\text { Object }\\right)$. These probabilities are conditioned on the grid cell containing an object. We only predict one set of class probabilities per grid cell, regardless of the number of boxes B_.每个网格也预","date":"2022-05-27T16:14:59.488Z","objectID":"9da833e02431b4d209ed558af6d41e1f_9","order":9,"summary":"ction represents the IOU between the predicted box and any ground truth box.每个bbox包含5个预测值：x, y, w, h and 置信度。(x, y)表示bbox相对于网格单元格边界的中心坐标。预测的高宽相对于整张图片的高宽。最后，置信度预测表示pred and truth 的交并比Each grid cell also predicts C conditional class probabilities, $\\operatorname{Pr}\\left(\\text { Class }{i} \\mid \\text { Object }\\right)$. These probabilities are conditioned on the grid cell containing an object. We only predict one set of class probabilities per grid cell, regardless of the number of boxes B_.每个网格也预","tags":["ComputerVision"],"title":"YOLOv1初体验","url":"https://keepjolly.com/archives/yolov1-first-try/"},{"categories":["learn"],"content":"测C个条件类型概率，即存在对象时，属于某类别的概率。这些概率以网格内包含对象为条件。我们仅预测每个网格的一系列的类别概率，不管bbox的个数。（相当于每个网格只输出一个类型概率，而不会输出bbox的类别概率，bbox输出置信度） At test time we multiply the conditional class probabilities and the individual box confidence predictions, $\\begin{equation*} \\operatorname{Pr}\\left(\\text { Class }{i} \\mid \\text { Object }\\right) * \\operatorname{Pr}(\\text { Object }) * \\mathrm{IOU}{\\text {pred }}^{\\text {truth }}=\\operatorname{Pr}\\left(\\text { Class }{i}\\right) * \\mathrm{IOU}{\\text {pred }}^{\\text {truth }} \\end{e","date":"2022-05-27T16:14:59.488Z","objectID":"9da833e02431b4d209ed558af6d41e1f_10","order":10,"summary":"测C个条件类型概率，即存在对象时，属于某类别的概率。这些概率以网格内包含对象为条件。我们仅预测每个网格的一系列的类别概率，不管bbox的个数。（相当于每个网格只输出一个类型概率，而不会输出bbox的类别概率，bbox输出置信度） At test time we multiply the conditional class probabilities and the individual box confidence predictions, $\\begin{equation*} \\operatorname{Pr}\\left(\\text { Class }{i} \\mid \\text { Object }\\right) * \\operatorname{Pr}(\\text { Object }) * \\mathrm{IOU}{\\text {pred }}^{\\text {truth }}=\\operatorname{Pr}\\left(\\text { Class }{i}\\right) * \\mathrm{IOU}{\\text {pred }}^{\\text {truth }} \\end{e","tags":["ComputerVision"],"title":"YOLOv1初体验","url":"https://keepjolly.com/archives/yolov1-first-try/"},{"categories":["learn"],"content":"在网上翻看许多，都是只讲定义，不讲过程，故我根据一道题目来详细介绍如何进行腐蚀运算，膨胀运算与腐蚀运算差不多就不多加赘述了。 题目如下： 程序如下：1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 import numpy as np import cv2 A = np.array( [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], np.uint8) Ac = 1 - A print(","date":"2022-05-10T20:04:00.648Z","objectID":"82230d1b28088951c3d551633a7884ae_0","order":0,"summary":"在网上翻看许多，都是只讲定义，不讲过程，故我根据一道题目来详细介绍如何进行腐蚀运算，膨胀运算与腐蚀运算差不多就不多加赘述了。 题目如下： 程序如下：1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 import numpy as np import cv2 A = np.array( [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], np.uint8) Ac = 1 - A print(","tags":["Python","ComputerVision"],"title":"形态学--腐蚀运算详细过程","url":"https://keepjolly.com/archives/morphology-erosion/"},{"categories":["learn"],"content":"A) print(Ac) # print(np.pad(Ac, (1, 1), mode='constant', constant_values=(1, 1))) print() T1 = np.array([[0, 1, 0], [1, 1, 1], [0, 1, 0]], np.uint8) T2 = np.array([[1, 0, 1], [0, 0, 0], [1, 0, 1]], np.uint8) img1 = cv2.erode(A, T1) # 事实上这里是cv2.erode(Ac, T2, borderValue=1) img2 = cv2.erode(Ac, T2) print(img1) print(img2) print() print(img1 \u0026 img2) 产生img1 首先讲img1是如何出来的。（安利一个截图神器，snipaste） 图片我个人感觉很清晰了，除了有点乱。顺序从红色字→绿色字→蓝色字→紫色字→白色字疑问解决： Eroding and Dilating cv2.erode参数解释 如果无指定，默认为结构元素中点产生img2 接下来是img","date":"2022-05-10T20:04:00.648Z","objectID":"82230d1b28088951c3d551633a7884ae_1","order":1,"summary":"A) print(Ac) # print(np.pad(Ac, (1, 1), mode='constant', constant_values=(1, 1))) print() T1 = np.array([[0, 1, 0], [1, 1, 1], [0, 1, 0]], np.uint8) T2 = np.array([[1, 0, 1], [0, 0, 0], [1, 0, 1]], np.uint8) img1 = cv2.erode(A, T1) # 事实上这里是cv2.erode(Ac, T2, borderValue=1) img2 = cv2.erode(Ac, T2) print(img1) print(img2) print() print(img1 \u0026 img2) 产生img1 首先讲img1是如何出来的。（安利一个截图神器，snipaste） 图片我个人感觉很清晰了，除了有点乱。顺序从红色字→绿色字→蓝色字→紫色字→白色字疑问解决： Eroding and Dilating cv2.erode参数解释 如果无指定，默认为结构元素中点产生img2 接下来是img","tags":["Python","ComputerVision"],"title":"形态学--腐蚀运算详细过程","url":"https://keepjolly.com/archives/morphology-erosion/"},{"categories":["algorithm"],"content":"至此一个月全部打卡，之后按专题来进行提高随机数索引 随机数索引1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 # 暴力 class Solution: def __init__(self, nums: List[int]): self.nums = nums def pick(self, target: int) -\u003e int: dic = {} # 新建字典 key:int value:list for i, num in enumerate(self.nums): if num in dic: dic[num].append(i) continue dic[num] = [i] return random.choice(dic[target]) # 水塘抽样 # https://zhuanlan.zhihu.com/p/29178293 class Solu","date":"2022-04-30T14:50:31.527Z","objectID":"c196de53c23604da6ab84c0413289905_0","order":0,"summary":"至此一个月全部打卡，之后按专题来进行提高随机数索引 随机数索引1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 # 暴力 class Solution: def __init__(self, nums: List[int]): self.nums = nums def pick(self, target: int) -\u003e int: dic = {} # 新建字典 key:int value:list for i, num in enumerate(self.nums): if num in dic: dic[num].append(i) continue dic[num] = [i] return random.choice(dic[target]) # 水塘抽样 # https://zhuanlan.zhihu.com/p/29178293 class Solu","tags":["LeetCode"],"title":"(leetcode) 一周六题","url":"https://keepjolly.com/archives/leetcode-one-week-six-ans/"},{"categories":["algorithm"],"content":"tion: def __init__(self, nums: List[int]): self.nums = nums def pick(self, target: int) -\u003e int: cnt, ans = 0, 0 for i, num in enumerate(self.nums): if num == target: cnt += 1 if random.randrange(cnt) == 0: ans = i return ans # 随机抽k个 # 仅供参考 def ReservoirSampling(nums, target, k): res = [0]*k idx = 0 for i, num in enumerate(nums): if target == num: res[idx] = i idx += 1 if idx == k: break cnt = k for i in range(res[idx-1], len(nums)): if nums[i] == target: cnt += 1 ran = random.randrange(cnt) if r","date":"2022-04-30T14:50:31.527Z","objectID":"c196de53c23604da6ab84c0413289905_1","order":1,"summary":"tion: def __init__(self, nums: List[int]): self.nums = nums def pick(self, target: int) -\u003e int: cnt, ans = 0, 0 for i, num in enumerate(self.nums): if num == target: cnt += 1 if random.randrange(cnt) == 0: ans = i return ans # 随机抽k个 # 仅供参考 def ReservoirSampling(nums, target, k): res = [0]*k idx = 0 for i, num in enumerate(nums): if target == num: res[idx] = i idx += 1 if idx == k: break cnt = k for i in range(res[idx-1], len(nums)): if nums[i] == target: cnt += 1 ran = random.randrange(cnt) if r","tags":["LeetCode"],"title":"(leetcode) 一周六题","url":"https://keepjolly.com/archives/leetcode-one-week-six-ans/"},{"categories":["algorithm"],"content":"最常见的单词 最常见的单词1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 # 自己写的水代码 def mostCommonWord(paragraph, banned): s, ss = '', [] # 将字符串转成小写字母 paragraph = paragraph.lower() for i in range(len(banned)): banned[i] = banned[i].lower() # 判断是否是最后一个字符，最后一个字符没有空格或其他符号 flag = 1 for i in paragraph: if 'a' \u0026lt;= i \u0026lt;= 'z': flag = 1 s += i continue flag = 0 # 将bob,中','造成的''删除 if s: ss.append(s) s = '' # 最后一个字符串加入数组","date":"2022-04-24T14:27:55.812Z","objectID":"daf5d1345d431d39972b0af0068744dc_0","order":0,"summary":"最常见的单词 最常见的单词1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 # 自己写的水代码 def mostCommonWord(paragraph, banned): s, ss = '', [] # 将字符串转成小写字母 paragraph = paragraph.lower() for i in range(len(banned)): banned[i] = banned[i].lower() # 判断是否是最后一个字符，最后一个字符没有空格或其他符号 flag = 1 for i in paragraph: if 'a' \u0026lt;= i \u0026lt;= 'z': flag = 1 s += i continue flag = 0 # 将bob,中','造成的''删除 if s: ss.append(s) s = '' # 最后一个字符串加入数组","tags":["Python","LeetCode"],"title":"(leetcode) 一周七题","url":"https://keepjolly.com/archives/leetcode-week-1/"},{"categories":["algorithm"],"content":" if flag: ss.append(s) c = Counter(ss) for i in range(len(banned) + 1): # 获取最大值 ans = max(c.keys(), key=c.get) if ans in banned: del c[ans] else: return ans # 官解 def mostCommonWord(paragraph, banned): ban = set(banned) freq = Counter() word, n = \"\", len(paragraph) # 获取字符串模板，'Bob like Joe'=\u003e[Bob, like, Joe] # n+1 排除了单词结尾的情况 for i in range(n + 1): # i\u0026lt;n 使得paragraph[i]不会越界 if i \u0026lt; n and paragraph[i].isalpha(): word += paragraph[i].lower() elif word: if word not in ban: freq[word] += 1 word = \"","date":"2022-04-24T14:27:55.812Z","objectID":"daf5d1345d431d39972b0af0068744dc_1","order":1,"summary":" if flag: ss.append(s) c = Counter(ss) for i in range(len(banned) + 1): # 获取最大值 ans = max(c.keys(), key=c.get) if ans in banned: del c[ans] else: return ans # 官解 def mostCommonWord(paragraph, banned): ban = set(banned) freq = Counter() word, n = \"\", len(paragraph) # 获取字符串模板，'Bob like Joe'=\u003e[Bob, like, Joe] # n+1 排除了单词结尾的情况 for i in range(n + 1): # i\u0026lt;n 使得paragraph[i]不会越界 if i \u0026lt; n and paragraph[i].isalpha(): word += paragraph[i].lower() elif word: if word not in ban: freq[word] += 1 word = \"","tags":["Python","LeetCode"],"title":"(leetcode) 一周七题","url":"https://keepjolly.com/archives/leetcode-week-1/"},{"categories":["algorithm"],"content":"\" maxFreq = max(freq.values()) return next(word for word, f in freq.items() if f == maxFreq) # 一行 # https://leetcode-cn.com/problems/most-common-word/solution/by-jam007-3la9/ def mostCommonWord(self, paragraph: str, banned: List[str]) -\u003e str: return Counter(w for w in re.findall(r'\\w+', paragraph.lower()) if w not in set(banned)).most_common(1)[0][0] 字典序排数 字典序排数1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 # 官解 def lexicalOrder(n: int) -\u003e List[int]: ans = [0","date":"2022-04-24T14:27:55.812Z","objectID":"daf5d1345d431d39972b0af0068744dc_2","order":2,"summary":"\" maxFreq = max(freq.values()) return next(word for word, f in freq.items() if f == maxFreq) # 一行 # https://leetcode-cn.com/problems/most-common-word/solution/by-jam007-3la9/ def mostCommonWord(self, paragraph: str, banned: List[str]) -\u003e str: return Counter(w for w in re.findall(r'\\w+', paragraph.lower()) if w not in set(banned)).most_common(1)[0][0] 字典序排数 字典序排数1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 # 官解 def lexicalOrder(n: int) -\u003e List[int]: ans = [0","tags":["Python","LeetCode"],"title":"(leetcode) 一周七题","url":"https://keepjolly.com/archives/leetcode-week-1/"},{"categories":["algorithm"],"content":"] * n num = 1 for i in range(n): ans[i] = num if num * 10 \u0026lt;= n: # 保存1 100 1000 num *= 10 else: # num % 10 = 9是判断尾数是否到头，因为再加1则变为10，到头则使num变为9 # num + 1 \u003e n：+1是为了后面的num+=1，并且判断num是不是超过了n，超过则使num//10 while num % 10 == 9 or num + 1 \u003e n: num //= 10 # 使num复原 num += 1 return ans # dfs # https://leetcode-cn.com/problems/lexicographical-numbers/solution/by-ac_oier-ktn7/ def lexicalOrder(n: int) -\u003e List[int]: ans = [] def dfs(num, limit): if num \u003e limit: return ans.append(num) for i in range(10): dfs(n","date":"2022-04-24T14:27:55.812Z","objectID":"daf5d1345d431d39972b0af0068744dc_3","order":3,"summary":"] * n num = 1 for i in range(n): ans[i] = num if num * 10 \u0026lt;= n: # 保存1 100 1000 num *= 10 else: # num % 10 = 9是判断尾数是否到头，因为再加1则变为10，到头则使num变为9 # num + 1 \u003e n：+1是为了后面的num+=1，并且判断num是不是超过了n，超过则使num//10 while num % 10 == 9 or num + 1 \u003e n: num //= 10 # 使num复原 num += 1 return ans # dfs # https://leetcode-cn.com/problems/lexicographical-numbers/solution/by-ac_oier-ktn7/ def lexicalOrder(n: int) -\u003e List[int]: ans = [] def dfs(num, limit): if num \u003e limit: return ans.append(num) for i in range(10): dfs(n","tags":["Python","LeetCode"],"title":"(leetcode) 一周七题","url":"https://keepjolly.com/archives/leetcode-week-1/"},{"categories":["algorithm"],"content":"um * 10 + i, limit) for i in range(1, 10): dfs(i, n) return ans # 库函数 def lexicalOrder(self, n: int) -\u003e List[int]: return sorted(range(1,n+1),key=str) 字符的最短距离 字符的最短距离1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 # 官解的-n、2*n 秒啊 def shortestToChar(s: str, c: str) -\u003e List[int]: ans = [0] * len(s) idx = -1 for i in range(len(s)): if s[i] == c: idx = i if idx \u003e= 0: ans[i] = abs(i-idx","date":"2022-04-24T14:27:55.812Z","objectID":"daf5d1345d431d39972b0af0068744dc_4","order":4,"summary":"um * 10 + i, limit) for i in range(1, 10): dfs(i, n) return ans # 库函数 def lexicalOrder(self, n: int) -\u003e List[int]: return sorted(range(1,n+1),key=str) 字符的最短距离 字符的最短距离1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 # 官解的-n、2*n 秒啊 def shortestToChar(s: str, c: str) -\u003e List[int]: ans = [0] * len(s) idx = -1 for i in range(len(s)): if s[i] == c: idx = i if idx \u003e= 0: ans[i] = abs(i-idx","tags":["Python","LeetCode"],"title":"(leetcode) 一周七题","url":"https://keepjolly.com/archives/leetcode-week-1/"},{"categories":["tech"],"content":"下载软件 准备工作：下载夜神模拟器、下载“安卓终端模拟器”apk文件、下载“豌豆荚”apk文件 将透明图片或者半透明图片移入夜神模拟器，（途中可能需要文件管理器的权限，直接允许即可）安装apk文件 将apk文件拖入夜神模拟器中，安装安卓终端模拟器、豌豆荚。注意，夜神模拟器需要安卓5.0版本的，7.0没试过，可以尝试一下下载微信 豌豆荚的历史版本在微信的下载页面最下面，如果是mumu模拟器可能无法显示，需要点击安装/下载才会显示 在豌豆荚中下载8.06版本的微信，（只要能安装并且登录的就行，如果你是安卓5.0版本的，不能安装最新版微信） 安装好微信后，登录并且新设备需要接受短信（登陆的时候用鼠标点击输入框，不要用tab键或其他，可能输入没反应）进行移花接木 打开安卓终端模拟器 输入“su”回车，再输入“pm uninstall -k com.tencent.mm”回车，如果无响应，新建一个窗口，或者点击那个灰色竖条 在win+r后输入adb shell pm uninstall -k com.tencent.mm.点击确定 此时微信已经卸载，并且已经保存登录状态下载旧版本微信 在豌豆荚下","date":"2022-04-16T21:34:50.282Z","objectID":"6f6f28ee0dbca407972f3b3d504bf7a7_0","order":0,"summary":"下载软件 准备工作：下载夜神模拟器、下载“安卓终端模拟器”apk文件、下载“豌豆荚”apk文件 将透明图片或者半透明图片移入夜神模拟器，（途中可能需要文件管理器的权限，直接允许即可）安装apk文件 将apk文件拖入夜神模拟器中，安装安卓终端模拟器、豌豆荚。注意，夜神模拟器需要安卓5.0版本的，7.0没试过，可以尝试一下下载微信 豌豆荚的历史版本在微信的下载页面最下面，如果是mumu模拟器可能无法显示，需要点击安装/下载才会显示 在豌豆荚中下载8.06版本的微信，（只要能安装并且登录的就行，如果你是安卓5.0版本的，不能安装最新版微信） 安装好微信后，登录并且新设备需要接受短信（登陆的时候用鼠标点击输入框，不要用tab键或其他，可能输入没反应）进行移花接木 打开安卓终端模拟器 输入“su”回车，再输入“pm uninstall -k com.tencent.mm”回车，如果无响应，新建一个窗口，或者点击那个灰色竖条 在win+r后输入adb shell pm uninstall -k com.tencent.mm.点击确定 此时微信已经卸载，并且已经保存登录状态下载旧版本微信 在豌豆荚下","tags":[null],"title":"微信头像透明or半透明","url":"https://keepjolly.com/archives/wei-xin-tou-xiang-tou-ming-or-ban-tou-ming/"},{"categories":["tech"],"content":"载7.0.9版本的微信，安装完后点击打开即可进行切换头像，将你放入的头像用触摸板两指放大或者ctrl+鼠标滚轮放大，放着上下移动都可以，多试试就能出来透明头像 tips：如果是黑字透明底，更换头像的时候无法显示。 非透明建议改成其他颜色，并且区域小一点，否则放大容易超出头像框 iphone手机免疫一切透明 参考链接： https://zhuanlan.zhihu.com/p/473839446 另一个办法，比较繁琐，成功率较低：https://zhuanlan.zhihu.com/p/445720417","date":"2022-04-16T21:34:50.282Z","objectID":"6f6f28ee0dbca407972f3b3d504bf7a7_1","order":1,"summary":"载7.0.9版本的微信，安装完后点击打开即可进行切换头像，将你放入的头像用触摸板两指放大或者ctrl+鼠标滚轮放大，放着上下移动都可以，多试试就能出来透明头像 tips：如果是黑字透明底，更换头像的时候无法显示。 非透明建议改成其他颜色，并且区域小一点，否则放大容易超出头像框 iphone手机免疫一切透明 参考链接： https://zhuanlan.zhihu.com/p/473839446 另一个办法，比较繁琐，成功率较低：https://zhuanlan.zhihu.com/p/445720417","tags":[null],"title":"微信头像透明or半透明","url":"https://keepjolly.com/archives/wei-xin-tou-xiang-tou-ming-or-ban-tou-ming/"},{"categories":["algorithm"],"content":"O(1) 时间插入、删除和获取随机元素 O(1) 时间插入、删除和获取随机元素1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 # 暴力 class RandomizedSet(object): def __init__(self): self.list = [] def insert(self, val): if val not in self.list: self.list.append(val) return True return False def remove(self, val): if val not in self.list: return False self.list.remove(val) return True def ","date":"2022-04-16T16:41:20.711Z","objectID":"71e42c7b364b58c2b8932ab28c377648_0","order":0,"summary":"O(1) 时间插入、删除和获取随机元素 O(1) 时间插入、删除和获取随机元素1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 # 暴力 class RandomizedSet(object): def __init__(self): self.list = [] def insert(self, val): if val not in self.list: self.list.append(val) return True return False def remove(self, val): if val not in self.list: return False self.list.remove(val) return True def ","tags":["Python","LeetCode"],"title":"(leetcode) 四日四题","url":"https://keepjolly.com/archives/leetcode-four-day-four-ans/"},{"categories":["algorithm"],"content":"getRandom(self): return choice(self.list) # list + 哈希表 # 执行用时：620 ms # 内存消耗：49.4 MB class RandomizedSet: def __init__(self): self.nums = [] self.indices = {} def insert(self, val: int) -\u003e bool: if val in self.nums: return False # len(nums) 下标从0开始 self.indices[val] = len(self.nums) self.nums.append(val) return True def remove(self, val: int) -\u003e bool: if val not in self.nums: return False # 将val放在list末尾后，防止移动 idx = self.indices[val] self.nums[idx] = self.nums[-1] # 先修改indices再删除nums的元素，防止index out","date":"2022-04-16T16:41:20.711Z","objectID":"71e42c7b364b58c2b8932ab28c377648_1","order":1,"summary":"getRandom(self): return choice(self.list) # list + 哈希表 # 执行用时：620 ms # 内存消耗：49.4 MB class RandomizedSet: def __init__(self): self.nums = [] self.indices = {} def insert(self, val: int) -\u003e bool: if val in self.nums: return False # len(nums) 下标从0开始 self.indices[val] = len(self.nums) self.nums.append(val) return True def remove(self, val: int) -\u003e bool: if val not in self.nums: return False # 将val放在list末尾后，防止移动 idx = self.indices[val] self.nums[idx] = self.nums[-1] # 先修改indices再删除nums的元素，防止index out","tags":["Python","LeetCode"],"title":"(leetcode) 四日四题","url":"https://keepjolly.com/archives/leetcode-four-day-four-ans/"},{"categories":["algorithm"],"content":" of range self.indices[self.nums[idx]] = idx self.nums.pop() return True def getRandom(self) -\u003e int: return choice(self.nums) # 使用set 效率与上面差不多 # 执行用时: 532 ms # 内存消耗: 49.5 MB class RandomizedSet: def __init__(self): self.nums = set() def insert(self, val: int) -\u003e bool: if val in self.nums: return False self.nums.add(val) return True def remove(self, val: int) -\u003e bool: if val not in self.nums: return False self.nums.remove(val) return True def getRandom(self) -\u003e int: return choice(list(self.nums))","date":"2022-04-16T16:41:20.711Z","objectID":"71e42c7b364b58c2b8932ab28c377648_2","order":2,"summary":" of range self.indices[self.nums[idx]] = idx self.nums.pop() return True def getRandom(self) -\u003e int: return choice(self.nums) # 使用set 效率与上面差不多 # 执行用时: 532 ms # 内存消耗: 49.5 MB class RandomizedSet: def __init__(self): self.nums = set() def insert(self, val: int) -\u003e bool: if val in self.nums: return False self.nums.add(val) return True def remove(self, val: int) -\u003e bool: if val not in self.nums: return False self.nums.remove(val) return True def getRandom(self) -\u003e int: return choice(list(self.nums))","tags":["Python","LeetCode"],"title":"(leetcode) 四日四题","url":"https://keepjolly.com/archives/leetcode-four-day-four-ans/"},{"categories":["algorithm"],"content":"到达终点 到达终点1 2 3 4 5 6 7 8 9 10 11 12 13 14 # 摘自评论 # https://leetcode-cn.com/problems/reaching-points/comments/85185 def reachingPoints(self, sx, sy, tx, ty): while tx \u003e 0 and ty \u003e 0: if tx == sx and ty == sy: return True if tx \u003e ty: # tx - sx是目标与起始值在x的差距，我们需要一次减去n * ty达到快速逼近sx的目的 # 差距除于ty可以得到差距里包含多少个ty即n*ty # 我太笨了 tx -= ty * max((tx-sx)/ty, 1) else: ty -= tx * max((ty-sy)/tx, 1) return False 唯一摩尔斯密码词 唯一摩尔斯密码词1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 def uniqueMorseRepresen","date":"2022-04-13T13:04:48.387Z","objectID":"45d26dfc946ad097bb8be0775071ebd1_0","order":0,"summary":"到达终点 到达终点1 2 3 4 5 6 7 8 9 10 11 12 13 14 # 摘自评论 # https://leetcode-cn.com/problems/reaching-points/comments/85185 def reachingPoints(self, sx, sy, tx, ty): while tx \u003e 0 and ty \u003e 0: if tx == sx and ty == sy: return True if tx \u003e ty: # tx - sx是目标与起始值在x的差距，我们需要一次减去n * ty达到快速逼近sx的目的 # 差距除于ty可以得到差距里包含多少个ty即n*ty # 我太笨了 tx -= ty * max((tx-sx)/ty, 1) else: ty -= tx * max((ty-sy)/tx, 1) return False 唯一摩尔斯密码词 唯一摩尔斯密码词1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 def uniqueMorseRepresen","tags":null,"title":"(leetcode) 四日四题","url":"https://keepjolly.com/archives/leetcode-si-ri-si-ti/"},{"categories":["algorithm"],"content":"tations(self, words): Mose =[\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\", \".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\", \"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"] translate = [] for word in words: strs = '' for c in word: idx = ord(c) - ord('a') strs += Mose[idx] translate.append(strs) count = Counter(translate) return len(count) # 利用set元素不重复 class Solution(object): def uniqueMorseRepresentations(self, words): mos =[\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\".","date":"2022-04-13T13:04:48.387Z","objectID":"45d26dfc946ad097bb8be0775071ebd1_1","order":1,"summary":"tations(self, words): Mose =[\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\", \".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\", \"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"] translate = [] for word in words: strs = '' for c in word: idx = ord(c) - ord('a') strs += Mose[idx] translate.append(strs) count = Counter(translate) return len(count) # 利用set元素不重复 class Solution(object): def uniqueMorseRepresentations(self, words): mos =[\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\".","tags":null,"title":"(leetcode) 四日四题","url":"https://keepjolly.com/archives/leetcode-si-ri-si-ti/"},{"categories":["algorithm"],"content":".\", \".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\", \"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"] ans = set() for w in words: t = \"\".join([mos[ord(letter)-ord('a')] for letter in w]) ans.add(t) return len(ans) 统计各位数字都不同的数字个数 统计各位数字都不同的数字个数 Linkn=0，数字有{0} 1个。 n=1，数字有{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} 10个。 n=2，数字包括两部分之和，一部分为n=1的所有10个答案，另一部分为长度为2的新增数字。长度为2的新增数字可以在n=1的所有9个数字基础上进行拼接（0不能算）。例如： 从n=1的数字列表{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}中随便取出一个除0以外的数字（因为0不能作为起始数字！），我们取2好了。通过在2的尾巴处拼接一位数字可以得到新的合法数字","date":"2022-04-13T13:04:48.387Z","objectID":"45d26dfc946ad097bb8be0775071ebd1_2","order":2,"summary":".\", \".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\", \"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"] ans = set() for w in words: t = \"\".join([mos[ord(letter)-ord('a')] for letter in w]) ans.add(t) return len(ans) 统计各位数字都不同的数字个数 统计各位数字都不同的数字个数 Linkn=0，数字有{0} 1个。 n=1，数字有{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} 10个。 n=2，数字包括两部分之和，一部分为n=1的所有10个答案，另一部分为长度为2的新增数字。长度为2的新增数字可以在n=1的所有9个数字基础上进行拼接（0不能算）。例如： 从n=1的数字列表{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}中随便取出一个除0以外的数字（因为0不能作为起始数字！），我们取2好了。通过在2的尾巴处拼接一位数字可以得到新的合法数字","tags":null,"title":"(leetcode) 四日四题","url":"https://keepjolly.com/archives/leetcode-si-ri-si-ti/"},{"categories":["algorithm"],"content":"二进制表示中质数个计算置位 二进制表示中质数个计算置位 [Link](https://leetcode-cn.com/problems/prime-number-of-set-bits-in-binary-representation/solution/ Link 1，计算整数x的二进制表示有多少个1： x\u0026=x-1可以消除x最低位的1，while循环计数，直到x=0即可。 2，只保留整数x最低位的1： x\u0026-x ，暨鼎鼎大名的lowbit \u003e\u003e1 相当于除2，\u0026lt;\u0026lt;1相当与乘2，因为一位相当于2^11 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 # 暴力，但忘记素数怎么求 def check(x): cnt = 0 while x != 0: x -= x \u0026 -x # x \u0026 -x cnt += 1 return isPrime(cnt) def isPrime(x): if x \u0026lt; 2: return False for i in range(2","date":"2022-04-12T10:45:54.126Z","objectID":"5912ab09f3551a8b213ca598c80e9c46_0","order":0,"summary":"二进制表示中质数个计算置位 二进制表示中质数个计算置位 [Link](https://leetcode-cn.com/problems/prime-number-of-set-bits-in-binary-representation/solution/ Link 1，计算整数x的二进制表示有多少个1： x\u0026=x-1可以消除x最低位的1，while循环计数，直到x=0即可。 2，只保留整数x最低位的1： x\u0026-x ，暨鼎鼎大名的lowbit \u003e\u003e1 相当于除2，\u0026lt;\u0026lt;1相当与乘2，因为一位相当于2^11 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 # 暴力，但忘记素数怎么求 def check(x): cnt = 0 while x != 0: x -= x \u0026 -x # x \u0026 -x cnt += 1 return isPrime(cnt) def isPrime(x): if x \u0026lt; 2: return False for i in range(2","tags":["Python","LeetCode"],"title":"(leetcode) 四日四题","url":"https://keepjolly.com/archives/leetcode-four-day-four-answer-1/"},{"categories":["algorithm"],"content":", int(x**0.5)+1): # 优化循环次数 if x % i == 0: return False return True def countPrimeSetBits(left, right): ans = 0 for i in range(left, right + 1): if check(i): ans += 1 return ans # python库 def countPrimeSetBits(left, right): prime = (2, 3, 5, 7, 11, 13, 17, 19) # 因为right最大不超过20位 return sum(bin(i).count('1') in prime for i in range(left, right + 1)) # 10100010100010101100存储上述素数 # 当x中1的个数与该数求\u0026不为0，则说明1的个数在上述素数组合内 # python3 def countPrimeSetBits(left, right): return sum(((1 \u0026lt;\u0026lt; x.bit_count()) \u0026 6","date":"2022-04-12T10:45:54.126Z","objectID":"5912ab09f3551a8b213ca598c80e9c46_1","order":1,"summary":", int(x**0.5)+1): # 优化循环次数 if x % i == 0: return False return True def countPrimeSetBits(left, right): ans = 0 for i in range(left, right + 1): if check(i): ans += 1 return ans # python库 def countPrimeSetBits(left, right): prime = (2, 3, 5, 7, 11, 13, 17, 19) # 因为right最大不超过20位 return sum(bin(i).count('1') in prime for i in range(left, right + 1)) # 10100010100010101100存储上述素数 # 当x中1的个数与该数求\u0026不为0，则说明1的个数在上述素数组合内 # python3 def countPrimeSetBits(left, right): return sum(((1 \u0026lt;\u0026lt; x.bit_count()) \u0026 6","tags":["Python","LeetCode"],"title":"(leetcode) 四日四题","url":"https://keepjolly.com/archives/leetcode-four-day-four-answer-1/"},{"categories":["algorithm"],"content":"二倍数对数组 二倍数对数组 思路就是 使得每一个奇数位置的值均是前一个位置的值的两倍，即凑成 n/2 对元素形如 (x, 2 * x) 的数对。1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 # 利用python的Counter，计算每一个值的个数 # 只需要通过arr[2 * i + 1] = 2 * arr[2 * i] 是否符合即可 def canReorderDoubled(arr): cnt = Counter(arr) if cnt[0] % 2: # 如果0为奇数，则必不可能满足 return False print(sorted(cnt, key=abs)) for i in sorted(cnt, key=abs): if cnt[i] \u003e cnt[2 * i]: return False cnt[2*i] -= cnt[i] # 将(小，大)中的大数删除，防止cnt[2*大]没有值 return True # 用两个队列 # https://","date":"2022-04-10T10:41:59.589Z","objectID":"098405c32952e3f665ab49516093dca1_0","order":0,"summary":"二倍数对数组 二倍数对数组 思路就是 使得每一个奇数位置的值均是前一个位置的值的两倍，即凑成 n/2 对元素形如 (x, 2 * x) 的数对。1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 # 利用python的Counter，计算每一个值的个数 # 只需要通过arr[2 * i + 1] = 2 * arr[2 * i] 是否符合即可 def canReorderDoubled(arr): cnt = Counter(arr) if cnt[0] % 2: # 如果0为奇数，则必不可能满足 return False print(sorted(cnt, key=abs)) for i in sorted(cnt, key=abs): if cnt[i] \u003e cnt[2 * i]: return False cnt[2*i] -= cnt[i] # 将(小，大)中的大数删除，防止cnt[2*大]没有值 return True # 用两个队列 # https://","tags":["Python","LeetCode"],"title":"(leetcode) 三日三题","url":"https://keepjolly.com/archives/leetcode-three-day-three-code-1/"},{"categories":["algorithm"],"content":"leetcode-cn.com/problems/array-of-doubled-pairs/solution/fen-jie-wei-liang-ge-dui-lie-by-mooc-3/ def canReorderDoubled(arr): q1 = [] q2 = [] arr = sorted(arr) for i in arr: if i \u0026lt; 0: if len(q1) and 2*i == q1[0]: q1.pop(0) else: q1.append(i) else: if len(q2) and i == 2*q2[0]: q2.pop(0) else: q2.append(i) if not len(q1) and not len(q2): return True return False 寻找比目标字母大的最小字母 寻找比目标字母大的最小字母 简单题重拳出击，二分法忘了😓1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 def nextGreatestLetter(self, letters, t","date":"2022-04-10T10:41:59.589Z","objectID":"098405c32952e3f665ab49516093dca1_1","order":1,"summary":"leetcode-cn.com/problems/array-of-doubled-pairs/solution/fen-jie-wei-liang-ge-dui-lie-by-mooc-3/ def canReorderDoubled(arr): q1 = [] q2 = [] arr = sorted(arr) for i in arr: if i \u0026lt; 0: if len(q1) and 2*i == q1[0]: q1.pop(0) else: q1.append(i) else: if len(q2) and i == 2*q2[0]: q2.pop(0) else: q2.append(i) if not len(q1) and not len(q2): return True return False 寻找比目标字母大的最小字母 寻找比目标字母大的最小字母 简单题重拳出击，二分法忘了😓1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 def nextGreatestLetter(self, letters, t","tags":["Python","LeetCode"],"title":"(leetcode) 三日三题","url":"https://keepjolly.com/archives/leetcode-three-day-three-code-1/"},{"categories":["algorithm"],"content":"arget): for i in letters: if ord(i)-ord(target) \u003e 0: return i return letters[0] # 二分 def nextGreatestLetter(letters, target): n = len(letters) l, r = 0, n - 1 while l \u0026lt; r: print(l, r, l + r \u003e\u003e 1, (l + r) // 2, bin(l + r)) mid = l + r \u003e\u003e 1 # l + r \u003e\u003e 1 \u0026lt;=\u003e (l + r) // 2 运算符优先级 if letters[mid] \u003e target: r = mid else: l = mid + 1 return letters[r] if letters[r] \u003e target else letters[0] # 一行 # https://leetcode-cn.com/problems/find-smallest-letter-greater-than-target/comments/1482439 def nextGre","date":"2022-04-10T10:41:59.589Z","objectID":"098405c32952e3f665ab49516093dca1_2","order":2,"summary":"arget): for i in letters: if ord(i)-ord(target) \u003e 0: return i return letters[0] # 二分 def nextGreatestLetter(letters, target): n = len(letters) l, r = 0, n - 1 while l \u0026lt; r: print(l, r, l + r \u003e\u003e 1, (l + r) // 2, bin(l + r)) mid = l + r \u003e\u003e 1 # l + r \u003e\u003e 1 \u0026lt;=\u003e (l + r) // 2 运算符优先级 if letters[mid] \u003e target: r = mid else: l = mid + 1 return letters[r] if letters[r] \u003e target else letters[0] # 一行 # https://leetcode-cn.com/problems/find-smallest-letter-greater-than-target/comments/1482439 def nextGre","tags":["Python","LeetCode"],"title":"(leetcode) 三日三题","url":"https://keepjolly.com/archives/leetcode-three-day-three-code-1/"},{"categories":["algorithm"],"content":"atestLetter(self, letters: List[str], target: str) -\u003e str: return letters[bisect.bisect(letters, target) % len(letters)] 区域和检索 - 数组可修改 区域和检索 - 数组可修改 前缀和概念：Link、Link2int n = nums.length; int[] preSum = new int[n + 1]; // 前缀和数组 preSum[0] = 0; for (int i = 0; i \u0026lt; n; i++) preSum[i + 1] = preSum[i] + nums[i];树形数组 先记住最精髓的一句话：树状数组本质是二进制规律的应用 假设现在有一个线性数组A,为了便于理解A的范围从1--8。 并构造一个数组C，范围也是1--8 接下来将C构造为那么一个树结构： 观察这棵树结构，可以发现叶子结点的二进制的最后一位为1。接下来的结点为倒数第二位为1.... 现在，我们对这棵树结构赋予其涵义：二进制 1=(001) C[1]=A[1]; 2=(010) ","date":"2022-04-10T10:41:59.589Z","objectID":"098405c32952e3f665ab49516093dca1_3","order":3,"summary":"atestLetter(self, letters: List[str], target: str) -\u003e str: return letters[bisect.bisect(letters, target) % len(letters)] 区域和检索 - 数组可修改 区域和检索 - 数组可修改 前缀和概念：Link、Link2int n = nums.length; int[] preSum = new int[n + 1]; // 前缀和数组 preSum[0] = 0; for (int i = 0; i \u0026lt; n; i++) preSum[i + 1] = preSum[i] + nums[i];树形数组 先记住最精髓的一句话：树状数组本质是二进制规律的应用 假设现在有一个线性数组A,为了便于理解A的范围从1--8。 并构造一个数组C，范围也是1--8 接下来将C构造为那么一个树结构： 观察这棵树结构，可以发现叶子结点的二进制的最后一位为1。接下来的结点为倒数第二位为1.... 现在，我们对这棵树结构赋予其涵义：二进制 1=(001) C[1]=A[1]; 2=(010) ","tags":["Python","LeetCode"],"title":"(leetcode) 三日三题","url":"https://keepjolly.com/archives/leetcode-three-day-three-code-1/"},{"categories":["algorithm"],"content":"C[2]=A[1]+A[2]; 3=(011) C[3]=A[3]; 4=(100) C[4]=A[1]+A[2]+A[3]+A[4]; 5=(101) C[5]=A[5]; 6=(110) C[6]=A[5]+A[6]; 7=(111) C[7]=A[7]; 8=(1000) C[8]=A[1]+A[2]+A[3]+A[4]+A[5]+A[6]+A[7]+A[8];这么说吧，这棵树的规律就是找出相应结点的二进制最后一位的1并该位后面的0也截出(后面会讲的lowBit函数)。 如5(101),最后一个1截出为1，那么它只有一个结点，那么他就是叶子结点。 如6(110),最后一个1截出为10，那么它这棵子树上有两个结点非常重要：而某元素的父结点为该结点6(110)加上此结点的二进制截出最后一位的1(即010)(后面会讲的lowBit函数)。 如6(110)+2(010)=8(1000)树形数组的单点元素修改和查询区间和规律 1.lowBit函数1 2 3 int lowBit(int x) { return x \u0026 -x; } 我们先需要知道lowBit函数的含义：可以用来获取某个二进制","date":"2022-04-10T10:41:59.589Z","objectID":"098405c32952e3f665ab49516093dca1_4","order":4,"summary":"C[2]=A[1]+A[2]; 3=(011) C[3]=A[3]; 4=(100) C[4]=A[1]+A[2]+A[3]+A[4]; 5=(101) C[5]=A[5]; 6=(110) C[6]=A[5]+A[6]; 7=(111) C[7]=A[7]; 8=(1000) C[8]=A[1]+A[2]+A[3]+A[4]+A[5]+A[6]+A[7]+A[8];这么说吧，这棵树的规律就是找出相应结点的二进制最后一位的1并该位后面的0也截出(后面会讲的lowBit函数)。 如5(101),最后一个1截出为1，那么它只有一个结点，那么他就是叶子结点。 如6(110),最后一个1截出为10，那么它这棵子树上有两个结点非常重要：而某元素的父结点为该结点6(110)加上此结点的二进制截出最后一位的1(即010)(后面会讲的lowBit函数)。 如6(110)+2(010)=8(1000)树形数组的单点元素修改和查询区间和规律 1.lowBit函数1 2 3 int lowBit(int x) { return x \u0026 -x; } 我们先需要知道lowBit函数的含义：可以用来获取某个二进制","tags":["Python","LeetCode"],"title":"(leetcode) 三日三题","url":"https://keepjolly.com/archives/leetcode-three-day-three-code-1/"},{"categories":["tech"],"content":"HEU KMS Activator 用于Windows激活 原文Link，纯粹为了记录，与原文一致 我常给自己或者亲朋好友的电脑重装系统，基于稳定性和系统运行速度等因素考量，一般都会选择安装Windows 10 Enterprise LTSC 2019。之前曾使用过国外网友s1ave77制作的Windows 10数字权利激活工具——HWIDGEN，遗憾的是该软件不支持以数字许可证永久激活LTSC 2019，仅能用KMS离线激活，让系统有效期延长到2038年。小知识： 数字许可证（在 Windows 10 版本 1511 中称为数字授权）是 Windows 10 的一种激活方法，该方法不需要输入产品密钥。激活后会自动把当前电脑硬件信息上传到微软服务器中，以后重装系统时会自动与微软服务器中存储的激活信息相比对，信息相符即自动激活该设备，免去了用户记忆和输入产品密钥的麻烦。 在同一台电脑上主要硬件（CPU和主板等）不变化的情况下，每次重新安装系统时无需再次输入密钥，系统会在自动连接到微软服务器进行激活。如果你在电脑登录了Microsoft帐户，那么数字许可证还会自动关联你的账户，即使你更换电","date":"2022-04-04T19:22:25.289Z","objectID":"bc90099051711587b47d5f7a1788b411_0","order":0,"summary":"HEU KMS Activator 用于Windows激活 原文Link，纯粹为了记录，与原文一致 我常给自己或者亲朋好友的电脑重装系统，基于稳定性和系统运行速度等因素考量，一般都会选择安装Windows 10 Enterprise LTSC 2019。之前曾使用过国外网友s1ave77制作的Windows 10数字权利激活工具——HWIDGEN，遗憾的是该软件不支持以数字许可证永久激活LTSC 2019，仅能用KMS离线激活，让系统有效期延长到2038年。小知识： 数字许可证（在 Windows 10 版本 1511 中称为数字授权）是 Windows 10 的一种激活方法，该方法不需要输入产品密钥。激活后会自动把当前电脑硬件信息上传到微软服务器中，以后重装系统时会自动与微软服务器中存储的激活信息相比对，信息相符即自动激活该设备，免去了用户记忆和输入产品密钥的麻烦。 在同一台电脑上主要硬件（CPU和主板等）不变化的情况下，每次重新安装系统时无需再次输入密钥，系统会在自动连接到微软服务器进行激活。如果你在电脑登录了Microsoft帐户，那么数字许可证还会自动关联你的账户，即使你更换电","tags":["Software"],"title":"Windows相关软件","url":"https://keepjolly.com/archives/windows-software/"},{"categories":["tech"],"content":"脑，只要登录账户就可以激活相同版本的系统。那么，有没有一款能支持以数字许可证永久激活LTSC 2019，而且不捆绑恶意软件，不篡改浏览器主页或静默下载安装广告软件等不法行为的的系统激活工具？答案当然有，这款软件叫HEU KMS Activator！HEU KMS Activator的优势在于纯粹的本地搭建服务器几乎无需联网，同时不含有任何广告或后门程序不篡改系统设置等。该工具原理主要是在本地搭建KMS服务器通过GVLK密钥激活。 这款激活软件之前颇有名气，其作者“知彼而知己”近期已更新到v20版本，这次更新采用了全新的UI设计，告别繁琐的操作，主页面的“橘黄色按钮”为智能激活按钮，将根据当前的Windows系统和Office，智能判断最佳的激活方式。诸如以下的问题，根本无需担心，只需一键按照激活按钮，HEU KMS Activator将自动提供最佳的解决方案—— 已永久激活的Windows或Office会不会破坏？ 安装了多个版本的Office怎么激活？ Retail版Office会不会转化成VL版 会不会数字权利激活？ Windows7能不能激活？ 怎么安装KMS的自动续期功能？ .","date":"2022-04-04T19:22:25.289Z","objectID":"bc90099051711587b47d5f7a1788b411_1","order":1,"summary":"脑，只要登录账户就可以激活相同版本的系统。那么，有没有一款能支持以数字许可证永久激活LTSC 2019，而且不捆绑恶意软件，不篡改浏览器主页或静默下载安装广告软件等不法行为的的系统激活工具？答案当然有，这款软件叫HEU KMS Activator！HEU KMS Activator的优势在于纯粹的本地搭建服务器几乎无需联网，同时不含有任何广告或后门程序不篡改系统设置等。该工具原理主要是在本地搭建KMS服务器通过GVLK密钥激活。 这款激活软件之前颇有名气，其作者“知彼而知己”近期已更新到v20版本，这次更新采用了全新的UI设计，告别繁琐的操作，主页面的“橘黄色按钮”为智能激活按钮，将根据当前的Windows系统和Office，智能判断最佳的激活方式。诸如以下的问题，根本无需担心，只需一键按照激活按钮，HEU KMS Activator将自动提供最佳的解决方案—— 已永久激活的Windows或Office会不会破坏？ 安装了多个版本的Office怎么激活？ Retail版Office会不会转化成VL版 会不会数字权利激活？ Windows7能不能激活？ 怎么安装KMS的自动续期功能？ .","tags":["Software"],"title":"Windows相关软件","url":"https://keepjolly.com/archives/windows-software/"},{"categories":["tech"],"content":"...... HEU KMS Activator支持激活Windows Vista/7/8/10/Server 2008/2008R2等微软系统，新增Windows 10 LTSC 2019数字激活。另外，也支持激活批量授权Office 2019及以下版本。亲测使用HEU KMS Activator，以数字许可证方式成功永久激活LTSC 2019HEU KMS Activator 当前最新版本下载： HEU KMS Activator最新版本下载地址** （访问密码：2278）** 文件: HEU_KMS_Activator_v24.6.1.exe SHA1: 6375D61442698AA57FFD56DA26CE09661504AC8C 本次更新，修复了一些已知的Bug。全面支持Office 2021以及Windows Server 2022和Win10 IoT Enterprise 2021 LTSC。并且如果Microsoft 365已订阅激活，则自动跳过。 [2022.01.17] v24.6.1 更新说明： 1.修复ARM64架构下激活失败的Bug。 2.修复Office ","date":"2022-04-04T19:22:25.289Z","objectID":"bc90099051711587b47d5f7a1788b411_2","order":2,"summary":"...... HEU KMS Activator支持激活Windows Vista/7/8/10/Server 2008/2008R2等微软系统，新增Windows 10 LTSC 2019数字激活。另外，也支持激活批量授权Office 2019及以下版本。亲测使用HEU KMS Activator，以数字许可证方式成功永久激活LTSC 2019HEU KMS Activator 当前最新版本下载： HEU KMS Activator最新版本下载地址** （访问密码：2278）** 文件: HEU_KMS_Activator_v24.6.1.exe SHA1: 6375D61442698AA57FFD56DA26CE09661504AC8C 本次更新，修复了一些已知的Bug。全面支持Office 2021以及Windows Server 2022和Win10 IoT Enterprise 2021 LTSC。并且如果Microsoft 365已订阅激活，则自动跳过。 [2022.01.17] v24.6.1 更新说明： 1.修复ARM64架构下激活失败的Bug。 2.修复Office ","tags":["Software"],"title":"Windows相关软件","url":"https://keepjolly.com/archives/windows-software/"},{"categories":["tech"],"content":"UWP激活后仍有盗版提示的弹窗。根据2013年1月30日《计算机软件保护条例》的第十七条规定：为了学习和研究软件内含的设计思想和原理，通过安装、显示、传输或者存储软件等方式使用软件的，可以不经软件著作权人许可，不向其支付报酬。正版与盗版这两个说法为法律上的概念，凡是没有取得官方授权的均都属于盗版。本软件作为激活原理研究、交流使用，不得用于商业用途，且下载后请在24小时内删除。如需要使用Windows/Office等，请前往正规渠道，购买微软官方正版软件。 由于软件的特殊性，经常会被一些杀毒软件误报，本软件保证绝对纯净。使用前请检验软件SHA1值(见更新日志)，准确无误后请放心使用。使用HEU KMS Activator进行激活后和正版的功能没有任何区别。根据网友的建议和反馈进行不定期更新。","date":"2022-04-04T19:22:25.289Z","objectID":"bc90099051711587b47d5f7a1788b411_3","order":3,"summary":"UWP激活后仍有盗版提示的弹窗。根据2013年1月30日《计算机软件保护条例》的第十七条规定：为了学习和研究软件内含的设计思想和原理，通过安装、显示、传输或者存储软件等方式使用软件的，可以不经软件著作权人许可，不向其支付报酬。正版与盗版这两个说法为法律上的概念，凡是没有取得官方授权的均都属于盗版。本软件作为激活原理研究、交流使用，不得用于商业用途，且下载后请在24小时内删除。如需要使用Windows/Office等，请前往正规渠道，购买微软官方正版软件。 由于软件的特殊性，经常会被一些杀毒软件误报，本软件保证绝对纯净。使用前请检验软件SHA1值(见更新日志)，准确无误后请放心使用。使用HEU KMS Activator进行激活后和正版的功能没有任何区别。根据网友的建议和反馈进行不定期更新。","tags":["Software"],"title":"Windows相关软件","url":"https://keepjolly.com/archives/windows-software/"},{"categories":["algorithm"],"content":"找出缺失的观测数据 找出缺失的观测数据1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 # 我的题解 def missingRolls(rolls, mean, n): loss_sum = mean * (n + len(rolls)) - sum(rolls) loss_l = [] if not n \u0026lt;= loss_sum \u0026lt;= 6*n: return loss_l for i in range(n): # 没找出规律，瞎猫碰上死耗子 num = loss_sum // n loss_l.append(num) loss_sum -= num n -= 1 return loss_l # 官方题解 def missingRolls(rolls, mean, n): missingSum = mean * (n + len(rolls)) - sum(rolls) if not n \u0026lt;= missingSum \u0026lt;= n * 6: return [] # divmod(x, y) re","date":"2022-03-30T14:53:45.377Z","objectID":"6fb26a5d81f85e4c54f46290d1378901_0","order":0,"summary":"找出缺失的观测数据 找出缺失的观测数据1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 # 我的题解 def missingRolls(rolls, mean, n): loss_sum = mean * (n + len(rolls)) - sum(rolls) loss_l = [] if not n \u0026lt;= loss_sum \u0026lt;= 6*n: return loss_l for i in range(n): # 没找出规律，瞎猫碰上死耗子 num = loss_sum // n loss_l.append(num) loss_sum -= num n -= 1 return loss_l # 官方题解 def missingRolls(rolls, mean, n): missingSum = mean * (n + len(rolls)) - sum(rolls) if not n \u0026lt;= missingSum \u0026lt;= n * 6: return [] # divmod(x, y) re","tags":["Python","LeetCode"],"title":"(leetcode) 三日三题","url":"https://keepjolly.com/archives/leetcodethree-day-three-code/"},{"categories":["algorithm"],"content":"turn the tuple (x//y, x%y) quotient, remainder = divmod(missingSum, n) return [quotient + 1] * remainder + [quotient] * (n - remainder) # 作者：himymBen def missingRolls(rolls: List[int], mean: int, n: int) -\u003e List[int]: return [s // n + 1] * (s % n) + [s // n] * (n - s % n) if n \u0026lt;= (s := mean * (len(rolls) + n) - sum(rolls)) \u0026lt;= 6 * n else [] 交替位二进制数 交替位二进制数 原本以为超时，没想到直接ac了1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 def hasAlternatingBits(n)","date":"2022-03-30T14:53:45.377Z","objectID":"6fb26a5d81f85e4c54f46290d1378901_1","order":1,"summary":"turn the tuple (x//y, x%y) quotient, remainder = divmod(missingSum, n) return [quotient + 1] * remainder + [quotient] * (n - remainder) # 作者：himymBen def missingRolls(rolls: List[int], mean: int, n: int) -\u003e List[int]: return [s // n + 1] * (s % n) + [s // n] * (n - s % n) if n \u0026lt;= (s := mean * (len(rolls) + n) - sum(rolls)) \u0026lt;= 6 * n else [] 交替位二进制数 交替位二进制数 原本以为超时，没想到直接ac了1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 def hasAlternatingBits(n)","tags":["Python","LeetCode"],"title":"(leetcode) 三日三题","url":"https://keepjolly.com/archives/leetcodethree-day-three-code/"},{"categories":["algorithm"],"content":": while n: sam = n % 2 n //= 2 if sam == n %2: return False return True # 打表 def hasAlternatingBits(n): return n in { 1, 2, 5, 10, 21, 42, 85, 170, 341, 682, 1365, 2730, 5461, 10922, 21845, 43690, 87381, 174762, 349525, 699050, 1398101, 2796202, 5592405, 11184810, 22369621, 44739242, 89478485, 178956970, 357913941, 715827882, 1431655765 } # 异或 def hasAlternatingBits(self, n: int) -\u003e bool: a = n ^ (n \u003e\u003e 1) return a \u0026 (a + 1) == 0 # https://leetcode-cn.com/problems/binary-number-with-alternating-b","date":"2022-03-30T14:53:45.377Z","objectID":"6fb26a5d81f85e4c54f46290d1378901_2","order":2,"summary":": while n: sam = n % 2 n //= 2 if sam == n %2: return False return True # 打表 def hasAlternatingBits(n): return n in { 1, 2, 5, 10, 21, 42, 85, 170, 341, 682, 1365, 2730, 5461, 10922, 21845, 43690, 87381, 174762, 349525, 699050, 1398101, 2796202, 5592405, 11184810, 22369621, 44739242, 89478485, 178956970, 357913941, 715827882, 1431655765 } # 异或 def hasAlternatingBits(self, n: int) -\u003e bool: a = n ^ (n \u003e\u003e 1) return a \u0026 (a + 1) == 0 # https://leetcode-cn.com/problems/binary-number-with-alternating-b","tags":["Python","LeetCode"],"title":"(leetcode) 三日三题","url":"https://keepjolly.com/archives/leetcodethree-day-three-code/"},{"categories":["algorithm"],"content":"作为第一篇力扣每日一题，要好好坚持，广大网友给我监督！！(后记，没坚持下去😅)图片平滑器 图片平滑器1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 # 速度有点拉跨 def imageSmoother(self, img): import numpy as np import copy # 利用pad填充原矩阵，并且防止原矩阵有0，故填充-1 padList = np.pad(img, ((1, 1), (1, 1)), 'constant', constant_values=-1) # 不用深拷贝会报错 # https://leetcode-cn.com/problems/image-smoother/comments/1461270 newImg = copy.deepcopy(img) # 获取img的行列 m, n = len(img), len(img[0]) for i in range(m): for j in ran","date":"2022-03-26T10:02:04.603Z","objectID":"b37157025913c29fa61e193444334231_0","order":0,"summary":"作为第一篇力扣每日一题，要好好坚持，广大网友给我监督！！(后记，没坚持下去😅)图片平滑器 图片平滑器1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 # 速度有点拉跨 def imageSmoother(self, img): import numpy as np import copy # 利用pad填充原矩阵，并且防止原矩阵有0，故填充-1 padList = np.pad(img, ((1, 1), (1, 1)), 'constant', constant_values=-1) # 不用深拷贝会报错 # https://leetcode-cn.com/problems/image-smoother/comments/1461270 newImg = copy.deepcopy(img) # 获取img的行列 m, n = len(img), len(img[0]) for i in range(m): for j in ran","tags":["Python","LeetCode"],"title":"(leetcode) 三日三题","url":"https://keepjolly.com/archives/leetcode-one-question-per-day/"},{"categories":["algorithm"],"content":"ge(n): # 深拷贝，防止后续修改padList zeroList = copy.deepcopy(padList[i: i + 3, j:j + 3]) # 计算9个元素中哪些元素是原数组，即非 -1 就是原元素 count = 9 - np.sum(zeroList == -1) # 遮罩层，重新置为0方便sum求和 # 或者得到-1的个数重新加回去，减小内存开销 mask = (zeroList == -1) zeroList[mask] = 0 # 计算值 newImg[i][j] = np.sum(zeroList) // count return newImg # 修改版 def imageSmoother(self, img): import numpy as np padList = np.pad(img, ((1, 1), (1, 1)), 'constant', constant_values=-1) newImg = img m, n = len(img), len(img[0]) for i in range(m): for j in range(n): z","date":"2022-03-26T10:02:04.603Z","objectID":"b37157025913c29fa61e193444334231_1","order":1,"summary":"ge(n): # 深拷贝，防止后续修改padList zeroList = copy.deepcopy(padList[i: i + 3, j:j + 3]) # 计算9个元素中哪些元素是原数组，即非 -1 就是原元素 count = 9 - np.sum(zeroList == -1) # 遮罩层，重新置为0方便sum求和 # 或者得到-1的个数重新加回去，减小内存开销 mask = (zeroList == -1) zeroList[mask] = 0 # 计算值 newImg[i][j] = np.sum(zeroList) // count return newImg # 修改版 def imageSmoother(self, img): import numpy as np padList = np.pad(img, ((1, 1), (1, 1)), 'constant', constant_values=-1) newImg = img m, n = len(img), len(img[0]) for i in range(m): for j in range(n): z","tags":["Python","LeetCode"],"title":"(leetcode) 三日三题","url":"https://keepjolly.com/archives/leetcode-one-question-per-day/"},{"categories":["algorithm"],"content":"eroList = padList[i: i + 3, j:j + 3] count = np.sum(zeroList \u003e -1) mask = (zeroList \u003e -1) newImg[i][j] = np.sum(zeroList[mask])//count return newImg 大佬题解 Link1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 m, n = len(img), len(img[0]) newImg = [[0] * n for _ in range(m)] for idx in range(m * n): # 除以n非m cur_r = idx // n # r行 cur_c = idx % n # c列 x1, y1 = cur_r, cur_c x2, y2 = cur_r, cur_c sum1 = 0 if cur_r - 1 \u003e= 0: # 上限 (-1, 0) 往上走不行 x1 = cur_r - 1 if cur_r + 1 \u0026lt; m: # 下限 (m+1,","date":"2022-03-26T10:02:04.603Z","objectID":"b37157025913c29fa61e193444334231_2","order":2,"summary":"eroList = padList[i: i + 3, j:j + 3] count = np.sum(zeroList \u003e -1) mask = (zeroList \u003e -1) newImg[i][j] = np.sum(zeroList[mask])//count return newImg 大佬题解 Link1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 m, n = len(img), len(img[0]) newImg = [[0] * n for _ in range(m)] for idx in range(m * n): # 除以n非m cur_r = idx // n # r行 cur_c = idx % n # c列 x1, y1 = cur_r, cur_c x2, y2 = cur_r, cur_c sum1 = 0 if cur_r - 1 \u003e= 0: # 上限 (-1, 0) 往上走不行 x1 = cur_r - 1 if cur_r + 1 \u0026lt; m: # 下限 (m+1,","tags":["Python","LeetCode"],"title":"(leetcode) 三日三题","url":"https://keepjolly.com/archives/leetcode-one-question-per-day/"},{"categories":["algorithm"],"content":" 0) 往下走不行 x2 = cur_r + 1 if cur_c - 1 \u003e= 0: # 左限 (0, -1) 往左走不行 y1 = cur_c - 1 if cur_c + 1 \u0026lt; n: # 右限 (0, n+1) 往右走不行 y2 = cur_c + 1 for i in range(x1, x2 + 1): for j in range(y1, y2 + 1): sum1 += img[i][j] count = (y2 - y1 + 1) * (x2 - x1 + 1) print(sum1) newImg[cur_r][cur_c] = sum1 // count return newImg python性能好版 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 # list版 占13.9mb def imageSmoother(self, img): res = [] l1, l2 = len(img), len(img[0]) expand = np.pad(img","date":"2022-03-26T10:02:04.603Z","objectID":"b37157025913c29fa61e193444334231_3","order":3,"summary":" 0) 往下走不行 x2 = cur_r + 1 if cur_c - 1 \u003e= 0: # 左限 (0, -1) 往左走不行 y1 = cur_c - 1 if cur_c + 1 \u0026lt; n: # 右限 (0, n+1) 往右走不行 y2 = cur_c + 1 for i in range(x1, x2 + 1): for j in range(y1, y2 + 1): sum1 += img[i][j] count = (y2 - y1 + 1) * (x2 - x1 + 1) print(sum1) newImg[cur_r][cur_c] = sum1 // count return newImg python性能好版 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 # list版 占13.9mb def imageSmoother(self, img): res = [] l1, l2 = len(img), len(img[0]) expand = np.pad(img","tags":["Python","LeetCode"],"title":"(leetcode) 三日三题","url":"https://keepjolly.com/archives/leetcode-one-question-per-day/"},{"categories":["algorithm"],"content":", ((1, 1), (1, 1)), 'constant', constant_values=-1) expand = expand.tolist() res = [[0] * l2 for _ in range(l1)] for i in range(l1): for j in range(l2): nine = [expand[i][j], expand[i][j + 1], expand[i][j + 2], expand[i + 1][j], expand[i + 1][j + 1], expand[i + 1][j + 2], expand[i + 2][j], expand[i + 2][j + 1], expand[i + 2][j + 2]] num = nine.count(-1) res[i][j] = (sum(nine) + num) // (9 - num) return res # numpy版 占25.3mb def imageSmoother(self, img): import numpy as np l1, l2 = len(img), len(i","date":"2022-03-26T10:02:04.603Z","objectID":"b37157025913c29fa61e193444334231_4","order":4,"summary":", ((1, 1), (1, 1)), 'constant', constant_values=-1) expand = expand.tolist() res = [[0] * l2 for _ in range(l1)] for i in range(l1): for j in range(l2): nine = [expand[i][j], expand[i][j + 1], expand[i][j + 2], expand[i + 1][j], expand[i + 1][j + 1], expand[i + 1][j + 2], expand[i + 2][j], expand[i + 2][j + 1], expand[i + 2][j + 2]] num = nine.count(-1) res[i][j] = (sum(nine) + num) // (9 - num) return res # numpy版 占25.3mb def imageSmoother(self, img): import numpy as np l1, l2 = len(img), len(i","tags":["Python","LeetCode"],"title":"(leetcode) 三日三题","url":"https://keepjolly.com/archives/leetcode-one-question-per-day/"},{"categories":["tech"],"content":"概要：本博客使用Halo搭建，域名通过name.com进行购买，使用cloudflare进行cdn代理，服务器是阿里云的，对象存储用的是腾讯云的按量付费50g。购买域名 首先，当然是买个域名啦，可以选择国内网址，但是要备案，好处就是国内比较便宜，备案也较为轻松，也可以选国外网址，不需要备案，而且更加随心所欲一点。域名网址 我这里用的是name.com买的网址。这是我的分享链接，（购买会便宜36，当然我也有点小利润）先输入你心仪的域名，如keepjolly.com，他就会告诉你这个域名是否被购买，以及其他后缀的域名。.com后缀会稍微贵一些，其他域名会便宜点 点击加入购物车，然后点上面的购物车图标，（如果点击结账，就会跳转到下面的界面，然后点击购物车） 这是点击结账的页面。 选择你要购买几年，如果有信心运营下去的话，建议多买几年，首先买一年试试水吧 促销码可以Google一下，我当初便宜了一年的Advanced Security + Privacy促销码**：**PRIVACYPLEASE 减去那个附加项、RENEW 续费便宜15% 联合使用的话，先renew，然后在域名管理页再续费pr","date":"2022-03-19T20:11:01.786Z","objectID":"e377d1f568217fbc51a108dd91707158_0","order":0,"summary":"概要：本博客使用Halo搭建，域名通过name.com进行购买，使用cloudflare进行cdn代理，服务器是阿里云的，对象存储用的是腾讯云的按量付费50g。购买域名 首先，当然是买个域名啦，可以选择国内网址，但是要备案，好处就是国内比较便宜，备案也较为轻松，也可以选国外网址，不需要备案，而且更加随心所欲一点。域名网址 我这里用的是name.com买的网址。这是我的分享链接，（购买会便宜36，当然我也有点小利润）先输入你心仪的域名，如keepjolly.com，他就会告诉你这个域名是否被购买，以及其他后缀的域名。.com后缀会稍微贵一些，其他域名会便宜点 点击加入购物车，然后点上面的购物车图标，（如果点击结账，就会跳转到下面的界面，然后点击购物车） 这是点击结账的页面。 选择你要购买几年，如果有信心运营下去的话，建议多买几年，首先买一年试试水吧 促销码可以Google一下，我当初便宜了一年的Advanced Security + Privacy促销码**：**PRIVACYPLEASE 减去那个附加项、RENEW 续费便宜15% 联合使用的话，先renew，然后在域名管理页再续费pr","tags":["Blog","Server"],"title":"Halo博客搭建---一个属于自己的网站","url":"https://keepjolly.com/archives/halo-blog-build-a-website-of-your-own/"},{"categories":["tech"],"content":"ivacy，（目前还没试过）然后就可以付款了。付款可以选择支付宝，然后就不截图了。 买后之后（因为我是买后再写博文，所以没有买后的跳转页面，我这里直接放上域名管理页面） 这是域名管理页面，一般都是自动勾选上的，自动续订需要绑信用卡，下面的域名服务器等下要替换成cloudflare。 域名购买就到这里结束了 给域名套上cdn 因为我的是国外域名，所以弄了个国外的cdn，如果是在国内购买域名，建议选国内的cdn（另外也有可能买服务器或者域名会送cdn服务）。（另外有大佬也说，套国外的cdn对国内会影响访问速度，而且也不需要ddos防御，毕竟小网站，但最后反正也免费，索性就配置一下）。注册cloudflare 这里就不说了，这都不会建议别套cdn了😂。这个cdn网站还有中文添加要加速的网站 就是添加站点把你的网址输入进去即可。 选择付费计划 白嫖怪当然选择免费计划啦，主要就是防止ddos攻击。 如果是国外的域名购买网站如namesilo、godaddy，Link here 这里展示一下name、和阿里云的。查看dns记录 建议也用上面那个链接，这里我因为点了返回，直接进入下一步了。完成名称服","date":"2022-03-19T20:11:01.786Z","objectID":"e377d1f568217fbc51a108dd91707158_1","order":1,"summary":"ivacy，（目前还没试过）然后就可以付款了。付款可以选择支付宝，然后就不截图了。 买后之后（因为我是买后再写博文，所以没有买后的跳转页面，我这里直接放上域名管理页面） 这是域名管理页面，一般都是自动勾选上的，自动续订需要绑信用卡，下面的域名服务器等下要替换成cloudflare。 域名购买就到这里结束了 给域名套上cdn 因为我的是国外域名，所以弄了个国外的cdn，如果是在国内购买域名，建议选国内的cdn（另外也有可能买服务器或者域名会送cdn服务）。（另外有大佬也说，套国外的cdn对国内会影响访问速度，而且也不需要ddos防御，毕竟小网站，但最后反正也免费，索性就配置一下）。注册cloudflare 这里就不说了，这都不会建议别套cdn了😂。这个cdn网站还有中文添加要加速的网站 就是添加站点把你的网址输入进去即可。 选择付费计划 白嫖怪当然选择免费计划啦，主要就是防止ddos攻击。 如果是国外的域名购买网站如namesilo、godaddy，Link here 这里展示一下name、和阿里云的。查看dns记录 建议也用上面那个链接，这里我因为点了返回，直接进入下一步了。完成名称服","tags":["Blog","Server"],"title":"Halo博客搭建---一个属于自己的网站","url":"https://keepjolly.com/archives/halo-blog-build-a-website-of-your-own/"},{"categories":["tech"],"content":"务器设置 复制cloudflare的名称服务器，一共两条 name.com 选择最下面的管理域名服务器 添加刚刚复制的那两条，添加完成后，cloudflare就能托管你的网站了 aliyun.com 首先当然是登录啦，登陆成功后点击第一步的“我的阿里云”。然后如果你买了域名的话，在第二步应该能看见你的域名“控制台”，点进去。 然后在域名列表里，点击你的网址，（国内记得备案哦，备案就不介绍了，网上查一查吧） 点击“修改DNS” 复制cloudflare 的名称服务器，cv就完事了 cloudflare快速入门指南 全选是就行了，最后就是这样子。 其他设置 参考上面的link（快速入门指南以及包括了大部分了）。另外，如果需要进行端到端加密的话，官网是这样子介绍的，我因为有段时间没弄这篇博客，有点忘记怎么弄了。这里就给个本机生成SSL证书，（好像大概率用的是宝塔自动产生的SSL证书），但是具体怎么套入，看看官网，或者我帮你试试。另外自己的域名购买网站记得加上SSL证书，这里也不说了，应该把本机生成的放进去就好了，或者宝塔里的，（时间有点久，不知道怎么操作了，抱歉）。另外看到阿里云有付费的SS","date":"2022-03-19T20:11:01.786Z","objectID":"e377d1f568217fbc51a108dd91707158_2","order":2,"summary":"务器设置 复制cloudflare的名称服务器，一共两条 name.com 选择最下面的管理域名服务器 添加刚刚复制的那两条，添加完成后，cloudflare就能托管你的网站了 aliyun.com 首先当然是登录啦，登陆成功后点击第一步的“我的阿里云”。然后如果你买了域名的话，在第二步应该能看见你的域名“控制台”，点进去。 然后在域名列表里，点击你的网址，（国内记得备案哦，备案就不介绍了，网上查一查吧） 点击“修改DNS” 复制cloudflare 的名称服务器，cv就完事了 cloudflare快速入门指南 全选是就行了，最后就是这样子。 其他设置 参考上面的link（快速入门指南以及包括了大部分了）。另外，如果需要进行端到端加密的话，官网是这样子介绍的，我因为有段时间没弄这篇博客，有点忘记怎么弄了。这里就给个本机生成SSL证书，（好像大概率用的是宝塔自动产生的SSL证书），但是具体怎么套入，看看官网，或者我帮你试试。另外自己的域名购买网站记得加上SSL证书，这里也不说了，应该把本机生成的放进去就好了，或者宝塔里的，（时间有点久，不知道怎么操作了，抱歉）。另外看到阿里云有付费的SS","tags":["Blog","Server"],"title":"Halo博客搭建---一个属于自己的网站","url":"https://keepjolly.com/archives/halo-blog-build-a-website-of-your-own/"},{"categories":["tech"],"content":"L证书，Google后，其实免费的对于个人博客来说就够了。阿里云的SSL证书签发 点击开启SSL证书 买免费的就行了 点证书申请，然后输入你的域名，然后下一步 然后在cloudflare的DNS记录里新建txt，对应cv就行了。 购买服务器 这里选的是阿里云的，如果需要国外的，点更多商品。下面的点开后，我选的是ECS突发性能型 t6 - 新加坡，下面是我的配置，因为没有新用户，很贵。 搭建博客 这里推荐一个up，BV1JN411Q7Na（文字版建议两者结合），我时隔已久，而且已经是装完的状态了，所以无法展示了。按照他的来可以搭建出来Halo的博客，但后来我记得部署完halo后，halo页面无法显示，可能按照清缓存，重启服务器，等待一会儿就行了。 啊啊啊，原本想从0开始搭建出自己的博客来着，属于是推着推着就忘了好多。如果有需要，我可以帮你尝试一下建博客（不保证行不行，因为我也是看网上教程来的）。对象存储 国外买国外的存储桶，记得开防盗链，然后用picgo管理，插件是picgo-plugin-pic-migrater它可以将语雀导出的markdown里的图片自动上传到存储桶，并新建一个.m","date":"2022-03-19T20:11:01.786Z","objectID":"e377d1f568217fbc51a108dd91707158_3","order":3,"summary":"L证书，Google后，其实免费的对于个人博客来说就够了。阿里云的SSL证书签发 点击开启SSL证书 买免费的就行了 点证书申请，然后输入你的域名，然后下一步 然后在cloudflare的DNS记录里新建txt，对应cv就行了。 购买服务器 这里选的是阿里云的，如果需要国外的，点更多商品。下面的点开后，我选的是ECS突发性能型 t6 - 新加坡，下面是我的配置，因为没有新用户，很贵。 搭建博客 这里推荐一个up，BV1JN411Q7Na（文字版建议两者结合），我时隔已久，而且已经是装完的状态了，所以无法展示了。按照他的来可以搭建出来Halo的博客，但后来我记得部署完halo后，halo页面无法显示，可能按照清缓存，重启服务器，等待一会儿就行了。 啊啊啊，原本想从0开始搭建出自己的博客来着，属于是推着推着就忘了好多。如果有需要，我可以帮你尝试一下建博客（不保证行不行，因为我也是看网上教程来的）。对象存储 国外买国外的存储桶，记得开防盗链，然后用picgo管理，插件是picgo-plugin-pic-migrater它可以将语雀导出的markdown里的图片自动上传到存储桶，并新建一个.m","tags":["Blog","Server"],"title":"Halo博客搭建---一个属于自己的网站","url":"https://keepjolly.com/archives/halo-blog-build-a-website-of-your-own/"},{"categories":["tech"],"content":"d文件，如果导入图片不显示，可能是你的链接没有https://。博客主题 joe2.0搜索引擎检索 这里只在必应（可以直接从你的Google里导入，但还是得把你网站地图放进去https://www.你的域名/sitemap.xml ）、Google、百度上弄了， ","date":"2022-03-19T20:11:01.786Z","objectID":"e377d1f568217fbc51a108dd91707158_4","order":4,"summary":"d文件，如果导入图片不显示，可能是你的链接没有https://。博客主题 joe2.0搜索引擎检索 这里只在必应（可以直接从你的Google里导入，但还是得把你网站地图放进去https://www.你的域名/sitemap.xml ）、Google、百度上弄了， ","tags":["Blog","Server"],"title":"Halo博客搭建---一个属于自己的网站","url":"https://keepjolly.com/archives/halo-blog-build-a-website-of-your-own/"},{"categories":["error"],"content":"如题，最近遇到b站的音频播放页不能播放音乐，一些音乐组件也不能播放，如Aplayer，然后发现谷歌浏览器加载了一个扩展程序 Disable HTML5 Autoplay，通过设置成特定模式解决了。不要用全局模式，否则容易出问题。 ","date":"2022-03-16T13:59:01.194Z","objectID":"8d06a2ee35018cb46931ab9ee6ab946a_0","order":0,"summary":"如题，最近遇到b站的音频播放页不能播放音乐，一些音乐组件也不能播放，如Aplayer，然后发现谷歌浏览器加载了一个扩展程序 Disable HTML5 Autoplay，通过设置成特定模式解决了。不要用全局模式，否则容易出问题。 ","tags":["Error"],"title":"谷歌浏览器无法播放音乐","url":"https://keepjolly.com/archives/gu-ge-liu-lan-qi-wu-fa-bo-fang-yin-le/"},{"categories":["tech"],"content":"JAVA安装 首推 JAVA安装 不知道你们注意到安装完java后会出现两个jre文件，特地去Google一下：网址 放在jdk文件里的jre文件夹是专用jre，它是用于开发java程序用 而与jdk同文件夹下的jre文件是公用jre，它是为了运行操作系统中的程序。注意平时所说的“java自动更新”不是所安装的JDK版本的更新，它指的是这个公用JRE运行时环境的更新，这个更新让你的计算机能够使用最新版本正常的运行一些网站或则Web应用等等当中的java程序 安装教程随处可见，这里重点讲一下java的版本号的区别（虽说也是能Google到，但还是留个档） 参考博客1、参考博客2、参考博客3(1) Java与JDK的区别与关系 Java等价于JDK。(2) JDK8与JDK1.8的区别与关系 JDK8或者JDK1.8也是同一个东西。(3) JDK与J2SE的区别与关系 Java（即JDK）有3个版本：J2SE(Java Platform，Standard Edition)、J2EE(Java Platform，Enterprise Edition)、J2ME(Java Platform，M","date":"2022-03-13T18:16:11.921Z","objectID":"01bdbc232a737310353de40779e49107_0","order":0,"summary":"JAVA安装 首推 JAVA安装 不知道你们注意到安装完java后会出现两个jre文件，特地去Google一下：网址 放在jdk文件里的jre文件夹是专用jre，它是用于开发java程序用 而与jdk同文件夹下的jre文件是公用jre，它是为了运行操作系统中的程序。注意平时所说的“java自动更新”不是所安装的JDK版本的更新，它指的是这个公用JRE运行时环境的更新，这个更新让你的计算机能够使用最新版本正常的运行一些网站或则Web应用等等当中的java程序 安装教程随处可见，这里重点讲一下java的版本号的区别（虽说也是能Google到，但还是留个档） 参考博客1、参考博客2、参考博客3(1) Java与JDK的区别与关系 Java等价于JDK。(2) JDK8与JDK1.8的区别与关系 JDK8或者JDK1.8也是同一个东西。(3) JDK与J2SE的区别与关系 Java（即JDK）有3个版本：J2SE(Java Platform，Standard Edition)、J2EE(Java Platform，Enterprise Edition)、J2ME(Java Platform，M","tags":["Java","Install"],"title":"安装Java(jdk)及jdk版本探讨","url":"https://keepjolly.com/archives/java-install-and-version-talk/"},{"categories":["tech"],"content":"icro Edition)，所以J2SE是3个版本中的其中一个，即标准版本。(4) java jdk-XXXX-i586与jdk-XXXX-x64区别? i586是32位系统、x64是64位系统(5) java jdk-XXXX-aarch64与jdk-XXXX-x64区别?(Linux) x86_64就是我们常用的台式机的体系架构，是基于冯诺依曼体系架构的。x86_64 Linux可以理解为在普通台式机上安装的Linux操作系统。 AArch64是一种ARMv8架构，也是一种计算机的体系架构。AArch64 Linux可以理解为在ARMv8架构的计算机上安装的Linux操作系统。 使用$ arch可查看Linux版本 图片来自：网址 注意JDK8u202以下是免费的，往上就要商业付费，个人使用不需要图片并排显示：1 2 3 4 \u0026lt;table\u003e\u0026lt;tr\u003e \u0026lt;td\u003e\u0026lt;img src=pic1.jpg border=0\u003e\u0026lt;/td\u003e \u0026lt;td\u003e\u0026lt;img src=pic2.jpg border=0\u003e\u0026lt;/td\u003e \u0026lt;/tr\u003e\u0026lt;/table\u003e ","date":"2022-03-13T18:16:11.921Z","objectID":"01bdbc232a737310353de40779e49107_1","order":1,"summary":"icro Edition)，所以J2SE是3个版本中的其中一个，即标准版本。(4) java jdk-XXXX-i586与jdk-XXXX-x64区别? i586是32位系统、x64是64位系统(5) java jdk-XXXX-aarch64与jdk-XXXX-x64区别?(Linux) x86_64就是我们常用的台式机的体系架构，是基于冯诺依曼体系架构的。x86_64 Linux可以理解为在普通台式机上安装的Linux操作系统。 AArch64是一种ARMv8架构，也是一种计算机的体系架构。AArch64 Linux可以理解为在ARMv8架构的计算机上安装的Linux操作系统。 使用$ arch可查看Linux版本 图片来自：网址 注意JDK8u202以下是免费的，往上就要商业付费，个人使用不需要图片并排显示：1 2 3 4 \u0026lt;table\u003e\u0026lt;tr\u003e \u0026lt;td\u003e\u0026lt;img src=pic1.jpg border=0\u003e\u0026lt;/td\u003e \u0026lt;td\u003e\u0026lt;img src=pic2.jpg border=0\u003e\u0026lt;/td\u003e \u0026lt;/tr\u003e\u0026lt;/table\u003e ","tags":["Java","Install"],"title":"安装Java(jdk)及jdk版本探讨","url":"https://keepjolly.com/archives/java-install-and-version-talk/"},{"categories":["tech"],"content":"OpenSSL安装 首推 生成SSL证书 忘了这个网站干啥用的 注意安装OpenSSL的时候 下面的代码特别慢 我大概用了半小时以上才装完1 2 3 nmake nmake test nmake install nmake test 可弄可不弄","date":"2022-03-13T10:45:24.654Z","objectID":"1c55e357d5b0e9b805cc9a03a0476ac0_0","order":0,"summary":"OpenSSL安装 首推 生成SSL证书 忘了这个网站干啥用的 注意安装OpenSSL的时候 下面的代码特别慢 我大概用了半小时以上才装完1 2 3 nmake nmake test nmake install nmake test 可弄可不弄","tags":["Install"],"title":"OpenSSL安装配置及配置SSL证书","url":"https://keepjolly.com/archives/openssl-install-and-get-sslcert/"},{"categories":["tech"],"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 from pathlib import Path import shutil # 需求：将old_dir里面的json文件与pic_dir里的同名不同后缀进行复制到另一个文件夹里 # 文件路径 old_dir = Path('待复制的文件先放到一个文件夹里') # 如存放{‘picture1.json’, ‘picture2.json’,...}的文件夹 pic_dir = Path('同名不同后缀的文件夹') # 如存放{‘picture1.jpg’, ‘picture2.jpg’,...}的文件夹 save_path = Path('将同名不同后缀的文件放到新的文件夹里') # 最终的{‘picture1.jpg’, ‘picture2.jpg’,...}文件夹 # 只剩下文件名 如{‘picture1’, ‘picture2’,...} ['.jpg']可放多个后缀['.jpg', '.gz'] js","date":"2022-03-11T17:11:49.912Z","objectID":"572a7ea82a0542c65a907bfd5b87cdea_0","order":0,"summary":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 from pathlib import Path import shutil # 需求：将old_dir里面的json文件与pic_dir里的同名不同后缀进行复制到另一个文件夹里 # 文件路径 old_dir = Path('待复制的文件先放到一个文件夹里') # 如存放{‘picture1.json’, ‘picture2.json’,...}的文件夹 pic_dir = Path('同名不同后缀的文件夹') # 如存放{‘picture1.jpg’, ‘picture2.jpg’,...}的文件夹 save_path = Path('将同名不同后缀的文件放到新的文件夹里') # 最终的{‘picture1.jpg’, ‘picture2.jpg’,...}文件夹 # 只剩下文件名 如{‘picture1’, ‘picture2’,...} ['.jpg']可放多个后缀['.jpg', '.gz'] js","tags":["Python"],"title":"python 使用pathlib解决同名不同后缀(扩展名)的文件的转移","url":"https://keepjolly.com/archives/pythontransferfileswiththesamename/"},{"categories":["tech"],"content":"on_names = {f.stem for f in old_dir.iterdir() if f.suffix == '.json'} nii_names = {Path(f).name for f in pic_dir.iterdir() if f.suffixes == ['.jpg']} for file_name in json_names \u0026 nii_names: # 同名文件 # json_path = old_dir / (file_name + '.json') # 重新拼接成picture1.json格式 # nii_path = pic_dir / (file_name + '.jpg') # (file_name + '.jpg.gz') # with open(json_path) as json_file, open(nii_path) as nii_file: # ... 对同名文件进行操作 # 另一种思路 if not save_path.exists(): # 文件夹不存在，则新建文件夹 print('create a new Dir!') Path","date":"2022-03-11T17:11:49.912Z","objectID":"572a7ea82a0542c65a907bfd5b87cdea_1","order":1,"summary":"on_names = {f.stem for f in old_dir.iterdir() if f.suffix == '.json'} nii_names = {Path(f).name for f in pic_dir.iterdir() if f.suffixes == ['.jpg']} for file_name in json_names \u0026 nii_names: # 同名文件 # json_path = old_dir / (file_name + '.json') # 重新拼接成picture1.json格式 # nii_path = pic_dir / (file_name + '.jpg') # (file_name + '.jpg.gz') # with open(json_path) as json_file, open(nii_path) as nii_file: # ... 对同名文件进行操作 # 另一种思路 if not save_path.exists(): # 文件夹不存在，则新建文件夹 print('create a new Dir!') Path","tags":["Python"],"title":"python 使用pathlib解决同名不同后缀(扩展名)的文件的转移","url":"https://keepjolly.com/archives/pythontransferfileswiththesamename/"},{"categories":["other"],"content":"工程伦理答案","date":"2022-03-10T13:27:38.74Z","objectID":"67da7d435409948515d519c241446631_0","order":0,"summary":"工程伦理答案","tags":["Answer"],"title":"工程伦理（2021春）第一章课后习题答案","url":"https://keepjolly.com/archives/gong-cheng-lun-li-2021-chun--di-yi-zhang-ke-hou-xi-ti-da-an/"},{"categories":["other"],"content":"答案来自：学堂在线第一章 C D D D B 《自然辩证法》一书是：\tC A ①马克思、恩格斯共同完成的著作； B ②恩格斯经过十年努力完成的著作； C ③恩格斯未完成的遗稿； D ④马克思撰写；恩格斯整理完成的著作。辩证唯物主义自然观讲的是：\tD A ①人们认识自然的辩证法； B ②人们变革自然的辩证法； C ③人们研究自然的辩证法； D ④自然界本身的辩证法。自然界物质运动服从某些共同规律表明：\tD A ①自然界具体物质运动的守恒性； B ②自然界物质运动不灭性； C ③自然界物质运动的绝对性； D ④自然界物质运动统一性。自然辩证法从当代自然科学的成果来阐述自然界本身的辩证法在人的认识中的反映，这种研究体现了：\tD A ①自然观与社会历史观的统一； B ②主观辩证法与客观辩证法的统一； C ③世界观与方法论的统一； D ④逻辑与历史的统一。自然辩证法的学科性质表明它与……处于同一层次\tB A ①辩证唯物主义； B ②历史唯物主义； C ③自然科学； D ④科学社会主义。第二章 D A B B ABDFG 古代自然观的基本特征：D A ①猜测性、辩证性、逻辑性； B ②直观性、系统","date":"2022-03-10T13:26:43.52Z","objectID":"c180a93df48d44719979843e042a69d8_0","order":0,"summary":"答案来自：学堂在线第一章 C D D D B 《自然辩证法》一书是：\tC A ①马克思、恩格斯共同完成的著作； B ②恩格斯经过十年努力完成的著作； C ③恩格斯未完成的遗稿； D ④马克思撰写；恩格斯整理完成的著作。辩证唯物主义自然观讲的是：\tD A ①人们认识自然的辩证法； B ②人们变革自然的辩证法； C ③人们研究自然的辩证法； D ④自然界本身的辩证法。自然界物质运动服从某些共同规律表明：\tD A ①自然界具体物质运动的守恒性； B ②自然界物质运动不灭性； C ③自然界物质运动的绝对性； D ④自然界物质运动统一性。自然辩证法从当代自然科学的成果来阐述自然界本身的辩证法在人的认识中的反映，这种研究体现了：\tD A ①自然观与社会历史观的统一； B ②主观辩证法与客观辩证法的统一； C ③世界观与方法论的统一； D ④逻辑与历史的统一。自然辩证法的学科性质表明它与……处于同一层次\tB A ①辩证唯物主义； B ②历史唯物主义； C ③自然科学； D ④科学社会主义。第二章 D A B B ABDFG 古代自然观的基本特征：D A ①猜测性、辩证性、逻辑性； B ②直观性、系统","tags":["Answer"],"title":"自然辩证法（学堂在线）答案/题库","url":"https://keepjolly.com/archives/dialecticsofnature-xue-tang-zai-xian--answer--dataset/"},{"categories":["other"],"content":"性、分析性； C ③思辩性、联系性、综合性； D ④直观性、思辩性、猜测性。近代自然科学独立并建立体系并获得重大成就，最为重要的原因是： A A ①科学实验的兴起 B ②理性与实验相结合 C ③人类思想获得解放 D ④资本主义生产方式的兴起被恩格斯誉为向宗教发出“挑战书”、自然科学独立的“宣言书”的不朽著作是： B A ①《人体构造论》 B ②《天体运行论》 C ③《两大世界体系的对话》 D ④《心血运动论》人类的新进化是指： B A ①纯生物属性的进化； B ②人的社会属性改变推动人的生物属性改变的进化； C ③纯社会属性的进化； D ④人类语言符号的进化。古代自然观的基本特征：\tABDFG A ①康德的“星云假说” B ②赖尔《地质学原理》提出的地质渐变理论 C ③电子的发现及普朗克“能量子”假说 D ④能量守恒及转化定律，以及法拉第－麦克斯维的电磁场理论 F ⑥细胞学说和进化论 G ⑦道尔顿－阿夫伽德罗的原子－分子论和门捷耶夫的“元素周期律”第三章 ABCE C A D C 科研选题的基本原则是\tABCE A ①创新性原则 B ②科学性原则 C ③可行性原则 D ④主体际性 E ","date":"2022-03-10T13:26:43.52Z","objectID":"c180a93df48d44719979843e042a69d8_1","order":1,"summary":"性、分析性； C ③思辩性、联系性、综合性； D ④直观性、思辩性、猜测性。近代自然科学独立并建立体系并获得重大成就，最为重要的原因是： A A ①科学实验的兴起 B ②理性与实验相结合 C ③人类思想获得解放 D ④资本主义生产方式的兴起被恩格斯誉为向宗教发出“挑战书”、自然科学独立的“宣言书”的不朽著作是： B A ①《人体构造论》 B ②《天体运行论》 C ③《两大世界体系的对话》 D ④《心血运动论》人类的新进化是指： B A ①纯生物属性的进化； B ②人的社会属性改变推动人的生物属性改变的进化； C ③纯社会属性的进化； D ④人类语言符号的进化。古代自然观的基本特征：\tABDFG A ①康德的“星云假说” B ②赖尔《地质学原理》提出的地质渐变理论 C ③电子的发现及普朗克“能量子”假说 D ④能量守恒及转化定律，以及法拉第－麦克斯维的电磁场理论 F ⑥细胞学说和进化论 G ⑦道尔顿－阿夫伽德罗的原子－分子论和门捷耶夫的“元素周期律”第三章 ABCE C A D C 科研选题的基本原则是\tABCE A ①创新性原则 B ②科学性原则 C ③可行性原则 D ④主体际性 E ","tags":["Answer"],"title":"自然辩证法（学堂在线）答案/题库","url":"https://keepjolly.com/archives/dialecticsofnature-xue-tang-zai-xian--answer--dataset/"},{"categories":["other"],"content":"⑤社会需求原则公理化方法从本质上说它属于一种：\tC A ①类比推理； B ②归纳推理； C ③演绎推理； D ④直觉推理。现代科学哲学研究表明，理论的评价并不是单一的理性评价，其原因在于：\tA A ①科学理论必须受到实践的检验； B ②科学理论是人类思维的创造； C ③科学理论的评价主体是科学权威； D ④科学理论不是理性的事业。下列不属于科学假说的主要特点是\tD A ① 科学性与猜测性的统一 B ② 抽象性与形象性的统一 C ③ 多样性与易变性的统一 D ④ 解释性与预见性的统一灵感是非逻辑思维的一种重要形式，从形式机制上看，你认为下列解释 哪一个最能反映灵感思维的本质：\tC A ①辩证唯物主义； B ②历史唯物主义； C ③自然科学； D ④科学社会主义。第四章 ABC A D B ABCD 在21世纪，科学技术工程运行的社会特点是：\tABC A ①科学技术工程的职业化 B ②科学技术工程运行的不平衡性 C ③科学、技术、工程与社会的一体化 D ④马克思撰写；恩格斯整理完成的著作。科学共同体是具有特定行为规范的社会群体，下列哪一个行为属于科学 共同体的越轨行为：\tA A ①保密； ","date":"2022-03-10T13:26:43.52Z","objectID":"c180a93df48d44719979843e042a69d8_2","order":2,"summary":"⑤社会需求原则公理化方法从本质上说它属于一种：\tC A ①类比推理； B ②归纳推理； C ③演绎推理； D ④直觉推理。现代科学哲学研究表明，理论的评价并不是单一的理性评价，其原因在于：\tA A ①科学理论必须受到实践的检验； B ②科学理论是人类思维的创造； C ③科学理论的评价主体是科学权威； D ④科学理论不是理性的事业。下列不属于科学假说的主要特点是\tD A ① 科学性与猜测性的统一 B ② 抽象性与形象性的统一 C ③ 多样性与易变性的统一 D ④ 解释性与预见性的统一灵感是非逻辑思维的一种重要形式，从形式机制上看，你认为下列解释 哪一个最能反映灵感思维的本质：\tC A ①辩证唯物主义； B ②历史唯物主义； C ③自然科学； D ④科学社会主义。第四章 ABC A D B ABCD 在21世纪，科学技术工程运行的社会特点是：\tABC A ①科学技术工程的职业化 B ②科学技术工程运行的不平衡性 C ③科学、技术、工程与社会的一体化 D ④马克思撰写；恩格斯整理完成的著作。科学共同体是具有特定行为规范的社会群体，下列哪一个行为属于科学 共同体的越轨行为：\tA A ①保密； ","tags":["Answer"],"title":"自然辩证法（学堂在线）答案/题库","url":"https://keepjolly.com/archives/dialecticsofnature-xue-tang-zai-xian--answer--dataset/"},{"categories":["other"],"content":"B ②公有性； C ③普遍主义； D ④怀疑；知识经济属性表明，科学知识在认识论上意义上是一种：\tD A ①直接生产力； B ②进化系统； C ③网络知识经济； D ④间接生产力；科学、技术和工程的外在极限主要是指它们的发展受到：\tB A ①人类的生理因素的制约和影响； B ②社会环境的制约和影响； C ③人类认识功能的制约和影响； D ④科学技术工程形式和内容的制约和影响；自然辩证法的学科性质表明它与……处于同一层次\tABCD A ①工程伦理素质 B ②环境保护意识 C ③成本意识 D ④品质意识","date":"2022-03-10T13:26:43.52Z","objectID":"c180a93df48d44719979843e042a69d8_3","order":3,"summary":"B ②公有性； C ③普遍主义； D ④怀疑；知识经济属性表明，科学知识在认识论上意义上是一种：\tD A ①直接生产力； B ②进化系统； C ③网络知识经济； D ④间接生产力；科学、技术和工程的外在极限主要是指它们的发展受到：\tB A ①人类的生理因素的制约和影响； B ②社会环境的制约和影响； C ③人类认识功能的制约和影响； D ④科学技术工程形式和内容的制约和影响；自然辩证法的学科性质表明它与……处于同一层次\tABCD A ①工程伦理素质 B ②环境保护意识 C ③成本意识 D ④品质意识","tags":["Answer"],"title":"自然辩证法（学堂在线）答案/题库","url":"https://keepjolly.com/archives/dialecticsofnature-xue-tang-zai-xian--answer--dataset/"},{"categories":["tech"],"content":"​ 安装anaconda后 Anaconda | Individual Edition ​将文件路径放入环境变量中​​创建吴恩达课后作业的python环境 conda创建虚拟环境 conda创建虚拟环境：Anaconda创建环境、删除环境、激活环境、退出环境1 conda create -n dl_wu python=3.6 如果遇到CondaHTTPError: HTTP 000 CONNECTION FAILED for url https://repo.anaconda.com/pkgs/main/win-64/current_repodata.json Elapsed: -这个问题。解决方法：conda config --add channels r 将文件内容改成 channels: - http://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/ ssl_verify: true show_channel_urls: true 参考网址： CondaHTTPError: HTTP 000 CONNECTION FAILED ","date":"2022-02-22T16:47:58.541Z","objectID":"0956c11f171132c084a55037fb33480e_0","order":0,"summary":"​ 安装anaconda后 Anaconda | Individual Edition ​将文件路径放入环境变量中​​创建吴恩达课后作业的python环境 conda创建虚拟环境 conda创建虚拟环境：Anaconda创建环境、删除环境、激活环境、退出环境1 conda create -n dl_wu python=3.6 如果遇到CondaHTTPError: HTTP 000 CONNECTION FAILED for url https://repo.anaconda.com/pkgs/main/win-64/current_repodata.json Elapsed: -这个问题。解决方法：conda config --add channels r 将文件内容改成 channels: - http://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/ ssl_verify: true show_channel_urls: true 参考网址： CondaHTTPError: HTTP 000 CONNECTION FAILED ","tags":["Python","ComputerVision"],"title":"从零开始 配置吴恩达深度学习课后作业/编程/jupyter环境","url":"https://keepjolly.com/archives/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E9%85%8D%E7%BD%AE%E5%90%B4%E6%81%A9%E8%BE%BE%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A%E7%8E%AF%E5%A2%83/"},{"categories":["tech"],"content":"for url \u0026lt;https://repo.anaconda.com/pkgs/main/win-64/current_repodata.json Elapsed: \u003e-错误解决方法 Anaconda 解决 “CondaHTTPError: HTTP 000 CONNECTION FAILED for url“ 问题 | 解决spyder无法更新到最新版本 安装tensorflow、keras python和tensorflow对应的版本：TensorFlow的历史版本与对应Python版本 keras和tensorflow对应的版本：Tensorflow | TF与Keras版本对应这里我装的是tensorflow1.14和python3.6（不小心删掉pip的话 我是更新失败了就没了：python pip报错 Cannot open Scripts\\pip-script.py 更新用这个语句：1 python -m pip install --upgrade pip ）另外装tensorflow的时候遇到这个问题 解决方法：pip config set install.tru","date":"2022-02-22T16:47:58.541Z","objectID":"0956c11f171132c084a55037fb33480e_1","order":1,"summary":"for url \u0026lt;https://repo.anaconda.com/pkgs/main/win-64/current_repodata.json Elapsed: \u003e-错误解决方法 Anaconda 解决 “CondaHTTPError: HTTP 000 CONNECTION FAILED for url“ 问题 | 解决spyder无法更新到最新版本 安装tensorflow、keras python和tensorflow对应的版本：TensorFlow的历史版本与对应Python版本 keras和tensorflow对应的版本：Tensorflow | TF与Keras版本对应这里我装的是tensorflow1.14和python3.6（不小心删掉pip的话 我是更新失败了就没了：python pip报错 Cannot open Scripts\\pip-script.py 更新用这个语句：1 python -m pip install --upgrade pip ）另外装tensorflow的时候遇到这个问题 解决方法：pip config set install.tru","tags":["Python","ComputerVision"],"title":"从零开始 配置吴恩达深度学习课后作业/编程/jupyter环境","url":"https://keepjolly.com/archives/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E9%85%8D%E7%BD%AE%E5%90%B4%E6%81%A9%E8%BE%BE%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A%E7%8E%AF%E5%A2%83/"},{"categories":["create"],"content":"​ 参考：基于PCA的人脸识别方法——特征脸法参考：人脸识别之主成分分析（PCA）简易 系统展示 迁移后图片丢失1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 ","date":"2022-02-22T16:17:36.746Z","objectID":"548d98d0b33e65340c7a5a4f09d19087_0","order":0,"summary":"​ 参考：基于PCA的人脸识别方法——特征脸法参考：人脸识别之主成分分析（PCA）简易 系统展示 迁移后图片丢失1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 ","tags":["Python","PCA"],"title":"PCA人脸识别+GUI+python","url":"https://keepjolly.com/archives/pca%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%ABguipython/"},{"categories":["create"],"content":"139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 import sys import os import numpy as np import cv2 as cv from PyQt5 import QtCore, QtWidgets, QtGui from PyQt5.QtWidgets import QApplication, QMainWindow, QFileDialog root_dir = 'FaceDB_orl' def createDataBase(path): print('--------正在获取数据--------') path1 = [] X = [] for dirpath, dirnames, fi","date":"2022-02-22T16:17:36.746Z","objectID":"548d98d0b33e65340c7a5a4f09d19087_1","order":1,"summary":"139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 import sys import os import numpy as np import cv2 as cv from PyQt5 import QtCore, QtWidgets, QtGui from PyQt5.QtWidgets import QApplication, QMainWindow, QFileDialog root_dir = 'FaceDB_orl' def createDataBase(path): print('--------正在获取数据--------') path1 = [] X = [] for dirpath, dirnames, fi","tags":["Python","PCA"],"title":"PCA人脸识别+GUI+python","url":"https://keepjolly.com/archives/pca%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%ABguipython/"},{"categories":["create"],"content":"lenames in os.walk(path): for file in filenames: temp_path = os.path.join(dirpath, file) path1.append(temp_path) for img_path in path1: img = cv.imread(img_path, cv.IMREAD_GRAYSCALE) # img = cv.resize(img, crop_size) temp = img.reshape(-1, 1) X.append(temp) X = np.array(X) # print(X.shape[0]) # m个数据 print('--------获取数据结束--------') return X.reshape(X.shape[0], X.shape[1]).T # (row*col, 400) def eigenface(X, k1=0, k2=0): print('--------正在特征提取--------') m = X.shape[1] # 400 # 计算平均脸及中心化 X_mean = np.","date":"2022-02-22T16:17:36.746Z","objectID":"548d98d0b33e65340c7a5a4f09d19087_2","order":2,"summary":"lenames in os.walk(path): for file in filenames: temp_path = os.path.join(dirpath, file) path1.append(temp_path) for img_path in path1: img = cv.imread(img_path, cv.IMREAD_GRAYSCALE) # img = cv.resize(img, crop_size) temp = img.reshape(-1, 1) X.append(temp) X = np.array(X) # print(X.shape[0]) # m个数据 print('--------获取数据结束--------') return X.reshape(X.shape[0], X.shape[1]).T # (row*col, 400) def eigenface(X, k1=0, k2=0): print('--------正在特征提取--------') m = X.shape[1] # 400 # 计算平均脸及中心化 X_mean = np.","tags":["Python","PCA"],"title":"PCA人脸识别+GUI+python","url":"https://keepjolly.com/archives/pca%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%ABguipython/"},{"categories":["tech"],"content":"Maven：Maven下载及安装 - Milburn - 博客园MySQL：MySQL的安装与配置——详细教程 - Winton-H - 博客园mysqld --install mysqld --initialize --console net start MySQL mysql -u root -p alter user 'root'@'localhost' identified by 'root(此处为你想要的密码)' ； exit mysql -u root -p(root你的密码) %mysql%\\bin （系统环境变量配置那里） rational rose：Rational Rose 2007安装及License Key Error问题的解决​matlab2020b: MATLAB 2020b 最新版激活安装（Win版） 解压密码：www.datapro.cool 或者 www.xuebear.com 无空格","date":"2022-02-22T16:12:19.03Z","objectID":"733b634d994d1873bd5caff842f8d35c_0","order":0,"summary":"Maven：Maven下载及安装 - Milburn - 博客园MySQL：MySQL的安装与配置——详细教程 - Winton-H - 博客园mysqld --install mysqld --initialize --console net start MySQL mysql -u root -p alter user 'root'@'localhost' identified by 'root(此处为你想要的密码)' ； exit mysql -u root -p(root你的密码) %mysql%\\bin （系统环境变量配置那里） rational rose：Rational Rose 2007安装及License Key Error问题的解决​matlab2020b: MATLAB 2020b 最新版激活安装（Win版） 解压密码：www.datapro.cool 或者 www.xuebear.com 无空格","tags":["Install","Maven","MySQL","Rational Rose"],"title":"软件安装教程集合","url":"https://keepjolly.com/archives/software-installation-set/"},{"categories":["tech"],"content":"​ 感谢原文博主！程序安装包下载： 链接：https://pan.baidu.com/s/1RigVWufNh-TF84zCYjxhAw 提取码：i3om破解补丁： 链接：https://pan.baidu.com/s/1ThXITtJN29BwF80Hv0-fkg 提取码：yvey破解 在破解之前，需要下载的文件有两个ideaIU-2019.3.3.exe、jetbrains-agent-latest.zip，前者是程序安装包，后者是破解补丁包，下载补丁包后解压里面的jetbrains-agent.jar和important.txt到容易找到的地方且在同级目录下(推荐放在IDEA的安装目录下)。具体操作如下图所示：打开IDEA 重新启动IDEA：打开配置文件 在最后一行加入'-javaagent:'且后面再跟上你的破解补丁的位置，两者都要在同一行上；这里的路径千万别输错且不能有中文，否则以后会打不开IDEA，最好直接复制再加上文件名；改完后记得保存。 自动破解 重启完成后正常情况下就已经自动破解成功了，可以去下面的地方去看下结果。 手动破解：进入idea激活界面 License se","date":"2022-02-19T11:36:27.628Z","objectID":"96a35298a54b28d41568b8bf8541fd39_0","order":0,"summary":"​ 感谢原文博主！程序安装包下载： 链接：https://pan.baidu.com/s/1RigVWufNh-TF84zCYjxhAw 提取码：i3om破解补丁： 链接：https://pan.baidu.com/s/1ThXITtJN29BwF80Hv0-fkg 提取码：yvey破解 在破解之前，需要下载的文件有两个ideaIU-2019.3.3.exe、jetbrains-agent-latest.zip，前者是程序安装包，后者是破解补丁包，下载补丁包后解压里面的jetbrains-agent.jar和important.txt到容易找到的地方且在同级目录下(推荐放在IDEA的安装目录下)。具体操作如下图所示：打开IDEA 重新启动IDEA：打开配置文件 在最后一行加入'-javaagent:'且后面再跟上你的破解补丁的位置，两者都要在同一行上；这里的路径千万别输错且不能有中文，否则以后会打不开IDEA，最好直接复制再加上文件名；改完后记得保存。 自动破解 重启完成后正常情况下就已经自动破解成功了，可以去下面的地方去看下结果。 手动破解：进入idea激活界面 License se","tags":["Install"],"title":"IntelliJ IDEA 2019.3.3 永久破解","url":"https://keepjolly.com/archives/intellijidea201933cracked/"},{"categories":["tech"],"content":"rver方式激活 要使用License server激活就点击License server,下面的Server address中输入http://fls.jetbrains-agent.com，再点Activate，如出现下图的情况则激活成功。 Activation code 要使用Activation code激活就点击Activation code,并在下面的输入框中粘贴下面的激活码3AGXEJXFK9-eyJsaWNlbnNlSWQiOiIzQUdYRUpYRks5IiwibGljZW5zZWVOYW1lIjoiaHR0cHM6Ly96aGlsZS5pbyIsImFzc2lnbmVlTmFtZSI6IiIsImFzc2lnbmVlRW1haWwiOiIiLCJsaWNlbnNlUmVzdHJpY3Rpb24iOiIiLCJjaGVja0NvbmN1cnJlbnRVc2UiOmZhbHNlLCJwcm9kdWN0cyI6W3siY29kZSI6IklJIiwiZmFsbGJhY2tEYXRlIjoiMjA4OS0wNy0wNyIsInBhaWRVcFRvIjoiMjA4OS0wNy","date":"2022-02-19T11:36:27.628Z","objectID":"96a35298a54b28d41568b8bf8541fd39_1","order":1,"summary":"rver方式激活 要使用License server激活就点击License server,下面的Server address中输入http://fls.jetbrains-agent.com，再点Activate，如出现下图的情况则激活成功。 Activation code 要使用Activation code激活就点击Activation code,并在下面的输入框中粘贴下面的激活码3AGXEJXFK9-eyJsaWNlbnNlSWQiOiIzQUdYRUpYRks5IiwibGljZW5zZWVOYW1lIjoiaHR0cHM6Ly96aGlsZS5pbyIsImFzc2lnbmVlTmFtZSI6IiIsImFzc2lnbmVlRW1haWwiOiIiLCJsaWNlbnNlUmVzdHJpY3Rpb24iOiIiLCJjaGVja0NvbmN1cnJlbnRVc2UiOmZhbHNlLCJwcm9kdWN0cyI6W3siY29kZSI6IklJIiwiZmFsbGJhY2tEYXRlIjoiMjA4OS0wNy0wNyIsInBhaWRVcFRvIjoiMjA4OS0wNy","tags":["Install"],"title":"IntelliJ IDEA 2019.3.3 永久破解","url":"https://keepjolly.com/archives/intellijidea201933cracked/"},{"categories":["tech"],"content":"0wNyJ9LHsiY29kZSI6IkFDIiwiZmFsbGJhY2tEYXRlIjoiMjA4OS0wNy0wNyIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9LHsiY29kZSI6IkRQTiIsImZhbGxiYWNrRGF0ZSI6IjIwODktMDctMDciLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJQUyIsImZhbGxiYWNrRGF0ZSI6IjIwODktMDctMDciLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJHTyIsImZhbGxiYWNrRGF0ZSI6IjIwODktMDctMDciLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJETSIsImZhbGxiYWNrRGF0ZSI6IjIwODktMDctMDciLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJDTCIsImZhbGxiYWNrRGF0ZSI6IjIwODktMDctMD","date":"2022-02-19T11:36:27.628Z","objectID":"96a35298a54b28d41568b8bf8541fd39_2","order":2,"summary":"0wNyJ9LHsiY29kZSI6IkFDIiwiZmFsbGJhY2tEYXRlIjoiMjA4OS0wNy0wNyIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9LHsiY29kZSI6IkRQTiIsImZhbGxiYWNrRGF0ZSI6IjIwODktMDctMDciLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJQUyIsImZhbGxiYWNrRGF0ZSI6IjIwODktMDctMDciLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJHTyIsImZhbGxiYWNrRGF0ZSI6IjIwODktMDctMDciLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJETSIsImZhbGxiYWNrRGF0ZSI6IjIwODktMDctMDciLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJDTCIsImZhbGxiYWNrRGF0ZSI6IjIwODktMDctMD","tags":["Install"],"title":"IntelliJ IDEA 2019.3.3 永久破解","url":"https://keepjolly.com/archives/intellijidea201933cracked/"},{"categories":["tech"],"content":"ciLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJSUzAiLCJmYWxsYmFja0RhdGUiOiIyMDg5LTA3LTA3IiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiUkMiLCJmYWxsYmFja0RhdGUiOiIyMDg5LTA3LTA3IiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiUkQiLCJmYWxsYmFja0RhdGUiOiIyMDg5LTA3LTA3IiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiUEMiLCJmYWxsYmFja0RhdGUiOiIyMDg5LTA3LTA3IiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiUk0iLCJmYWxsYmFja0RhdGUiOiIyMDg5LTA3LTA3IiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiV1MiLCJmYW","date":"2022-02-19T11:36:27.628Z","objectID":"96a35298a54b28d41568b8bf8541fd39_3","order":3,"summary":"ciLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJSUzAiLCJmYWxsYmFja0RhdGUiOiIyMDg5LTA3LTA3IiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiUkMiLCJmYWxsYmFja0RhdGUiOiIyMDg5LTA3LTA3IiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiUkQiLCJmYWxsYmFja0RhdGUiOiIyMDg5LTA3LTA3IiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiUEMiLCJmYWxsYmFja0RhdGUiOiIyMDg5LTA3LTA3IiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiUk0iLCJmYWxsYmFja0RhdGUiOiIyMDg5LTA3LTA3IiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiV1MiLCJmYW","tags":["Install"],"title":"IntelliJ IDEA 2019.3.3 永久破解","url":"https://keepjolly.com/archives/intellijidea201933cracked/"},{"categories":["tech"],"content":"xsYmFja0RhdGUiOiIyMDg5LTA3LTA3IiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiREIiLCJmYWxsYmFja0RhdGUiOiIyMDg5LTA3LTA3IiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiREMiLCJmYWxsYmFja0RhdGUiOiIyMDg5LTA3LTA3IiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiUlNVIiwiZmFsbGJhY2tEYXRlIjoiMjA4OS0wNy0wNyIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9XSwiaGFzaCI6IjEyNzk2ODc3LzAiLCJncmFjZVBlcmlvZERheXMiOjcsImF1dG9Qcm9sb25nYXRlZCI6ZmFsc2UsImlzQXV0b1Byb2xvbmdhdGVkIjpmYWxzZX0=-WGTHs6XpDhr+uumvbwQPOdlxWnQwgnGaL4eRnlpGKApEE","date":"2022-02-19T11:36:27.628Z","objectID":"96a35298a54b28d41568b8bf8541fd39_4","order":4,"summary":"xsYmFja0RhdGUiOiIyMDg5LTA3LTA3IiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiREIiLCJmYWxsYmFja0RhdGUiOiIyMDg5LTA3LTA3IiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiREMiLCJmYWxsYmFja0RhdGUiOiIyMDg5LTA3LTA3IiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiUlNVIiwiZmFsbGJhY2tEYXRlIjoiMjA4OS0wNy0wNyIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9XSwiaGFzaCI6IjEyNzk2ODc3LzAiLCJncmFjZVBlcmlvZERheXMiOjcsImF1dG9Qcm9sb25nYXRlZCI6ZmFsc2UsImlzQXV0b1Byb2xvbmdhdGVkIjpmYWxzZX0=-WGTHs6XpDhr+uumvbwQPOdlxWnQwgnGaL4eRnlpGKApEE","tags":["Install"],"title":"IntelliJ IDEA 2019.3.3 永久破解","url":"https://keepjolly.com/archives/intellijidea201933cracked/"},{"categories":["tech"],"content":"kJyYvNEuPWBSrQkPmVpim/8Sab6HV04Dw3IzkJT0yTc29sPEXBf69+7y6Jv718FaJu4MWfsAk/ZGtNIUOczUQ0iGKKnSSsfQ/3UoMv0q/yJcfvj+me5Zd/gfaisCCMUaGjB/lWIPpEPzblDtVJbRexB1MALrLCEoDv3ujcPAZ7xWb54DiZwjYhQvQ+CvpNNF2jeTku7lbm5v+BoDsdeRq7YBt9ANLUKPr2DahcaZ4gctpHZXhG96IyKx232jYq9jQrFDbQMtVr3E+GsCekMEWSD//dLT+HuZdc1sAIYrw==-MIIElTCCAn2gAwIBAgIBCTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE4MTEwMTEyMjk0NloXDTIwMTEwMjEyMjk0NlowaDELMAkGA1UEBhMCQ1oxDjAMBgNVBAgMBU51c2xlMQ8wDQYDVQQHDAZQcmFndWUxGTAXBgNVBAoMEEpl","date":"2022-02-19T11:36:27.628Z","objectID":"96a35298a54b28d41568b8bf8541fd39_5","order":5,"summary":"kJyYvNEuPWBSrQkPmVpim/8Sab6HV04Dw3IzkJT0yTc29sPEXBf69+7y6Jv718FaJu4MWfsAk/ZGtNIUOczUQ0iGKKnSSsfQ/3UoMv0q/yJcfvj+me5Zd/gfaisCCMUaGjB/lWIPpEPzblDtVJbRexB1MALrLCEoDv3ujcPAZ7xWb54DiZwjYhQvQ+CvpNNF2jeTku7lbm5v+BoDsdeRq7YBt9ANLUKPr2DahcaZ4gctpHZXhG96IyKx232jYq9jQrFDbQMtVr3E+GsCekMEWSD//dLT+HuZdc1sAIYrw==-MIIElTCCAn2gAwIBAgIBCTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE4MTEwMTEyMjk0NloXDTIwMTEwMjEyMjk0NlowaDELMAkGA1UEBhMCQ1oxDjAMBgNVBAgMBU51c2xlMQ8wDQYDVQQHDAZQcmFndWUxGTAXBgNVBAoMEEpl","tags":["Install"],"title":"IntelliJ IDEA 2019.3.3 永久破解","url":"https://keepjolly.com/archives/intellijidea201933cracked/"},{"categories":["tech"],"content":"dEJyYWlucyBzLnIuby4xHTAbBgNVBAMMFHByb2QzeS1mcm9tLTIwMTgxMTAxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5ndaik1GD0nyTdqkZgURQZGW+RGxCdBITPXIwpjhhaD0SXGa4XSZBEBoiPdY6XV6pOfUJeyfi9dXsY4MmT0D+sKoST3rSw96xaf9FXPvOjn4prMTdj3Ji3CyQrGWeQU2nzYqFrp1QYNLAbaViHRKuJrYHI6GCvqCbJe0LQ8qqUiVMA9wG/PQwScpNmTF9Kp2Iej+Z5OUxF33zzm+vg/nYV31HLF7fJUAplI/1nM+ZG8K+AXWgYKChtknl3sW9PCQa3a3imPL9GVToUNxc0wcuTil8mqveWcSQCHYxsIaUajWLpFzoO2AhK4mfYBSStAqEjoXRTuj17mo8Q6M2SHOcwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfL","date":"2022-02-19T11:36:27.628Z","objectID":"96a35298a54b28d41568b8bf8541fd39_6","order":6,"summary":"dEJyYWlucyBzLnIuby4xHTAbBgNVBAMMFHByb2QzeS1mcm9tLTIwMTgxMTAxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5ndaik1GD0nyTdqkZgURQZGW+RGxCdBITPXIwpjhhaD0SXGa4XSZBEBoiPdY6XV6pOfUJeyfi9dXsY4MmT0D+sKoST3rSw96xaf9FXPvOjn4prMTdj3Ji3CyQrGWeQU2nzYqFrp1QYNLAbaViHRKuJrYHI6GCvqCbJe0LQ8qqUiVMA9wG/PQwScpNmTF9Kp2Iej+Z5OUxF33zzm+vg/nYV31HLF7fJUAplI/1nM+ZG8K+AXWgYKChtknl3sW9PCQa3a3imPL9GVToUNxc0wcuTil8mqveWcSQCHYxsIaUajWLpFzoO2AhK4mfYBSStAqEjoXRTuj17mo8Q6M2SHOcwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfL","tags":["Install"],"title":"IntelliJ IDEA 2019.3.3 永久破解","url":"https://keepjolly.com/archives/intellijidea201933cracked/"},{"categories":["tech"],"content":"MGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQBonMu8oa3vmNAa4RQP8gPGlX3SQaA3WCRUAj6Zrlk8AesKV1YSkh5D2l+yUk6njysgzfr1bIR5xF8eup5xXc4/G7NtVYRSMvrd6rfQcHOyK5UFJLm+8utmyMIDrZOzLQuTsT8NxFpbCVCfV5wNRu4rChrCuArYVGaKbmp9ymkw1PU6+HoO5i2wU3ikTmRv8IRjrlSStyNzXpnPTwt7bja19ousk56r40SmlmC04GdDHErr0ei2UbjUua5kw71Qn9g02tL9fERI2sSRjQrvPbn9INwRWl5+k05mlKekbtbu2ev2woJFZK4WEXAd","date":"2022-02-19T11:36:27.628Z","objectID":"96a35298a54b28d41568b8bf8541fd39_7","order":7,"summary":"MGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQBonMu8oa3vmNAa4RQP8gPGlX3SQaA3WCRUAj6Zrlk8AesKV1YSkh5D2l+yUk6njysgzfr1bIR5xF8eup5xXc4/G7NtVYRSMvrd6rfQcHOyK5UFJLm+8utmyMIDrZOzLQuTsT8NxFpbCVCfV5wNRu4rChrCuArYVGaKbmp9ymkw1PU6+HoO5i2wU3ikTmRv8IRjrlSStyNzXpnPTwt7bja19ousk56r40SmlmC04GdDHErr0ei2UbjUua5kw71Qn9g02tL9fERI2sSRjQrvPbn9INwRWl5+k05mlKekbtbu2ev2woJFZK4WEXAd","tags":["Install"],"title":"IntelliJ IDEA 2019.3.3 永久破解","url":"https://keepjolly.com/archives/intellijidea201933cracked/"},{"categories":["tech"],"content":"/GaAdeZZdumv8T2idDFL7cAirJwcrbfpawPeXr52oKTPnXfi0l5+g9Gnt/wfiXCrPElX6ycTR6iL3GC2VR4jTz6YatT4Ntz59/THOT7NJQhr6AyLkhhJCdkzE2cob/KouVp4ivV7Q3Fc6HX7eepHAAF/DpxwgOrg9smX6coXLgfp0b1RU2u/tUNID04rpNxTMueTtrT8WSskqvaJd3RH8r7cnRj6Y2hltkja82HlpDURDxDTRvv+krbwMr26SB/40BjpMUrDRCeKuiBahC0DCoU/4+ze1l94wVUhdkCfL0GpJrMSCDEK+XEurU18Hb7WT+ThXbkdl6VpFdHsRvqAnhR2g4b+Qzgidmuky5NUZVfEaZqV/g==再点Activate，如果出现如下图所示，则激活成功 我个人是在hosts文件里加上了 0.0.0.0 account.jetbrains.com 0.0.0.0 www.jetbrains.com然后用最后一个方法成功了​","date":"2022-02-19T11:36:27.628Z","objectID":"96a35298a54b28d41568b8bf8541fd39_8","order":8,"summary":"/GaAdeZZdumv8T2idDFL7cAirJwcrbfpawPeXr52oKTPnXfi0l5+g9Gnt/wfiXCrPElX6ycTR6iL3GC2VR4jTz6YatT4Ntz59/THOT7NJQhr6AyLkhhJCdkzE2cob/KouVp4ivV7Q3Fc6HX7eepHAAF/DpxwgOrg9smX6coXLgfp0b1RU2u/tUNID04rpNxTMueTtrT8WSskqvaJd3RH8r7cnRj6Y2hltkja82HlpDURDxDTRvv+krbwMr26SB/40BjpMUrDRCeKuiBahC0DCoU/4+ze1l94wVUhdkCfL0GpJrMSCDEK+XEurU18Hb7WT+ThXbkdl6VpFdHsRvqAnhR2g4b+Qzgidmuky5NUZVfEaZqV/g==再点Activate，如果出现如下图所示，则激活成功 我个人是在hosts文件里加上了 0.0.0.0 account.jetbrains.com 0.0.0.0 www.jetbrains.com然后用最后一个方法成功了​","tags":["Install"],"title":"IntelliJ IDEA 2019.3.3 永久破解","url":"https://keepjolly.com/archives/intellijidea201933cracked/"}]